/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Name: NameObject
      NameConnection: NameConnectionObject
      PageInfo: PageInfoObject
      NameEdge: NameEdgeObject
      AggregateName: AggregateNameObject
      Birth: BirthObject
      BirthConnection: BirthConnectionObject
      BirthEdge: BirthEdgeObject
      AggregateBirth: AggregateBirthObject
      Contact: ContactObject
      ContactConnection: ContactConnectionObject
      ContactEdge: ContactEdgeObject
      AggregateContact: AggregateContactObject
      Profile: ProfileObject
      Media: MediaObject
      ProfileConnection: ProfileConnectionObject
      ProfileEdge: ProfileEdgeObject
      AggregateProfile: AggregateProfileObject
      Employee: EmployeeObject
      EmployeeConnection: EmployeeConnectionObject
      EmployeeEdge: EmployeeEdgeObject
      AggregateEmployee: AggregateEmployeeObject
      MediaConnection: MediaConnectionObject
      MediaEdge: MediaEdgeObject
      AggregateMedia: AggregateMediaObject
      Post: PostObject
      PostConnection: PostConnectionObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      SizeType: SizeTypeObject
      SizeTypeConnection: SizeTypeConnectionObject
      SizeTypeEdge: SizeTypeEdgeObject
      AggregateSizeType: AggregateSizeTypeObject
      MetaType: MetaTypeObject
      MetaTypeConnection: MetaTypeConnectionObject
      MetaTypeEdge: MetaTypeEdgeObject
      AggregateMetaType: AggregateMetaTypeObject
      Insight: InsightObject
      InsightConnection: InsightConnectionObject
      InsightEdge: InsightEdgeObject
      AggregateInsight: AggregateInsightObject
      Policy: PolicyObject
      PolicyConnection: PolicyConnectionObject
      PolicyEdge: PolicyEdgeObject
      AggregatePolicy: AggregatePolicyObject
      User: UserObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      NameSubscriptionPayload: NameSubscriptionPayloadObject
      NamePreviousValues: NamePreviousValuesObject
      BirthSubscriptionPayload: BirthSubscriptionPayloadObject
      BirthPreviousValues: BirthPreviousValuesObject
      ContactSubscriptionPayload: ContactSubscriptionPayloadObject
      ContactPreviousValues: ContactPreviousValuesObject
      ProfileSubscriptionPayload: ProfileSubscriptionPayloadObject
      ProfilePreviousValues: ProfilePreviousValuesObject
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadObject
      EmployeePreviousValues: EmployeePreviousValuesObject
      MediaSubscriptionPayload: MediaSubscriptionPayloadObject
      MediaPreviousValues: MediaPreviousValuesObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      SizeTypeSubscriptionPayload: SizeTypeSubscriptionPayloadObject
      SizeTypePreviousValues: SizeTypePreviousValuesObject
      MetaTypeSubscriptionPayload: MetaTypeSubscriptionPayloadObject
      MetaTypePreviousValues: MetaTypePreviousValuesObject
      InsightSubscriptionPayload: InsightSubscriptionPayloadObject
      InsightPreviousValues: InsightPreviousValuesObject
      PolicySubscriptionPayload: PolicySubscriptionPayloadObject
      PolicyPreviousValues: PolicyPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Name: NameFieldDetails
      NameConnection: NameConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      NameEdge: NameEdgeFieldDetails
      AggregateName: AggregateNameFieldDetails
      Birth: BirthFieldDetails
      BirthConnection: BirthConnectionFieldDetails
      BirthEdge: BirthEdgeFieldDetails
      AggregateBirth: AggregateBirthFieldDetails
      Contact: ContactFieldDetails
      ContactConnection: ContactConnectionFieldDetails
      ContactEdge: ContactEdgeFieldDetails
      AggregateContact: AggregateContactFieldDetails
      Profile: ProfileFieldDetails
      Media: MediaFieldDetails
      ProfileConnection: ProfileConnectionFieldDetails
      ProfileEdge: ProfileEdgeFieldDetails
      AggregateProfile: AggregateProfileFieldDetails
      Employee: EmployeeFieldDetails
      EmployeeConnection: EmployeeConnectionFieldDetails
      EmployeeEdge: EmployeeEdgeFieldDetails
      AggregateEmployee: AggregateEmployeeFieldDetails
      MediaConnection: MediaConnectionFieldDetails
      MediaEdge: MediaEdgeFieldDetails
      AggregateMedia: AggregateMediaFieldDetails
      Post: PostFieldDetails
      PostConnection: PostConnectionFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      SizeType: SizeTypeFieldDetails
      SizeTypeConnection: SizeTypeConnectionFieldDetails
      SizeTypeEdge: SizeTypeEdgeFieldDetails
      AggregateSizeType: AggregateSizeTypeFieldDetails
      MetaType: MetaTypeFieldDetails
      MetaTypeConnection: MetaTypeConnectionFieldDetails
      MetaTypeEdge: MetaTypeEdgeFieldDetails
      AggregateMetaType: AggregateMetaTypeFieldDetails
      Insight: InsightFieldDetails
      InsightConnection: InsightConnectionFieldDetails
      InsightEdge: InsightEdgeFieldDetails
      AggregateInsight: AggregateInsightFieldDetails
      Policy: PolicyFieldDetails
      PolicyConnection: PolicyConnectionFieldDetails
      PolicyEdge: PolicyEdgeFieldDetails
      AggregatePolicy: AggregatePolicyFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      NameSubscriptionPayload: NameSubscriptionPayloadFieldDetails
      NamePreviousValues: NamePreviousValuesFieldDetails
      BirthSubscriptionPayload: BirthSubscriptionPayloadFieldDetails
      BirthPreviousValues: BirthPreviousValuesFieldDetails
      ContactSubscriptionPayload: ContactSubscriptionPayloadFieldDetails
      ContactPreviousValues: ContactPreviousValuesFieldDetails
      ProfileSubscriptionPayload: ProfileSubscriptionPayloadFieldDetails
      ProfilePreviousValues: ProfilePreviousValuesFieldDetails
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadFieldDetails
      EmployeePreviousValues: EmployeePreviousValuesFieldDetails
      MediaSubscriptionPayload: MediaSubscriptionPayloadFieldDetails
      MediaPreviousValues: MediaPreviousValuesFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      SizeTypeSubscriptionPayload: SizeTypeSubscriptionPayloadFieldDetails
      SizeTypePreviousValues: SizeTypePreviousValuesFieldDetails
      MetaTypeSubscriptionPayload: MetaTypeSubscriptionPayloadFieldDetails
      MetaTypePreviousValues: MetaTypePreviousValuesFieldDetails
      InsightSubscriptionPayload: InsightSubscriptionPayloadFieldDetails
      InsightPreviousValues: InsightPreviousValuesFieldDetails
      PolicySubscriptionPayload: PolicySubscriptionPayloadFieldDetails
      PolicyPreviousValues: PolicyPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      NameWhereUniqueInput: NameWhereUniqueInputInputObject
      NameWhereInput: NameWhereInputInputObject
      BirthWhereUniqueInput: BirthWhereUniqueInputInputObject
      BirthWhereInput: BirthWhereInputInputObject
      ContactWhereUniqueInput: ContactWhereUniqueInputInputObject
      ContactWhereInput: ContactWhereInputInputObject
      ProfileWhereUniqueInput: ProfileWhereUniqueInputInputObject
      ProfileWhereInput: ProfileWhereInputInputObject
      MediaWhereInput: MediaWhereInputInputObject
      EmployeeWhereUniqueInput: EmployeeWhereUniqueInputInputObject
      EmployeeWhereInput: EmployeeWhereInputInputObject
      MediaWhereUniqueInput: MediaWhereUniqueInputInputObject
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      PostWhereInput: PostWhereInputInputObject
      SizeTypeWhereUniqueInput: SizeTypeWhereUniqueInputInputObject
      SizeTypeWhereInput: SizeTypeWhereInputInputObject
      MetaTypeWhereUniqueInput: MetaTypeWhereUniqueInputInputObject
      MetaTypeWhereInput: MetaTypeWhereInputInputObject
      InsightWhereUniqueInput: InsightWhereUniqueInputInputObject
      InsightWhereInput: InsightWhereInputInputObject
      PolicyWhereUniqueInput: PolicyWhereUniqueInputInputObject
      PolicyWhereInput: PolicyWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      NameCreateInput: NameCreateInputInputObject
      NameUpdateInput: NameUpdateInputInputObject
      NameUpdateManyMutationInput: NameUpdateManyMutationInputInputObject
      BirthCreateInput: BirthCreateInputInputObject
      BirthUpdateInput: BirthUpdateInputInputObject
      BirthUpdateManyMutationInput: BirthUpdateManyMutationInputInputObject
      ContactCreateInput: ContactCreateInputInputObject
      ContactUpdateInput: ContactUpdateInputInputObject
      ContactUpdateManyMutationInput: ContactUpdateManyMutationInputInputObject
      ProfileCreateInput: ProfileCreateInputInputObject
      MediaCreateOneInput: MediaCreateOneInputInputObject
      MediaCreateInput: MediaCreateInputInputObject
      ProfileUpdateInput: ProfileUpdateInputInputObject
      MediaUpdateOneInput: MediaUpdateOneInputInputObject
      MediaUpdateDataInput: MediaUpdateDataInputInputObject
      MediaUpsertNestedInput: MediaUpsertNestedInputInputObject
      ProfileUpdateManyMutationInput: ProfileUpdateManyMutationInputInputObject
      EmployeeCreateInput: EmployeeCreateInputInputObject
      BirthCreateOneInput: BirthCreateOneInputInputObject
      ContactCreateOneInput: ContactCreateOneInputInputObject
      NameCreateOneInput: NameCreateOneInputInputObject
      ProfileCreateOneInput: ProfileCreateOneInputInputObject
      EmployeeUpdateInput: EmployeeUpdateInputInputObject
      BirthUpdateOneInput: BirthUpdateOneInputInputObject
      BirthUpdateDataInput: BirthUpdateDataInputInputObject
      BirthUpsertNestedInput: BirthUpsertNestedInputInputObject
      ContactUpdateOneInput: ContactUpdateOneInputInputObject
      ContactUpdateDataInput: ContactUpdateDataInputInputObject
      ContactUpsertNestedInput: ContactUpsertNestedInputInputObject
      NameUpdateOneInput: NameUpdateOneInputInputObject
      NameUpdateDataInput: NameUpdateDataInputInputObject
      NameUpsertNestedInput: NameUpsertNestedInputInputObject
      ProfileUpdateOneInput: ProfileUpdateOneInputInputObject
      ProfileUpdateDataInput: ProfileUpdateDataInputInputObject
      ProfileUpsertNestedInput: ProfileUpsertNestedInputInputObject
      MediaUpdateInput: MediaUpdateInputInputObject
      MediaUpdateManyMutationInput: MediaUpdateManyMutationInputInputObject
      PostCreateInput: PostCreateInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      SizeTypeCreateInput: SizeTypeCreateInputInputObject
      SizeTypeUpdateInput: SizeTypeUpdateInputInputObject
      SizeTypeUpdateManyMutationInput: SizeTypeUpdateManyMutationInputInputObject
      MetaTypeCreateInput: MetaTypeCreateInputInputObject
      SizeTypeCreateOneInput: SizeTypeCreateOneInputInputObject
      MetaTypeUpdateInput: MetaTypeUpdateInputInputObject
      SizeTypeUpdateOneInput: SizeTypeUpdateOneInputInputObject
      SizeTypeUpdateDataInput: SizeTypeUpdateDataInputInputObject
      SizeTypeUpsertNestedInput: SizeTypeUpsertNestedInputInputObject
      MetaTypeUpdateManyMutationInput: MetaTypeUpdateManyMutationInputInputObject
      InsightCreateInput: InsightCreateInputInputObject
      MetaTypeCreateOneInput: MetaTypeCreateOneInputInputObject
      InsightUpdateInput: InsightUpdateInputInputObject
      MetaTypeUpdateOneInput: MetaTypeUpdateOneInputInputObject
      MetaTypeUpdateDataInput: MetaTypeUpdateDataInputInputObject
      MetaTypeUpsertNestedInput: MetaTypeUpsertNestedInputInputObject
      InsightUpdateManyMutationInput: InsightUpdateManyMutationInputInputObject
      PolicyCreateInput: PolicyCreateInputInputObject
      PolicyUpdateInput: PolicyUpdateInputInputObject
      PolicyUpdateManyMutationInput: PolicyUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      NameSubscriptionWhereInput: NameSubscriptionWhereInputInputObject
      BirthSubscriptionWhereInput: BirthSubscriptionWhereInputInputObject
      ContactSubscriptionWhereInput: ContactSubscriptionWhereInputInputObject
      ProfileSubscriptionWhereInput: ProfileSubscriptionWhereInputInputObject
      EmployeeSubscriptionWhereInput: EmployeeSubscriptionWhereInputInputObject
      MediaSubscriptionWhereInput: MediaSubscriptionWhereInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      SizeTypeSubscriptionWhereInput: SizeTypeSubscriptionWhereInputInputObject
      MetaTypeSubscriptionWhereInput: MetaTypeSubscriptionWhereInputInputObject
      InsightSubscriptionWhereInput: InsightSubscriptionWhereInputInputObject
      PolicySubscriptionWhereInput: PolicySubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    NameOrderByInput: NameOrderByInputValues,
    BirthOrderByInput: BirthOrderByInputValues,
    ContactOrderByInput: ContactOrderByInputValues,
    MediaType: MediaTypeValues,
    ProfileOrderByInput: ProfileOrderByInputValues,
    EmployeeOrderByInput: EmployeeOrderByInputValues,
    MediaOrderByInput: MediaOrderByInputValues,
    PostOrderByInput: PostOrderByInputValues,
    SizeTypeOrderByInput: SizeTypeOrderByInputValues,
    MetaTypeOrderByInput: MetaTypeOrderByInputValues,
    InsightOrderByInput: InsightOrderByInputValues,
    PolicyOrderByInput: PolicyOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'name', args?: QueryNameArgs[] | false, alias?: string  } 
  | { name: 'names', args?: QueryNamesArgs[] | false, alias?: string  } 
  | { name: 'namesConnection', args?: QueryNamesConnectionArgs[] | false, alias?: string  } 
  | { name: 'birth', args?: QueryBirthArgs[] | false, alias?: string  } 
  | { name: 'births', args?: QueryBirthsArgs[] | false, alias?: string  } 
  | { name: 'birthsConnection', args?: QueryBirthsConnectionArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: QueryContactArgs[] | false, alias?: string  } 
  | { name: 'contacts', args?: QueryContactsArgs[] | false, alias?: string  } 
  | { name: 'contactsConnection', args?: QueryContactsConnectionArgs[] | false, alias?: string  } 
  | { name: 'profile', args?: QueryProfileArgs[] | false, alias?: string  } 
  | { name: 'profiles', args?: QueryProfilesArgs[] | false, alias?: string  } 
  | { name: 'profilesConnection', args?: QueryProfilesConnectionArgs[] | false, alias?: string  } 
  | { name: 'employee', args?: QueryEmployeeArgs[] | false, alias?: string  } 
  | { name: 'employees', args?: QueryEmployeesArgs[] | false, alias?: string  } 
  | { name: 'employeesConnection', args?: QueryEmployeesConnectionArgs[] | false, alias?: string  } 
  | { name: 'media', args?: QueryMediaArgs[] | false, alias?: string  } 
  | { name: 'medias', args?: QueryMediasArgs[] | false, alias?: string  } 
  | { name: 'mediasConnection', args?: QueryMediasConnectionArgs[] | false, alias?: string  } 
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'sizeType', args?: QuerySizeTypeArgs[] | false, alias?: string  } 
  | { name: 'sizeTypes', args?: QuerySizeTypesArgs[] | false, alias?: string  } 
  | { name: 'sizeTypesConnection', args?: QuerySizeTypesConnectionArgs[] | false, alias?: string  } 
  | { name: 'metaType', args?: QueryMetaTypeArgs[] | false, alias?: string  } 
  | { name: 'metaTypes', args?: QueryMetaTypesArgs[] | false, alias?: string  } 
  | { name: 'metaTypesConnection', args?: QueryMetaTypesConnectionArgs[] | false, alias?: string  } 
  | { name: 'insight', args?: QueryInsightArgs[] | false, alias?: string  } 
  | { name: 'insights', args?: QueryInsightsArgs[] | false, alias?: string  } 
  | { name: 'insightsConnection', args?: QueryInsightsConnectionArgs[] | false, alias?: string  } 
  | { name: 'policy', args?: QueryPolicyArgs[] | false, alias?: string  } 
  | { name: 'policies', args?: QueryPoliciesArgs[] | false, alias?: string  } 
  | { name: 'policiesConnection', args?: QueryPoliciesConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'name'
  | 'names'
  | 'namesConnection'
  | 'birth'
  | 'births'
  | 'birthsConnection'
  | 'contact'
  | 'contacts'
  | 'contactsConnection'
  | 'profile'
  | 'profiles'
  | 'profilesConnection'
  | 'employee'
  | 'employees'
  | 'employeesConnection'
  | 'media'
  | 'medias'
  | 'mediasConnection'
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'sizeType'
  | 'sizeTypes'
  | 'sizeTypesConnection'
  | 'metaType'
  | 'metaTypes'
  | 'metaTypesConnection'
  | 'insight'
  | 'insights'
  | 'insightsConnection'
  | 'policy'
  | 'policies'
  | 'policiesConnection'
  | 'user'
  | 'users'
  | 'usersConnection'


type QueryNameArgs =
  | 'where'
type QueryNamesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNamesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBirthArgs =
  | 'where'
type QueryBirthsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBirthsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactArgs =
  | 'where'
type QueryContactsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProfileArgs =
  | 'where'
type QueryProfilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProfilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeeArgs =
  | 'where'
type QueryEmployeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMediaArgs =
  | 'where'
type QueryMediasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMediasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySizeTypeArgs =
  | 'where'
type QuerySizeTypesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySizeTypesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMetaTypeArgs =
  | 'where'
type QueryMetaTypesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMetaTypesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInsightArgs =
  | 'where'
type QueryInsightsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInsightsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPolicyArgs =
  | 'where'
type QueryPoliciesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPoliciesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  name: {
    type: 'Name'
    args: Record<QueryNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  names: {
    type: 'Name'
    args: Record<QueryNamesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NameWhereInput | null, orderBy?: prisma.NameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name[]> | prisma.Name[]
  }
  namesConnection: {
    type: 'NameConnection'
    args: Record<QueryNamesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NameWhereInput | null, orderBy?: prisma.NameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NameConnection> | prisma.NameConnection
  }
  birth: {
    type: 'Birth'
    args: Record<QueryBirthArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BirthWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth | null> | prisma.Birth | null
  }
  births: {
    type: 'Birth'
    args: Record<QueryBirthsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BirthWhereInput | null, orderBy?: prisma.BirthOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth[]> | prisma.Birth[]
  }
  birthsConnection: {
    type: 'BirthConnection'
    args: Record<QueryBirthsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BirthWhereInput | null, orderBy?: prisma.BirthOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BirthConnection> | prisma.BirthConnection
  }
  contact: {
    type: 'Contact'
    args: Record<QueryContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  contacts: {
    type: 'Contact'
    args: Record<QueryContactsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact[]> | prisma.Contact[]
  }
  contactsConnection: {
    type: 'ContactConnection'
    args: Record<QueryContactsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactConnection> | prisma.ContactConnection
  }
  profile: {
    type: 'Profile'
    args: Record<QueryProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  profiles: {
    type: 'Profile'
    args: Record<QueryProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProfileWhereInput | null, orderBy?: prisma.ProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile[]> | prisma.Profile[]
  }
  profilesConnection: {
    type: 'ProfileConnection'
    args: Record<QueryProfilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProfileWhereInput | null, orderBy?: prisma.ProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfileConnection> | prisma.ProfileConnection
  }
  employee: {
    type: 'Employee'
    args: Record<QueryEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  employees: {
    type: 'Employee'
    args: Record<QueryEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee[]> | prisma.Employee[]
  }
  employeesConnection: {
    type: 'EmployeeConnection'
    args: Record<QueryEmployeesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeConnection> | prisma.EmployeeConnection
  }
  media: {
    type: 'Media'
    args: Record<QueryMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  medias: {
    type: 'Media'
    args: Record<QueryMediasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MediaWhereInput | null, orderBy?: prisma.MediaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media[]> | prisma.Media[]
  }
  mediasConnection: {
    type: 'MediaConnection'
    args: Record<QueryMediasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MediaWhereInput | null, orderBy?: prisma.MediaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaConnection> | prisma.MediaConnection
  }
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  sizeType: {
    type: 'SizeType'
    args: Record<QuerySizeTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SizeTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType | null> | prisma.SizeType | null
  }
  sizeTypes: {
    type: 'SizeType'
    args: Record<QuerySizeTypesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SizeTypeWhereInput | null, orderBy?: prisma.SizeTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType[]> | prisma.SizeType[]
  }
  sizeTypesConnection: {
    type: 'SizeTypeConnection'
    args: Record<QuerySizeTypesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SizeTypeWhereInput | null, orderBy?: prisma.SizeTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeTypeConnection> | prisma.SizeTypeConnection
  }
  metaType: {
    type: 'MetaType'
    args: Record<QueryMetaTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MetaTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType | null> | prisma.MetaType | null
  }
  metaTypes: {
    type: 'MetaType'
    args: Record<QueryMetaTypesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MetaTypeWhereInput | null, orderBy?: prisma.MetaTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType[]> | prisma.MetaType[]
  }
  metaTypesConnection: {
    type: 'MetaTypeConnection'
    args: Record<QueryMetaTypesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MetaTypeWhereInput | null, orderBy?: prisma.MetaTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaTypeConnection> | prisma.MetaTypeConnection
  }
  insight: {
    type: 'Insight'
    args: Record<QueryInsightArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InsightWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight | null> | prisma.Insight | null
  }
  insights: {
    type: 'Insight'
    args: Record<QueryInsightsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InsightWhereInput | null, orderBy?: prisma.InsightOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight[]> | prisma.Insight[]
  }
  insightsConnection: {
    type: 'InsightConnection'
    args: Record<QueryInsightsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InsightWhereInput | null, orderBy?: prisma.InsightOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InsightConnection> | prisma.InsightConnection
  }
  policy: {
    type: 'Policy'
    args: Record<QueryPolicyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PolicyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy | null> | prisma.Policy | null
  }
  policies: {
    type: 'Policy'
    args: Record<QueryPoliciesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PolicyWhereInput | null, orderBy?: prisma.PolicyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy[]> | prisma.Policy[]
  }
  policiesConnection: {
    type: 'PolicyConnection'
    args: Record<QueryPoliciesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PolicyWhereInput | null, orderBy?: prisma.PolicyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PolicyConnection> | prisma.PolicyConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
}
  

// Types for Name

type NameObject =
  | NameFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'first', args?: [] | false, alias?: string  } 
  | { name: 'middle', args?: [] | false, alias?: string  } 
  | { name: 'last', args?: [] | false, alias?: string  } 
  | { name: 'preferred', args?: [] | false, alias?: string  } 

type NameFields =
  | 'id'
  | 'first'
  | 'middle'
  | 'last'
  | 'preferred'



  

export interface NameFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  first: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  last: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  preferred: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for NameConnection

type NameConnectionObject =
  | NameConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NameConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NameConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NameEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NameEdge[]> | prisma.NameEdge[]
  }
  aggregate: {
    type: 'AggregateName'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateName> | prisma.AggregateName
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for NameEdge

type NameEdgeObject =
  | NameEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NameEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NameEdgeFieldDetails {
  node: {
    type: 'Name'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateName

type AggregateNameObject =
  | AggregateNameFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNameFields =
  | 'count'



  

export interface AggregateNameFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Birth

type BirthObject =
  | BirthFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 

type BirthFields =
  | 'id'
  | 'address'
  | 'city'
  | 'date'
  | 'state'



  

export interface BirthFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for BirthConnection

type BirthConnectionObject =
  | BirthConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BirthConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BirthConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BirthConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BirthEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BirthConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BirthEdge[]> | prisma.BirthEdge[]
  }
  aggregate: {
    type: 'AggregateBirth'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BirthConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBirth> | prisma.AggregateBirth
  }
}
  

// Types for BirthEdge

type BirthEdgeObject =
  | BirthEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BirthEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BirthEdgeFieldDetails {
  node: {
    type: 'Birth'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BirthEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth> | prisma.Birth
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBirth

type AggregateBirthObject =
  | AggregateBirthFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBirthFields =
  | 'count'



  

export interface AggregateBirthFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Contact

type ContactObject =
  | ContactFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 

type ContactFields =
  | 'id'
  | 'address'
  | 'city'
  | 'phone'
  | 'state'



  

export interface ContactFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ContactConnection

type ContactConnectionObject =
  | ContactConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ContactConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ContactConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ContactEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactEdge[]> | prisma.ContactEdge[]
  }
  aggregate: {
    type: 'AggregateContact'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateContact> | prisma.AggregateContact
  }
}
  

// Types for ContactEdge

type ContactEdgeObject =
  | ContactEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ContactEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ContactEdgeFieldDetails {
  node: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateContact

type AggregateContactObject =
  | AggregateContactFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateContactFields =
  | 'count'



  

export interface AggregateContactFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Profile

type ProfileObject =
  | ProfileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'bio', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'media', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type ProfileFields =
  | 'id'
  | 'bio'
  | 'level'
  | 'media'
  | 'title'



  

export interface ProfileFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  bio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  media: {
    type: 'Media'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Profile">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Media

type MediaObject =
  | MediaFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'height', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type MediaFields =
  | 'id'
  | 'height'
  | 'source'
  | 'type'



  

export interface MediaFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  height: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  source: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'MediaType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Media">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaType> | prisma.MediaType
  }
}
  

// Types for ProfileConnection

type ProfileConnectionObject =
  | ProfileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProfileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProfileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProfileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfileEdge[]> | prisma.ProfileEdge[]
  }
  aggregate: {
    type: 'AggregateProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProfile> | prisma.AggregateProfile
  }
}
  

// Types for ProfileEdge

type ProfileEdgeObject =
  | ProfileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProfileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProfileEdgeFieldDetails {
  node: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile> | prisma.Profile
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProfile

type AggregateProfileObject =
  | AggregateProfileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProfileFields =
  | 'count'



  

export interface AggregateProfileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Employee

type EmployeeObject =
  | EmployeeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'birth', args?: [] | false, alias?: string  } 
  | { name: 'contact', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 

type EmployeeFields =
  | 'id'
  | 'birth'
  | 'contact'
  | 'name'
  | 'profile'



  

export interface EmployeeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  birth: {
    type: 'Birth'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Employee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth | null> | prisma.Birth | null
  }
  contact: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Employee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  name: {
    type: 'Name'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Employee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  profile: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Employee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
}
  

// Types for EmployeeConnection

type EmployeeConnectionObject =
  | EmployeeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmployeeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmployeeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmployeeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeEdge[]> | prisma.EmployeeEdge[]
  }
  aggregate: {
    type: 'AggregateEmployee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmployee> | prisma.AggregateEmployee
  }
}
  

// Types for EmployeeEdge

type EmployeeEdgeObject =
  | EmployeeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmployeeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmployeeEdgeFieldDetails {
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmployee

type AggregateEmployeeObject =
  | AggregateEmployeeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmployeeFields =
  | 'count'



  

export interface AggregateEmployeeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MediaConnection

type MediaConnectionObject =
  | MediaConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MediaConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MediaConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MediaEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaEdge[]> | prisma.MediaEdge[]
  }
  aggregate: {
    type: 'AggregateMedia'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMedia> | prisma.AggregateMedia
  }
}
  

// Types for MediaEdge

type MediaEdgeObject =
  | MediaEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MediaEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MediaEdgeFieldDetails {
  node: {
    type: 'Media'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media> | prisma.Media
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMedia

type AggregateMediaObject =
  | AggregateMediaFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMediaFields =
  | 'count'



  

export interface AggregateMediaFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'description'
  | 'imageUrl'



  

export interface PostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SizeType

type SizeTypeObject =
  | SizeTypeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'xs', args?: [] | false, alias?: string  } 
  | { name: 'sm', args?: [] | false, alias?: string  } 
  | { name: 'md', args?: [] | false, alias?: string  } 
  | { name: 'lg', args?: [] | false, alias?: string  } 
  | { name: 'xl', args?: [] | false, alias?: string  } 

type SizeTypeFields =
  | 'id'
  | 'xs'
  | 'sm'
  | 'md'
  | 'lg'
  | 'xl'



  

export interface SizeTypeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xs: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sm: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  md: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lg: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  xl: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for SizeTypeConnection

type SizeTypeConnectionObject =
  | SizeTypeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SizeTypeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SizeTypeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SizeTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SizeTypeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SizeTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeTypeEdge[]> | prisma.SizeTypeEdge[]
  }
  aggregate: {
    type: 'AggregateSizeType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SizeTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSizeType> | prisma.AggregateSizeType
  }
}
  

// Types for SizeTypeEdge

type SizeTypeEdgeObject =
  | SizeTypeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SizeTypeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SizeTypeEdgeFieldDetails {
  node: {
    type: 'SizeType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SizeTypeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType> | prisma.SizeType
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSizeType

type AggregateSizeTypeObject =
  | AggregateSizeTypeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSizeTypeFields =
  | 'count'



  

export interface AggregateSizeTypeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MetaType

type MetaTypeObject =
  | MetaTypeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'featured', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 

type MetaTypeFields =
  | 'id'
  | 'featured'
  | 'size'



  

export interface MetaTypeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  featured: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  size: {
    type: 'SizeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MetaType">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType | null> | prisma.SizeType | null
  }
}
  

// Types for MetaTypeConnection

type MetaTypeConnectionObject =
  | MetaTypeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MetaTypeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MetaTypeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MetaTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MetaTypeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MetaTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaTypeEdge[]> | prisma.MetaTypeEdge[]
  }
  aggregate: {
    type: 'AggregateMetaType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MetaTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMetaType> | prisma.AggregateMetaType
  }
}
  

// Types for MetaTypeEdge

type MetaTypeEdgeObject =
  | MetaTypeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MetaTypeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MetaTypeEdgeFieldDetails {
  node: {
    type: 'MetaType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MetaTypeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType> | prisma.MetaType
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMetaType

type AggregateMetaTypeObject =
  | AggregateMetaTypeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMetaTypeFields =
  | 'count'



  

export interface AggregateMetaTypeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Insight

type InsightObject =
  | InsightFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publishedAt', args?: [] | false, alias?: string  } 
  | { name: 'authorId', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'media', args?: [] | false, alias?: string  } 
  | { name: 'meta', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type InsightFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publishedAt'
  | 'authorId'
  | 'category'
  | 'content'
  | 'desc'
  | 'media'
  | 'meta'
  | 'title'



  

export interface InsightFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publishedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  authorId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  media: {
    type: 'Media'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Insight">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  meta: {
    type: 'MetaType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Insight">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType | null> | prisma.MetaType | null
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InsightConnection

type InsightConnectionObject =
  | InsightConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InsightConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InsightConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InsightConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InsightEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InsightConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InsightEdge[]> | prisma.InsightEdge[]
  }
  aggregate: {
    type: 'AggregateInsight'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InsightConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInsight> | prisma.AggregateInsight
  }
}
  

// Types for InsightEdge

type InsightEdgeObject =
  | InsightEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InsightEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InsightEdgeFieldDetails {
  node: {
    type: 'Insight'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InsightEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight> | prisma.Insight
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInsight

type AggregateInsightObject =
  | AggregateInsightFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInsightFields =
  | 'count'



  

export interface AggregateInsightFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Policy

type PolicyObject =
  | PolicyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publishedAt', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type PolicyFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publishedAt'
  | 'content'
  | 'title'



  

export interface PolicyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  publishedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PolicyConnection

type PolicyConnectionObject =
  | PolicyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PolicyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PolicyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PolicyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PolicyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PolicyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PolicyEdge[]> | prisma.PolicyEdge[]
  }
  aggregate: {
    type: 'AggregatePolicy'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PolicyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePolicy> | prisma.AggregatePolicy
  }
}
  

// Types for PolicyEdge

type PolicyEdgeObject =
  | PolicyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PolicyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PolicyEdgeFieldDetails {
  node: {
    type: 'Policy'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PolicyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy> | prisma.Policy
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePolicy

type AggregatePolicyObject =
  | AggregatePolicyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePolicyFields =
  | 'count'



  

export interface AggregatePolicyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createName', args?: MutationCreateNameArgs[] | false, alias?: string  } 
  | { name: 'updateName', args?: MutationUpdateNameArgs[] | false, alias?: string  } 
  | { name: 'updateManyNames', args?: MutationUpdateManyNamesArgs[] | false, alias?: string  } 
  | { name: 'upsertName', args?: MutationUpsertNameArgs[] | false, alias?: string  } 
  | { name: 'deleteName', args?: MutationDeleteNameArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNames', args?: MutationDeleteManyNamesArgs[] | false, alias?: string  } 
  | { name: 'createBirth', args?: MutationCreateBirthArgs[] | false, alias?: string  } 
  | { name: 'updateBirth', args?: MutationUpdateBirthArgs[] | false, alias?: string  } 
  | { name: 'updateManyBirths', args?: MutationUpdateManyBirthsArgs[] | false, alias?: string  } 
  | { name: 'upsertBirth', args?: MutationUpsertBirthArgs[] | false, alias?: string  } 
  | { name: 'deleteBirth', args?: MutationDeleteBirthArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBirths', args?: MutationDeleteManyBirthsArgs[] | false, alias?: string  } 
  | { name: 'createContact', args?: MutationCreateContactArgs[] | false, alias?: string  } 
  | { name: 'updateContact', args?: MutationUpdateContactArgs[] | false, alias?: string  } 
  | { name: 'updateManyContacts', args?: MutationUpdateManyContactsArgs[] | false, alias?: string  } 
  | { name: 'upsertContact', args?: MutationUpsertContactArgs[] | false, alias?: string  } 
  | { name: 'deleteContact', args?: MutationDeleteContactArgs[] | false, alias?: string  } 
  | { name: 'deleteManyContacts', args?: MutationDeleteManyContactsArgs[] | false, alias?: string  } 
  | { name: 'createProfile', args?: MutationCreateProfileArgs[] | false, alias?: string  } 
  | { name: 'updateProfile', args?: MutationUpdateProfileArgs[] | false, alias?: string  } 
  | { name: 'updateManyProfiles', args?: MutationUpdateManyProfilesArgs[] | false, alias?: string  } 
  | { name: 'upsertProfile', args?: MutationUpsertProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteProfile', args?: MutationDeleteProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProfiles', args?: MutationDeleteManyProfilesArgs[] | false, alias?: string  } 
  | { name: 'createEmployee', args?: MutationCreateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateEmployee', args?: MutationUpdateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'upsertEmployee', args?: MutationUpsertEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteEmployee', args?: MutationDeleteEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmployees', args?: MutationDeleteManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'createMedia', args?: MutationCreateMediaArgs[] | false, alias?: string  } 
  | { name: 'updateMedia', args?: MutationUpdateMediaArgs[] | false, alias?: string  } 
  | { name: 'updateManyMedias', args?: MutationUpdateManyMediasArgs[] | false, alias?: string  } 
  | { name: 'upsertMedia', args?: MutationUpsertMediaArgs[] | false, alias?: string  } 
  | { name: 'deleteMedia', args?: MutationDeleteMediaArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMedias', args?: MutationDeleteManyMediasArgs[] | false, alias?: string  } 
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createSizeType', args?: MutationCreateSizeTypeArgs[] | false, alias?: string  } 
  | { name: 'updateSizeType', args?: MutationUpdateSizeTypeArgs[] | false, alias?: string  } 
  | { name: 'updateManySizeTypes', args?: MutationUpdateManySizeTypesArgs[] | false, alias?: string  } 
  | { name: 'upsertSizeType', args?: MutationUpsertSizeTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteSizeType', args?: MutationDeleteSizeTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteManySizeTypes', args?: MutationDeleteManySizeTypesArgs[] | false, alias?: string  } 
  | { name: 'createMetaType', args?: MutationCreateMetaTypeArgs[] | false, alias?: string  } 
  | { name: 'updateMetaType', args?: MutationUpdateMetaTypeArgs[] | false, alias?: string  } 
  | { name: 'updateManyMetaTypes', args?: MutationUpdateManyMetaTypesArgs[] | false, alias?: string  } 
  | { name: 'upsertMetaType', args?: MutationUpsertMetaTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteMetaType', args?: MutationDeleteMetaTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMetaTypes', args?: MutationDeleteManyMetaTypesArgs[] | false, alias?: string  } 
  | { name: 'createInsight', args?: MutationCreateInsightArgs[] | false, alias?: string  } 
  | { name: 'updateInsight', args?: MutationUpdateInsightArgs[] | false, alias?: string  } 
  | { name: 'updateManyInsights', args?: MutationUpdateManyInsightsArgs[] | false, alias?: string  } 
  | { name: 'upsertInsight', args?: MutationUpsertInsightArgs[] | false, alias?: string  } 
  | { name: 'deleteInsight', args?: MutationDeleteInsightArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInsights', args?: MutationDeleteManyInsightsArgs[] | false, alias?: string  } 
  | { name: 'createPolicy', args?: MutationCreatePolicyArgs[] | false, alias?: string  } 
  | { name: 'updatePolicy', args?: MutationUpdatePolicyArgs[] | false, alias?: string  } 
  | { name: 'updateManyPolicies', args?: MutationUpdateManyPoliciesArgs[] | false, alias?: string  } 
  | { name: 'upsertPolicy', args?: MutationUpsertPolicyArgs[] | false, alias?: string  } 
  | { name: 'deletePolicy', args?: MutationDeletePolicyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPolicies', args?: MutationDeleteManyPoliciesArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createName'
  | 'updateName'
  | 'updateManyNames'
  | 'upsertName'
  | 'deleteName'
  | 'deleteManyNames'
  | 'createBirth'
  | 'updateBirth'
  | 'updateManyBirths'
  | 'upsertBirth'
  | 'deleteBirth'
  | 'deleteManyBirths'
  | 'createContact'
  | 'updateContact'
  | 'updateManyContacts'
  | 'upsertContact'
  | 'deleteContact'
  | 'deleteManyContacts'
  | 'createProfile'
  | 'updateProfile'
  | 'updateManyProfiles'
  | 'upsertProfile'
  | 'deleteProfile'
  | 'deleteManyProfiles'
  | 'createEmployee'
  | 'updateEmployee'
  | 'upsertEmployee'
  | 'deleteEmployee'
  | 'deleteManyEmployees'
  | 'createMedia'
  | 'updateMedia'
  | 'updateManyMedias'
  | 'upsertMedia'
  | 'deleteMedia'
  | 'deleteManyMedias'
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createSizeType'
  | 'updateSizeType'
  | 'updateManySizeTypes'
  | 'upsertSizeType'
  | 'deleteSizeType'
  | 'deleteManySizeTypes'
  | 'createMetaType'
  | 'updateMetaType'
  | 'updateManyMetaTypes'
  | 'upsertMetaType'
  | 'deleteMetaType'
  | 'deleteManyMetaTypes'
  | 'createInsight'
  | 'updateInsight'
  | 'updateManyInsights'
  | 'upsertInsight'
  | 'deleteInsight'
  | 'deleteManyInsights'
  | 'createPolicy'
  | 'updatePolicy'
  | 'updateManyPolicies'
  | 'upsertPolicy'
  | 'deletePolicy'
  | 'deleteManyPolicies'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'


type MutationCreateNameArgs =
  | 'data'
type MutationUpdateNameArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNamesArgs =
  | 'data'
  | 'where'
type MutationUpsertNameArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNameArgs =
  | 'where'
type MutationDeleteManyNamesArgs =
  | 'where'
type MutationCreateBirthArgs =
  | 'data'
type MutationUpdateBirthArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBirthsArgs =
  | 'data'
  | 'where'
type MutationUpsertBirthArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBirthArgs =
  | 'where'
type MutationDeleteManyBirthsArgs =
  | 'where'
type MutationCreateContactArgs =
  | 'data'
type MutationUpdateContactArgs =
  | 'data'
  | 'where'
type MutationUpdateManyContactsArgs =
  | 'data'
  | 'where'
type MutationUpsertContactArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteContactArgs =
  | 'where'
type MutationDeleteManyContactsArgs =
  | 'where'
type MutationCreateProfileArgs =
  | 'data'
type MutationUpdateProfileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProfilesArgs =
  | 'data'
  | 'where'
type MutationUpsertProfileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProfileArgs =
  | 'where'
type MutationDeleteManyProfilesArgs =
  | 'where'
type MutationCreateEmployeeArgs =
  | 'data'
type MutationUpdateEmployeeArgs =
  | 'data'
  | 'where'
type MutationUpsertEmployeeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmployeeArgs =
  | 'where'
type MutationDeleteManyEmployeesArgs =
  | 'where'
type MutationCreateMediaArgs =
  | 'data'
type MutationUpdateMediaArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMediasArgs =
  | 'data'
  | 'where'
type MutationUpsertMediaArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMediaArgs =
  | 'where'
type MutationDeleteManyMediasArgs =
  | 'where'
type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreateSizeTypeArgs =
  | 'data'
type MutationUpdateSizeTypeArgs =
  | 'data'
  | 'where'
type MutationUpdateManySizeTypesArgs =
  | 'data'
  | 'where'
type MutationUpsertSizeTypeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSizeTypeArgs =
  | 'where'
type MutationDeleteManySizeTypesArgs =
  | 'where'
type MutationCreateMetaTypeArgs =
  | 'data'
type MutationUpdateMetaTypeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMetaTypesArgs =
  | 'data'
  | 'where'
type MutationUpsertMetaTypeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMetaTypeArgs =
  | 'where'
type MutationDeleteManyMetaTypesArgs =
  | 'where'
type MutationCreateInsightArgs =
  | 'data'
type MutationUpdateInsightArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInsightsArgs =
  | 'data'
  | 'where'
type MutationUpsertInsightArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInsightArgs =
  | 'where'
type MutationDeleteManyInsightsArgs =
  | 'where'
type MutationCreatePolicyArgs =
  | 'data'
type MutationUpdatePolicyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPoliciesArgs =
  | 'data'
  | 'where'
type MutationUpsertPolicyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePolicyArgs =
  | 'where'
type MutationDeleteManyPoliciesArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createName: {
    type: 'Name'
    args: Record<MutationCreateNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NameCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  updateName: {
    type: 'Name'
    args: Record<MutationUpdateNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NameUpdateInput, where: NameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  updateManyNames: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NameUpdateManyMutationInput, where?: NameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertName: {
    type: 'Name'
    args: Record<MutationUpsertNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NameWhereUniqueInput, create: NameCreateInput, update: NameUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  deleteName: {
    type: 'Name'
    args: Record<MutationDeleteNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  deleteManyNames: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBirth: {
    type: 'Birth'
    args: Record<MutationCreateBirthArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BirthCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth> | prisma.Birth
  }
  updateBirth: {
    type: 'Birth'
    args: Record<MutationUpdateBirthArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BirthUpdateInput, where: BirthWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth | null> | prisma.Birth | null
  }
  updateManyBirths: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBirthsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BirthUpdateManyMutationInput, where?: BirthWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBirth: {
    type: 'Birth'
    args: Record<MutationUpsertBirthArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BirthWhereUniqueInput, create: BirthCreateInput, update: BirthUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth> | prisma.Birth
  }
  deleteBirth: {
    type: 'Birth'
    args: Record<MutationDeleteBirthArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BirthWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth | null> | prisma.Birth | null
  }
  deleteManyBirths: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBirthsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BirthWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createContact: {
    type: 'Contact'
    args: Record<MutationCreateContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  updateContact: {
    type: 'Contact'
    args: Record<MutationUpdateContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactUpdateInput, where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  updateManyContacts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactUpdateManyMutationInput, where?: ContactWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertContact: {
    type: 'Contact'
    args: Record<MutationUpsertContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactWhereUniqueInput, create: ContactCreateInput, update: ContactUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  deleteContact: {
    type: 'Contact'
    args: Record<MutationDeleteContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  deleteManyContacts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ContactWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProfile: {
    type: 'Profile'
    args: Record<MutationCreateProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProfileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile> | prisma.Profile
  }
  updateProfile: {
    type: 'Profile'
    args: Record<MutationUpdateProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProfileUpdateInput, where: ProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  updateManyProfiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProfileUpdateManyMutationInput, where?: ProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProfile: {
    type: 'Profile'
    args: Record<MutationUpsertProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProfileWhereUniqueInput, create: ProfileCreateInput, update: ProfileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile> | prisma.Profile
  }
  deleteProfile: {
    type: 'Profile'
    args: Record<MutationDeleteProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  deleteManyProfiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEmployee: {
    type: 'Employee'
    args: Record<MutationCreateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  updateEmployee: {
    type: 'Employee'
    args: Record<MutationUpdateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateInput, where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  upsertEmployee: {
    type: 'Employee'
    args: Record<MutationUpsertEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput, create: EmployeeCreateInput, update: EmployeeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  deleteEmployee: {
    type: 'Employee'
    args: Record<MutationDeleteEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  deleteManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMedia: {
    type: 'Media'
    args: Record<MutationCreateMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media> | prisma.Media
  }
  updateMedia: {
    type: 'Media'
    args: Record<MutationUpdateMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaUpdateInput, where: MediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  updateManyMedias: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMediasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaUpdateManyMutationInput, where?: MediaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMedia: {
    type: 'Media'
    args: Record<MutationUpsertMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MediaWhereUniqueInput, create: MediaCreateInput, update: MediaUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media> | prisma.Media
  }
  deleteMedia: {
    type: 'Media'
    args: Record<MutationDeleteMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MediaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  deleteManyMedias: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMediasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MediaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSizeType: {
    type: 'SizeType'
    args: Record<MutationCreateSizeTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SizeTypeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType> | prisma.SizeType
  }
  updateSizeType: {
    type: 'SizeType'
    args: Record<MutationUpdateSizeTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SizeTypeUpdateInput, where: SizeTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType | null> | prisma.SizeType | null
  }
  updateManySizeTypes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySizeTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SizeTypeUpdateManyMutationInput, where?: SizeTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSizeType: {
    type: 'SizeType'
    args: Record<MutationUpsertSizeTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SizeTypeWhereUniqueInput, create: SizeTypeCreateInput, update: SizeTypeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType> | prisma.SizeType
  }
  deleteSizeType: {
    type: 'SizeType'
    args: Record<MutationDeleteSizeTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SizeTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType | null> | prisma.SizeType | null
  }
  deleteManySizeTypes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySizeTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SizeTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMetaType: {
    type: 'MetaType'
    args: Record<MutationCreateMetaTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MetaTypeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType> | prisma.MetaType
  }
  updateMetaType: {
    type: 'MetaType'
    args: Record<MutationUpdateMetaTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MetaTypeUpdateInput, where: MetaTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType | null> | prisma.MetaType | null
  }
  updateManyMetaTypes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMetaTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MetaTypeUpdateManyMutationInput, where?: MetaTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMetaType: {
    type: 'MetaType'
    args: Record<MutationUpsertMetaTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MetaTypeWhereUniqueInput, create: MetaTypeCreateInput, update: MetaTypeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType> | prisma.MetaType
  }
  deleteMetaType: {
    type: 'MetaType'
    args: Record<MutationDeleteMetaTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MetaTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType | null> | prisma.MetaType | null
  }
  deleteManyMetaTypes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMetaTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MetaTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInsight: {
    type: 'Insight'
    args: Record<MutationCreateInsightArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InsightCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight> | prisma.Insight
  }
  updateInsight: {
    type: 'Insight'
    args: Record<MutationUpdateInsightArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InsightUpdateInput, where: InsightWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight | null> | prisma.Insight | null
  }
  updateManyInsights: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInsightsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InsightUpdateManyMutationInput, where?: InsightWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInsight: {
    type: 'Insight'
    args: Record<MutationUpsertInsightArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InsightWhereUniqueInput, create: InsightCreateInput, update: InsightUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight> | prisma.Insight
  }
  deleteInsight: {
    type: 'Insight'
    args: Record<MutationDeleteInsightArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InsightWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight | null> | prisma.Insight | null
  }
  deleteManyInsights: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInsightsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InsightWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPolicy: {
    type: 'Policy'
    args: Record<MutationCreatePolicyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PolicyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy> | prisma.Policy
  }
  updatePolicy: {
    type: 'Policy'
    args: Record<MutationUpdatePolicyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PolicyUpdateInput, where: PolicyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy | null> | prisma.Policy | null
  }
  updateManyPolicies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPoliciesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PolicyUpdateManyMutationInput, where?: PolicyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPolicy: {
    type: 'Policy'
    args: Record<MutationUpsertPolicyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PolicyWhereUniqueInput, create: PolicyCreateInput, update: PolicyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy> | prisma.Policy
  }
  deletePolicy: {
    type: 'Policy'
    args: Record<MutationDeletePolicyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PolicyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy | null> | prisma.Policy | null
  }
  deleteManyPolicies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPoliciesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PolicyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'name', args?: SubscriptionNameArgs[] | false, alias?: string  } 
  | { name: 'birth', args?: SubscriptionBirthArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: SubscriptionContactArgs[] | false, alias?: string  } 
  | { name: 'profile', args?: SubscriptionProfileArgs[] | false, alias?: string  } 
  | { name: 'employee', args?: SubscriptionEmployeeArgs[] | false, alias?: string  } 
  | { name: 'media', args?: SubscriptionMediaArgs[] | false, alias?: string  } 
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'sizeType', args?: SubscriptionSizeTypeArgs[] | false, alias?: string  } 
  | { name: 'metaType', args?: SubscriptionMetaTypeArgs[] | false, alias?: string  } 
  | { name: 'insight', args?: SubscriptionInsightArgs[] | false, alias?: string  } 
  | { name: 'policy', args?: SubscriptionPolicyArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'name'
  | 'birth'
  | 'contact'
  | 'profile'
  | 'employee'
  | 'media'
  | 'post'
  | 'sizeType'
  | 'metaType'
  | 'insight'
  | 'policy'
  | 'user'


type SubscriptionNameArgs =
  | 'where'
type SubscriptionBirthArgs =
  | 'where'
type SubscriptionContactArgs =
  | 'where'
type SubscriptionProfileArgs =
  | 'where'
type SubscriptionEmployeeArgs =
  | 'where'
type SubscriptionMediaArgs =
  | 'where'
type SubscriptionPostArgs =
  | 'where'
type SubscriptionSizeTypeArgs =
  | 'where'
type SubscriptionMetaTypeArgs =
  | 'where'
type SubscriptionInsightArgs =
  | 'where'
type SubscriptionPolicyArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  name: {
    type: 'NameSubscriptionPayload'
    args: Record<SubscriptionNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NameSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NameSubscriptionPayload | null> | prisma.NameSubscriptionPayload | null
  }
  birth: {
    type: 'BirthSubscriptionPayload'
    args: Record<SubscriptionBirthArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BirthSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BirthSubscriptionPayload | null> | prisma.BirthSubscriptionPayload | null
  }
  contact: {
    type: 'ContactSubscriptionPayload'
    args: Record<SubscriptionContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ContactSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactSubscriptionPayload | null> | prisma.ContactSubscriptionPayload | null
  }
  profile: {
    type: 'ProfileSubscriptionPayload'
    args: Record<SubscriptionProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProfileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfileSubscriptionPayload | null> | prisma.ProfileSubscriptionPayload | null
  }
  employee: {
    type: 'EmployeeSubscriptionPayload'
    args: Record<SubscriptionEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmployeeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeSubscriptionPayload | null> | prisma.EmployeeSubscriptionPayload | null
  }
  media: {
    type: 'MediaSubscriptionPayload'
    args: Record<SubscriptionMediaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MediaSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaSubscriptionPayload | null> | prisma.MediaSubscriptionPayload | null
  }
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  sizeType: {
    type: 'SizeTypeSubscriptionPayload'
    args: Record<SubscriptionSizeTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SizeTypeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeTypeSubscriptionPayload | null> | prisma.SizeTypeSubscriptionPayload | null
  }
  metaType: {
    type: 'MetaTypeSubscriptionPayload'
    args: Record<SubscriptionMetaTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MetaTypeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaTypeSubscriptionPayload | null> | prisma.MetaTypeSubscriptionPayload | null
  }
  insight: {
    type: 'InsightSubscriptionPayload'
    args: Record<SubscriptionInsightArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InsightSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InsightSubscriptionPayload | null> | prisma.InsightSubscriptionPayload | null
  }
  policy: {
    type: 'PolicySubscriptionPayload'
    args: Record<SubscriptionPolicyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PolicySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PolicySubscriptionPayload | null> | prisma.PolicySubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
}
  

// Types for NameSubscriptionPayload

type NameSubscriptionPayloadObject =
  | NameSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NameSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NameSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Name'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NamePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NamePreviousValues | null> | prisma.NamePreviousValues | null
  }
}
  

// Types for NamePreviousValues

type NamePreviousValuesObject =
  | NamePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'first', args?: [] | false, alias?: string  } 
  | { name: 'middle', args?: [] | false, alias?: string  } 
  | { name: 'last', args?: [] | false, alias?: string  } 
  | { name: 'preferred', args?: [] | false, alias?: string  } 

type NamePreviousValuesFields =
  | 'id'
  | 'first'
  | 'middle'
  | 'last'
  | 'preferred'



  

export interface NamePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  first: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  last: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  preferred: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for BirthSubscriptionPayload

type BirthSubscriptionPayloadObject =
  | BirthSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BirthSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BirthSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BirthSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Birth'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BirthSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Birth | null> | prisma.Birth | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BirthPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BirthSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BirthPreviousValues | null> | prisma.BirthPreviousValues | null
  }
}
  

// Types for BirthPreviousValues

type BirthPreviousValuesObject =
  | BirthPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 

type BirthPreviousValuesFields =
  | 'id'
  | 'address'
  | 'city'
  | 'date'
  | 'state'



  

export interface BirthPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ContactSubscriptionPayload

type ContactSubscriptionPayloadObject =
  | ContactSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ContactSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ContactSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ContactPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactPreviousValues | null> | prisma.ContactPreviousValues | null
  }
}
  

// Types for ContactPreviousValues

type ContactPreviousValuesObject =
  | ContactPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 

type ContactPreviousValuesFields =
  | 'id'
  | 'address'
  | 'city'
  | 'phone'
  | 'state'



  

export interface ContactPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProfileSubscriptionPayload

type ProfileSubscriptionPayloadObject =
  | ProfileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProfileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProfileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProfilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfilePreviousValues | null> | prisma.ProfilePreviousValues | null
  }
}
  

// Types for ProfilePreviousValues

type ProfilePreviousValuesObject =
  | ProfilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'bio', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type ProfilePreviousValuesFields =
  | 'id'
  | 'bio'
  | 'level'
  | 'title'



  

export interface ProfilePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  bio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EmployeeSubscriptionPayload

type EmployeeSubscriptionPayloadObject =
  | EmployeeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmployeeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmployeeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmployeePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeePreviousValues | null> | prisma.EmployeePreviousValues | null
  }
}
  

// Types for EmployeePreviousValues

type EmployeePreviousValuesObject =
  | EmployeePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type EmployeePreviousValuesFields =
  | 'id'



  

export interface EmployeePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MediaSubscriptionPayload

type MediaSubscriptionPayloadObject =
  | MediaSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MediaSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MediaSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Media'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Media | null> | prisma.Media | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MediaPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaPreviousValues | null> | prisma.MediaPreviousValues | null
  }
}
  

// Types for MediaPreviousValues

type MediaPreviousValuesObject =
  | MediaPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'height', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type MediaPreviousValuesFields =
  | 'id'
  | 'height'
  | 'source'
  | 'type'



  

export interface MediaPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  height: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  source: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'MediaType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaType> | prisma.MediaType
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'description'
  | 'imageUrl'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SizeTypeSubscriptionPayload

type SizeTypeSubscriptionPayloadObject =
  | SizeTypeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SizeTypeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SizeTypeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SizeTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SizeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SizeTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeType | null> | prisma.SizeType | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SizeTypePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SizeTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SizeTypePreviousValues | null> | prisma.SizeTypePreviousValues | null
  }
}
  

// Types for SizeTypePreviousValues

type SizeTypePreviousValuesObject =
  | SizeTypePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'xs', args?: [] | false, alias?: string  } 
  | { name: 'sm', args?: [] | false, alias?: string  } 
  | { name: 'md', args?: [] | false, alias?: string  } 
  | { name: 'lg', args?: [] | false, alias?: string  } 
  | { name: 'xl', args?: [] | false, alias?: string  } 

type SizeTypePreviousValuesFields =
  | 'id'
  | 'xs'
  | 'sm'
  | 'md'
  | 'lg'
  | 'xl'



  

export interface SizeTypePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xs: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sm: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  md: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lg: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  xl: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for MetaTypeSubscriptionPayload

type MetaTypeSubscriptionPayloadObject =
  | MetaTypeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MetaTypeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MetaTypeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MetaTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MetaType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MetaTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaType | null> | prisma.MetaType | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MetaTypePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MetaTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MetaTypePreviousValues | null> | prisma.MetaTypePreviousValues | null
  }
}
  

// Types for MetaTypePreviousValues

type MetaTypePreviousValuesObject =
  | MetaTypePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'featured', args?: [] | false, alias?: string  } 

type MetaTypePreviousValuesFields =
  | 'id'
  | 'featured'



  

export interface MetaTypePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  featured: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for InsightSubscriptionPayload

type InsightSubscriptionPayloadObject =
  | InsightSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InsightSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InsightSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InsightSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Insight'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InsightSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Insight | null> | prisma.Insight | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InsightPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InsightSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InsightPreviousValues | null> | prisma.InsightPreviousValues | null
  }
}
  

// Types for InsightPreviousValues

type InsightPreviousValuesObject =
  | InsightPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publishedAt', args?: [] | false, alias?: string  } 
  | { name: 'authorId', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type InsightPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publishedAt'
  | 'authorId'
  | 'category'
  | 'content'
  | 'desc'
  | 'title'



  

export interface InsightPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publishedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  authorId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PolicySubscriptionPayload

type PolicySubscriptionPayloadObject =
  | PolicySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PolicySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PolicySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PolicySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Policy'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PolicySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Policy | null> | prisma.Policy | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PolicyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PolicySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PolicyPreviousValues | null> | prisma.PolicyPreviousValues | null
  }
}
  

// Types for PolicyPreviousValues

type PolicyPreviousValuesObject =
  | PolicyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publishedAt', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type PolicyPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publishedAt'
  | 'content'
  | 'title'



  

export interface PolicyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  publishedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface NameWhereUniqueInput {
  id?: string | null
}
export type NameWhereUniqueInputInputObject =
  | Extract<keyof NameWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface NameWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  first?: string | null
  first_not?: string | null
  first_in?: string[]
  first_not_in?: string[]
  first_lt?: string | null
  first_lte?: string | null
  first_gt?: string | null
  first_gte?: string | null
  first_contains?: string | null
  first_not_contains?: string | null
  first_starts_with?: string | null
  first_not_starts_with?: string | null
  first_ends_with?: string | null
  first_not_ends_with?: string | null
  middle?: string | null
  middle_not?: string | null
  middle_in?: string[]
  middle_not_in?: string[]
  middle_lt?: string | null
  middle_lte?: string | null
  middle_gt?: string | null
  middle_gte?: string | null
  middle_contains?: string | null
  middle_not_contains?: string | null
  middle_starts_with?: string | null
  middle_not_starts_with?: string | null
  middle_ends_with?: string | null
  middle_not_ends_with?: string | null
  last?: string | null
  last_not?: string | null
  last_in?: string[]
  last_not_in?: string[]
  last_lt?: string | null
  last_lte?: string | null
  last_gt?: string | null
  last_gte?: string | null
  last_contains?: string | null
  last_not_contains?: string | null
  last_starts_with?: string | null
  last_not_starts_with?: string | null
  last_ends_with?: string | null
  last_not_ends_with?: string | null
  preferred?: string | null
  preferred_not?: string | null
  preferred_in?: string[]
  preferred_not_in?: string[]
  preferred_lt?: string | null
  preferred_lte?: string | null
  preferred_gt?: string | null
  preferred_gte?: string | null
  preferred_contains?: string | null
  preferred_not_contains?: string | null
  preferred_starts_with?: string | null
  preferred_not_starts_with?: string | null
  preferred_ends_with?: string | null
  preferred_not_ends_with?: string | null
  AND?: NameWhereInput[]
  OR?: NameWhereInput[]
  NOT?: NameWhereInput[]
}
export type NameWhereInputInputObject =
  | Extract<keyof NameWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'first', alias?: string  } 
  | { name: 'first_not', alias?: string  } 
  | { name: 'first_in', alias?: string  } 
  | { name: 'first_not_in', alias?: string  } 
  | { name: 'first_lt', alias?: string  } 
  | { name: 'first_lte', alias?: string  } 
  | { name: 'first_gt', alias?: string  } 
  | { name: 'first_gte', alias?: string  } 
  | { name: 'first_contains', alias?: string  } 
  | { name: 'first_not_contains', alias?: string  } 
  | { name: 'first_starts_with', alias?: string  } 
  | { name: 'first_not_starts_with', alias?: string  } 
  | { name: 'first_ends_with', alias?: string  } 
  | { name: 'first_not_ends_with', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'middle_not', alias?: string  } 
  | { name: 'middle_in', alias?: string  } 
  | { name: 'middle_not_in', alias?: string  } 
  | { name: 'middle_lt', alias?: string  } 
  | { name: 'middle_lte', alias?: string  } 
  | { name: 'middle_gt', alias?: string  } 
  | { name: 'middle_gte', alias?: string  } 
  | { name: 'middle_contains', alias?: string  } 
  | { name: 'middle_not_contains', alias?: string  } 
  | { name: 'middle_starts_with', alias?: string  } 
  | { name: 'middle_not_starts_with', alias?: string  } 
  | { name: 'middle_ends_with', alias?: string  } 
  | { name: 'middle_not_ends_with', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'last_not', alias?: string  } 
  | { name: 'last_in', alias?: string  } 
  | { name: 'last_not_in', alias?: string  } 
  | { name: 'last_lt', alias?: string  } 
  | { name: 'last_lte', alias?: string  } 
  | { name: 'last_gt', alias?: string  } 
  | { name: 'last_gte', alias?: string  } 
  | { name: 'last_contains', alias?: string  } 
  | { name: 'last_not_contains', alias?: string  } 
  | { name: 'last_starts_with', alias?: string  } 
  | { name: 'last_not_starts_with', alias?: string  } 
  | { name: 'last_ends_with', alias?: string  } 
  | { name: 'last_not_ends_with', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  | { name: 'preferred_not', alias?: string  } 
  | { name: 'preferred_in', alias?: string  } 
  | { name: 'preferred_not_in', alias?: string  } 
  | { name: 'preferred_lt', alias?: string  } 
  | { name: 'preferred_lte', alias?: string  } 
  | { name: 'preferred_gt', alias?: string  } 
  | { name: 'preferred_gte', alias?: string  } 
  | { name: 'preferred_contains', alias?: string  } 
  | { name: 'preferred_not_contains', alias?: string  } 
  | { name: 'preferred_starts_with', alias?: string  } 
  | { name: 'preferred_not_starts_with', alias?: string  } 
  | { name: 'preferred_ends_with', alias?: string  } 
  | { name: 'preferred_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BirthWhereUniqueInput {
  id?: string | null
}
export type BirthWhereUniqueInputInputObject =
  | Extract<keyof BirthWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BirthWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  AND?: BirthWhereInput[]
  OR?: BirthWhereInput[]
  NOT?: BirthWhereInput[]
}
export type BirthWhereInputInputObject =
  | Extract<keyof BirthWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactWhereUniqueInput {
  id?: string | null
}
export type ContactWhereUniqueInputInputObject =
  | Extract<keyof ContactWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ContactWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  AND?: ContactWhereInput[]
  OR?: ContactWhereInput[]
  NOT?: ContactWhereInput[]
}
export type ContactWhereInputInputObject =
  | Extract<keyof ContactWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProfileWhereUniqueInput {
  id?: string | null
}
export type ProfileWhereUniqueInputInputObject =
  | Extract<keyof ProfileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProfileWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  bio?: string | null
  bio_not?: string | null
  bio_in?: string[]
  bio_not_in?: string[]
  bio_lt?: string | null
  bio_lte?: string | null
  bio_gt?: string | null
  bio_gte?: string | null
  bio_contains?: string | null
  bio_not_contains?: string | null
  bio_starts_with?: string | null
  bio_not_starts_with?: string | null
  bio_ends_with?: string | null
  bio_not_ends_with?: string | null
  level?: number | null
  level_not?: number | null
  level_in?: number[]
  level_not_in?: number[]
  level_lt?: number | null
  level_lte?: number | null
  level_gt?: number | null
  level_gte?: number | null
  media?: MediaWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: ProfileWhereInput[]
  OR?: ProfileWhereInput[]
  NOT?: ProfileWhereInput[]
}
export type ProfileWhereInputInputObject =
  | Extract<keyof ProfileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'bio_not', alias?: string  } 
  | { name: 'bio_in', alias?: string  } 
  | { name: 'bio_not_in', alias?: string  } 
  | { name: 'bio_lt', alias?: string  } 
  | { name: 'bio_lte', alias?: string  } 
  | { name: 'bio_gt', alias?: string  } 
  | { name: 'bio_gte', alias?: string  } 
  | { name: 'bio_contains', alias?: string  } 
  | { name: 'bio_not_contains', alias?: string  } 
  | { name: 'bio_starts_with', alias?: string  } 
  | { name: 'bio_not_starts_with', alias?: string  } 
  | { name: 'bio_ends_with', alias?: string  } 
  | { name: 'bio_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'level_lt', alias?: string  } 
  | { name: 'level_lte', alias?: string  } 
  | { name: 'level_gt', alias?: string  } 
  | { name: 'level_gte', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MediaWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  height?: number | null
  height_not?: number | null
  height_in?: number[]
  height_not_in?: number[]
  height_lt?: number | null
  height_lte?: number | null
  height_gt?: number | null
  height_gte?: number | null
  source?: string | null
  source_not?: string | null
  source_in?: string[]
  source_not_in?: string[]
  source_lt?: string | null
  source_lte?: string | null
  source_gt?: string | null
  source_gte?: string | null
  source_contains?: string | null
  source_not_contains?: string | null
  source_starts_with?: string | null
  source_not_starts_with?: string | null
  source_ends_with?: string | null
  source_not_ends_with?: string | null
  type?: prisma.MediaType | null
  type_not?: prisma.MediaType | null
  type_in?: prisma.MediaType[]
  type_not_in?: prisma.MediaType[]
  AND?: MediaWhereInput[]
  OR?: MediaWhereInput[]
  NOT?: MediaWhereInput[]
}
export type MediaWhereInputInputObject =
  | Extract<keyof MediaWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'height_not', alias?: string  } 
  | { name: 'height_in', alias?: string  } 
  | { name: 'height_not_in', alias?: string  } 
  | { name: 'height_lt', alias?: string  } 
  | { name: 'height_lte', alias?: string  } 
  | { name: 'height_gt', alias?: string  } 
  | { name: 'height_gte', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'source_not', alias?: string  } 
  | { name: 'source_in', alias?: string  } 
  | { name: 'source_not_in', alias?: string  } 
  | { name: 'source_lt', alias?: string  } 
  | { name: 'source_lte', alias?: string  } 
  | { name: 'source_gt', alias?: string  } 
  | { name: 'source_gte', alias?: string  } 
  | { name: 'source_contains', alias?: string  } 
  | { name: 'source_not_contains', alias?: string  } 
  | { name: 'source_starts_with', alias?: string  } 
  | { name: 'source_not_starts_with', alias?: string  } 
  | { name: 'source_ends_with', alias?: string  } 
  | { name: 'source_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeeWhereUniqueInput {
  id?: string | null
}
export type EmployeeWhereUniqueInputInputObject =
  | Extract<keyof EmployeeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EmployeeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  birth?: BirthWhereInput | null
  contact?: ContactWhereInput | null
  name?: NameWhereInput | null
  profile?: ProfileWhereInput | null
  AND?: EmployeeWhereInput[]
  OR?: EmployeeWhereInput[]
  NOT?: EmployeeWhereInput[]
}
export type EmployeeWhereInputInputObject =
  | Extract<keyof EmployeeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'birth', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MediaWhereUniqueInput {
  id?: string | null
}
export type MediaWhereUniqueInputInputObject =
  | Extract<keyof MediaWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostWhereUniqueInput {
  id?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SizeTypeWhereUniqueInput {
  id?: string | null
}
export type SizeTypeWhereUniqueInputInputObject =
  | Extract<keyof SizeTypeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SizeTypeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  xs?: number | null
  xs_not?: number | null
  xs_in?: number[]
  xs_not_in?: number[]
  xs_lt?: number | null
  xs_lte?: number | null
  xs_gt?: number | null
  xs_gte?: number | null
  sm?: number | null
  sm_not?: number | null
  sm_in?: number[]
  sm_not_in?: number[]
  sm_lt?: number | null
  sm_lte?: number | null
  sm_gt?: number | null
  sm_gte?: number | null
  md?: number | null
  md_not?: number | null
  md_in?: number[]
  md_not_in?: number[]
  md_lt?: number | null
  md_lte?: number | null
  md_gt?: number | null
  md_gte?: number | null
  lg?: number | null
  lg_not?: number | null
  lg_in?: number[]
  lg_not_in?: number[]
  lg_lt?: number | null
  lg_lte?: number | null
  lg_gt?: number | null
  lg_gte?: number | null
  xl?: number | null
  xl_not?: number | null
  xl_in?: number[]
  xl_not_in?: number[]
  xl_lt?: number | null
  xl_lte?: number | null
  xl_gt?: number | null
  xl_gte?: number | null
  AND?: SizeTypeWhereInput[]
  OR?: SizeTypeWhereInput[]
  NOT?: SizeTypeWhereInput[]
}
export type SizeTypeWhereInputInputObject =
  | Extract<keyof SizeTypeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'xs', alias?: string  } 
  | { name: 'xs_not', alias?: string  } 
  | { name: 'xs_in', alias?: string  } 
  | { name: 'xs_not_in', alias?: string  } 
  | { name: 'xs_lt', alias?: string  } 
  | { name: 'xs_lte', alias?: string  } 
  | { name: 'xs_gt', alias?: string  } 
  | { name: 'xs_gte', alias?: string  } 
  | { name: 'sm', alias?: string  } 
  | { name: 'sm_not', alias?: string  } 
  | { name: 'sm_in', alias?: string  } 
  | { name: 'sm_not_in', alias?: string  } 
  | { name: 'sm_lt', alias?: string  } 
  | { name: 'sm_lte', alias?: string  } 
  | { name: 'sm_gt', alias?: string  } 
  | { name: 'sm_gte', alias?: string  } 
  | { name: 'md', alias?: string  } 
  | { name: 'md_not', alias?: string  } 
  | { name: 'md_in', alias?: string  } 
  | { name: 'md_not_in', alias?: string  } 
  | { name: 'md_lt', alias?: string  } 
  | { name: 'md_lte', alias?: string  } 
  | { name: 'md_gt', alias?: string  } 
  | { name: 'md_gte', alias?: string  } 
  | { name: 'lg', alias?: string  } 
  | { name: 'lg_not', alias?: string  } 
  | { name: 'lg_in', alias?: string  } 
  | { name: 'lg_not_in', alias?: string  } 
  | { name: 'lg_lt', alias?: string  } 
  | { name: 'lg_lte', alias?: string  } 
  | { name: 'lg_gt', alias?: string  } 
  | { name: 'lg_gte', alias?: string  } 
  | { name: 'xl', alias?: string  } 
  | { name: 'xl_not', alias?: string  } 
  | { name: 'xl_in', alias?: string  } 
  | { name: 'xl_not_in', alias?: string  } 
  | { name: 'xl_lt', alias?: string  } 
  | { name: 'xl_lte', alias?: string  } 
  | { name: 'xl_gt', alias?: string  } 
  | { name: 'xl_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MetaTypeWhereUniqueInput {
  id?: string | null
}
export type MetaTypeWhereUniqueInputInputObject =
  | Extract<keyof MetaTypeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MetaTypeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  featured?: boolean | null
  featured_not?: boolean | null
  size?: SizeTypeWhereInput | null
  AND?: MetaTypeWhereInput[]
  OR?: MetaTypeWhereInput[]
  NOT?: MetaTypeWhereInput[]
}
export type MetaTypeWhereInputInputObject =
  | Extract<keyof MetaTypeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'featured_not', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InsightWhereUniqueInput {
  id?: string | null
}
export type InsightWhereUniqueInputInputObject =
  | Extract<keyof InsightWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InsightWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  publishedAt?: string | null
  publishedAt_not?: string | null
  publishedAt_in?: string[]
  publishedAt_not_in?: string[]
  publishedAt_lt?: string | null
  publishedAt_lte?: string | null
  publishedAt_gt?: string | null
  publishedAt_gte?: string | null
  authorId?: string | null
  authorId_not?: string | null
  authorId_in?: string[]
  authorId_not_in?: string[]
  authorId_lt?: string | null
  authorId_lte?: string | null
  authorId_gt?: string | null
  authorId_gte?: string | null
  authorId_contains?: string | null
  authorId_not_contains?: string | null
  authorId_starts_with?: string | null
  authorId_not_starts_with?: string | null
  authorId_ends_with?: string | null
  authorId_not_ends_with?: string | null
  category?: string | null
  category_not?: string | null
  category_in?: string[]
  category_not_in?: string[]
  category_lt?: string | null
  category_lte?: string | null
  category_gt?: string | null
  category_gte?: string | null
  category_contains?: string | null
  category_not_contains?: string | null
  category_starts_with?: string | null
  category_not_starts_with?: string | null
  category_ends_with?: string | null
  category_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  media?: MediaWhereInput | null
  meta?: MetaTypeWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: InsightWhereInput[]
  OR?: InsightWhereInput[]
  NOT?: InsightWhereInput[]
}
export type InsightWhereInputInputObject =
  | Extract<keyof InsightWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'publishedAt_not', alias?: string  } 
  | { name: 'publishedAt_in', alias?: string  } 
  | { name: 'publishedAt_not_in', alias?: string  } 
  | { name: 'publishedAt_lt', alias?: string  } 
  | { name: 'publishedAt_lte', alias?: string  } 
  | { name: 'publishedAt_gt', alias?: string  } 
  | { name: 'publishedAt_gte', alias?: string  } 
  | { name: 'authorId', alias?: string  } 
  | { name: 'authorId_not', alias?: string  } 
  | { name: 'authorId_in', alias?: string  } 
  | { name: 'authorId_not_in', alias?: string  } 
  | { name: 'authorId_lt', alias?: string  } 
  | { name: 'authorId_lte', alias?: string  } 
  | { name: 'authorId_gt', alias?: string  } 
  | { name: 'authorId_gte', alias?: string  } 
  | { name: 'authorId_contains', alias?: string  } 
  | { name: 'authorId_not_contains', alias?: string  } 
  | { name: 'authorId_starts_with', alias?: string  } 
  | { name: 'authorId_not_starts_with', alias?: string  } 
  | { name: 'authorId_ends_with', alias?: string  } 
  | { name: 'authorId_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'category_lt', alias?: string  } 
  | { name: 'category_lte', alias?: string  } 
  | { name: 'category_gt', alias?: string  } 
  | { name: 'category_gte', alias?: string  } 
  | { name: 'category_contains', alias?: string  } 
  | { name: 'category_not_contains', alias?: string  } 
  | { name: 'category_starts_with', alias?: string  } 
  | { name: 'category_not_starts_with', alias?: string  } 
  | { name: 'category_ends_with', alias?: string  } 
  | { name: 'category_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'meta', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PolicyWhereUniqueInput {
  id?: string | null
}
export type PolicyWhereUniqueInputInputObject =
  | Extract<keyof PolicyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PolicyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  publishedAt?: string | null
  publishedAt_not?: string | null
  publishedAt_in?: string[]
  publishedAt_not_in?: string[]
  publishedAt_lt?: string | null
  publishedAt_lte?: string | null
  publishedAt_gt?: string | null
  publishedAt_gte?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: PolicyWhereInput[]
  OR?: PolicyWhereInput[]
  NOT?: PolicyWhereInput[]
}
export type PolicyWhereInputInputObject =
  | Extract<keyof PolicyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'publishedAt_not', alias?: string  } 
  | { name: 'publishedAt_in', alias?: string  } 
  | { name: 'publishedAt_not_in', alias?: string  } 
  | { name: 'publishedAt_lt', alias?: string  } 
  | { name: 'publishedAt_lte', alias?: string  } 
  | { name: 'publishedAt_gt', alias?: string  } 
  | { name: 'publishedAt_gte', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NameCreateInput {
  id?: string | null
  first?: string
  middle?: string | null
  last?: string
  preferred?: string | null
}
export type NameCreateInputInputObject =
  | Extract<keyof NameCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'first', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  
export interface NameUpdateInput {
  first?: string | null
  middle?: string | null
  last?: string | null
  preferred?: string | null
}
export type NameUpdateInputInputObject =
  | Extract<keyof NameUpdateInput, string>
  | { name: 'first', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  
export interface NameUpdateManyMutationInput {
  first?: string | null
  middle?: string | null
  last?: string | null
  preferred?: string | null
}
export type NameUpdateManyMutationInputInputObject =
  | Extract<keyof NameUpdateManyMutationInput, string>
  | { name: 'first', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  
export interface BirthCreateInput {
  id?: string | null
  address?: string | null
  city?: string | null
  date?: string | null
  state?: string | null
}
export type BirthCreateInputInputObject =
  | Extract<keyof BirthCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface BirthUpdateInput {
  address?: string | null
  city?: string | null
  date?: string | null
  state?: string | null
}
export type BirthUpdateInputInputObject =
  | Extract<keyof BirthUpdateInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface BirthUpdateManyMutationInput {
  address?: string | null
  city?: string | null
  date?: string | null
  state?: string | null
}
export type BirthUpdateManyMutationInputInputObject =
  | Extract<keyof BirthUpdateManyMutationInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface ContactCreateInput {
  id?: string | null
  address?: string | null
  city?: string | null
  phone?: string | null
  state?: string | null
}
export type ContactCreateInputInputObject =
  | Extract<keyof ContactCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface ContactUpdateInput {
  address?: string | null
  city?: string | null
  phone?: string | null
  state?: string | null
}
export type ContactUpdateInputInputObject =
  | Extract<keyof ContactUpdateInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface ContactUpdateManyMutationInput {
  address?: string | null
  city?: string | null
  phone?: string | null
  state?: string | null
}
export type ContactUpdateManyMutationInputInputObject =
  | Extract<keyof ContactUpdateManyMutationInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface ProfileCreateInput {
  id?: string | null
  bio?: string
  level?: number | null
  media?: MediaCreateOneInput | null
  title?: string
}
export type ProfileCreateInputInputObject =
  | Extract<keyof ProfileCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface MediaCreateOneInput {
  create?: MediaCreateInput | null
  connect?: MediaWhereUniqueInput | null
}
export type MediaCreateOneInputInputObject =
  | Extract<keyof MediaCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MediaCreateInput {
  id?: string | null
  height?: number | null
  source?: string
  type?: prisma.MediaType
}
export type MediaCreateInputInputObject =
  | Extract<keyof MediaCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface ProfileUpdateInput {
  bio?: string | null
  level?: number | null
  media?: MediaUpdateOneInput | null
  title?: string | null
}
export type ProfileUpdateInputInputObject =
  | Extract<keyof ProfileUpdateInput, string>
  | { name: 'bio', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface MediaUpdateOneInput {
  create?: MediaCreateInput | null
  update?: MediaUpdateDataInput | null
  upsert?: MediaUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: MediaWhereUniqueInput | null
}
export type MediaUpdateOneInputInputObject =
  | Extract<keyof MediaUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MediaUpdateDataInput {
  height?: number | null
  source?: string | null
  type?: prisma.MediaType | null
}
export type MediaUpdateDataInputInputObject =
  | Extract<keyof MediaUpdateDataInput, string>
  | { name: 'height', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface MediaUpsertNestedInput {
  update?: MediaUpdateDataInput
  create?: MediaCreateInput
}
export type MediaUpsertNestedInputInputObject =
  | Extract<keyof MediaUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProfileUpdateManyMutationInput {
  bio?: string | null
  level?: number | null
  title?: string | null
}
export type ProfileUpdateManyMutationInputInputObject =
  | Extract<keyof ProfileUpdateManyMutationInput, string>
  | { name: 'bio', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface EmployeeCreateInput {
  id?: string | null
  birth?: BirthCreateOneInput | null
  contact?: ContactCreateOneInput | null
  name?: NameCreateOneInput | null
  profile?: ProfileCreateOneInput | null
}
export type EmployeeCreateInputInputObject =
  | Extract<keyof EmployeeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'birth', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  
export interface BirthCreateOneInput {
  create?: BirthCreateInput | null
  connect?: BirthWhereUniqueInput | null
}
export type BirthCreateOneInputInputObject =
  | Extract<keyof BirthCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactCreateOneInput {
  create?: ContactCreateInput | null
  connect?: ContactWhereUniqueInput | null
}
export type ContactCreateOneInputInputObject =
  | Extract<keyof ContactCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NameCreateOneInput {
  create?: NameCreateInput | null
  connect?: NameWhereUniqueInput | null
}
export type NameCreateOneInputInputObject =
  | Extract<keyof NameCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProfileCreateOneInput {
  create?: ProfileCreateInput | null
  connect?: ProfileWhereUniqueInput | null
}
export type ProfileCreateOneInputInputObject =
  | Extract<keyof ProfileCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployeeUpdateInput {
  birth?: BirthUpdateOneInput | null
  contact?: ContactUpdateOneInput | null
  name?: NameUpdateOneInput | null
  profile?: ProfileUpdateOneInput | null
}
export type EmployeeUpdateInputInputObject =
  | Extract<keyof EmployeeUpdateInput, string>
  | { name: 'birth', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  
export interface BirthUpdateOneInput {
  create?: BirthCreateInput | null
  update?: BirthUpdateDataInput | null
  upsert?: BirthUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: BirthWhereUniqueInput | null
}
export type BirthUpdateOneInputInputObject =
  | Extract<keyof BirthUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BirthUpdateDataInput {
  address?: string | null
  city?: string | null
  date?: string | null
  state?: string | null
}
export type BirthUpdateDataInputInputObject =
  | Extract<keyof BirthUpdateDataInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface BirthUpsertNestedInput {
  update?: BirthUpdateDataInput
  create?: BirthCreateInput
}
export type BirthUpsertNestedInputInputObject =
  | Extract<keyof BirthUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ContactUpdateOneInput {
  create?: ContactCreateInput | null
  update?: ContactUpdateDataInput | null
  upsert?: ContactUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContactWhereUniqueInput | null
}
export type ContactUpdateOneInputInputObject =
  | Extract<keyof ContactUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactUpdateDataInput {
  address?: string | null
  city?: string | null
  phone?: string | null
  state?: string | null
}
export type ContactUpdateDataInputInputObject =
  | Extract<keyof ContactUpdateDataInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface ContactUpsertNestedInput {
  update?: ContactUpdateDataInput
  create?: ContactCreateInput
}
export type ContactUpsertNestedInputInputObject =
  | Extract<keyof ContactUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NameUpdateOneInput {
  create?: NameCreateInput | null
  update?: NameUpdateDataInput | null
  upsert?: NameUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: NameWhereUniqueInput | null
}
export type NameUpdateOneInputInputObject =
  | Extract<keyof NameUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NameUpdateDataInput {
  first?: string | null
  middle?: string | null
  last?: string | null
  preferred?: string | null
}
export type NameUpdateDataInputInputObject =
  | Extract<keyof NameUpdateDataInput, string>
  | { name: 'first', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  
export interface NameUpsertNestedInput {
  update?: NameUpdateDataInput
  create?: NameCreateInput
}
export type NameUpsertNestedInputInputObject =
  | Extract<keyof NameUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProfileUpdateOneInput {
  create?: ProfileCreateInput | null
  update?: ProfileUpdateDataInput | null
  upsert?: ProfileUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProfileWhereUniqueInput | null
}
export type ProfileUpdateOneInputInputObject =
  | Extract<keyof ProfileUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProfileUpdateDataInput {
  bio?: string | null
  level?: number | null
  media?: MediaUpdateOneInput | null
  title?: string | null
}
export type ProfileUpdateDataInputInputObject =
  | Extract<keyof ProfileUpdateDataInput, string>
  | { name: 'bio', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface ProfileUpsertNestedInput {
  update?: ProfileUpdateDataInput
  create?: ProfileCreateInput
}
export type ProfileUpsertNestedInputInputObject =
  | Extract<keyof ProfileUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MediaUpdateInput {
  height?: number | null
  source?: string | null
  type?: prisma.MediaType | null
}
export type MediaUpdateInputInputObject =
  | Extract<keyof MediaUpdateInput, string>
  | { name: 'height', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface MediaUpdateManyMutationInput {
  height?: number | null
  source?: string | null
  type?: prisma.MediaType | null
}
export type MediaUpdateManyMutationInputInputObject =
  | Extract<keyof MediaUpdateManyMutationInput, string>
  | { name: 'height', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface PostCreateInput {
  id?: string | null
  description?: string
  imageUrl?: string
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface PostUpdateInput {
  description?: string | null
  imageUrl?: string | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  description?: string | null
  imageUrl?: string | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface SizeTypeCreateInput {
  id?: string | null
  xs?: number | null
  sm?: number | null
  md?: number | null
  lg?: number | null
  xl?: number | null
}
export type SizeTypeCreateInputInputObject =
  | Extract<keyof SizeTypeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'xs', alias?: string  } 
  | { name: 'sm', alias?: string  } 
  | { name: 'md', alias?: string  } 
  | { name: 'lg', alias?: string  } 
  | { name: 'xl', alias?: string  } 
  
export interface SizeTypeUpdateInput {
  xs?: number | null
  sm?: number | null
  md?: number | null
  lg?: number | null
  xl?: number | null
}
export type SizeTypeUpdateInputInputObject =
  | Extract<keyof SizeTypeUpdateInput, string>
  | { name: 'xs', alias?: string  } 
  | { name: 'sm', alias?: string  } 
  | { name: 'md', alias?: string  } 
  | { name: 'lg', alias?: string  } 
  | { name: 'xl', alias?: string  } 
  
export interface SizeTypeUpdateManyMutationInput {
  xs?: number | null
  sm?: number | null
  md?: number | null
  lg?: number | null
  xl?: number | null
}
export type SizeTypeUpdateManyMutationInputInputObject =
  | Extract<keyof SizeTypeUpdateManyMutationInput, string>
  | { name: 'xs', alias?: string  } 
  | { name: 'sm', alias?: string  } 
  | { name: 'md', alias?: string  } 
  | { name: 'lg', alias?: string  } 
  | { name: 'xl', alias?: string  } 
  
export interface MetaTypeCreateInput {
  id?: string | null
  featured?: boolean | null
  size?: SizeTypeCreateOneInput | null
}
export type MetaTypeCreateInputInputObject =
  | Extract<keyof MetaTypeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'size', alias?: string  } 
  
export interface SizeTypeCreateOneInput {
  create?: SizeTypeCreateInput | null
  connect?: SizeTypeWhereUniqueInput | null
}
export type SizeTypeCreateOneInputInputObject =
  | Extract<keyof SizeTypeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MetaTypeUpdateInput {
  featured?: boolean | null
  size?: SizeTypeUpdateOneInput | null
}
export type MetaTypeUpdateInputInputObject =
  | Extract<keyof MetaTypeUpdateInput, string>
  | { name: 'featured', alias?: string  } 
  | { name: 'size', alias?: string  } 
  
export interface SizeTypeUpdateOneInput {
  create?: SizeTypeCreateInput | null
  update?: SizeTypeUpdateDataInput | null
  upsert?: SizeTypeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: SizeTypeWhereUniqueInput | null
}
export type SizeTypeUpdateOneInputInputObject =
  | Extract<keyof SizeTypeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SizeTypeUpdateDataInput {
  xs?: number | null
  sm?: number | null
  md?: number | null
  lg?: number | null
  xl?: number | null
}
export type SizeTypeUpdateDataInputInputObject =
  | Extract<keyof SizeTypeUpdateDataInput, string>
  | { name: 'xs', alias?: string  } 
  | { name: 'sm', alias?: string  } 
  | { name: 'md', alias?: string  } 
  | { name: 'lg', alias?: string  } 
  | { name: 'xl', alias?: string  } 
  
export interface SizeTypeUpsertNestedInput {
  update?: SizeTypeUpdateDataInput
  create?: SizeTypeCreateInput
}
export type SizeTypeUpsertNestedInputInputObject =
  | Extract<keyof SizeTypeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MetaTypeUpdateManyMutationInput {
  featured?: boolean | null
}
export type MetaTypeUpdateManyMutationInputInputObject =
  | Extract<keyof MetaTypeUpdateManyMutationInput, string>
  | { name: 'featured', alias?: string  } 
  
export interface InsightCreateInput {
  id?: string | null
  publishedAt?: string | null
  authorId?: string
  category?: string
  content?: string
  desc?: string
  media?: MediaCreateOneInput | null
  meta?: MetaTypeCreateOneInput | null
  title?: string
}
export type InsightCreateInputInputObject =
  | Extract<keyof InsightCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'authorId', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'meta', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface MetaTypeCreateOneInput {
  create?: MetaTypeCreateInput | null
  connect?: MetaTypeWhereUniqueInput | null
}
export type MetaTypeCreateOneInputInputObject =
  | Extract<keyof MetaTypeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InsightUpdateInput {
  publishedAt?: string | null
  authorId?: string | null
  category?: string | null
  content?: string | null
  desc?: string | null
  media?: MediaUpdateOneInput | null
  meta?: MetaTypeUpdateOneInput | null
  title?: string | null
}
export type InsightUpdateInputInputObject =
  | Extract<keyof InsightUpdateInput, string>
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'authorId', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'media', alias?: string  } 
  | { name: 'meta', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface MetaTypeUpdateOneInput {
  create?: MetaTypeCreateInput | null
  update?: MetaTypeUpdateDataInput | null
  upsert?: MetaTypeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: MetaTypeWhereUniqueInput | null
}
export type MetaTypeUpdateOneInputInputObject =
  | Extract<keyof MetaTypeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MetaTypeUpdateDataInput {
  featured?: boolean | null
  size?: SizeTypeUpdateOneInput | null
}
export type MetaTypeUpdateDataInputInputObject =
  | Extract<keyof MetaTypeUpdateDataInput, string>
  | { name: 'featured', alias?: string  } 
  | { name: 'size', alias?: string  } 
  
export interface MetaTypeUpsertNestedInput {
  update?: MetaTypeUpdateDataInput
  create?: MetaTypeCreateInput
}
export type MetaTypeUpsertNestedInputInputObject =
  | Extract<keyof MetaTypeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InsightUpdateManyMutationInput {
  publishedAt?: string | null
  authorId?: string | null
  category?: string | null
  content?: string | null
  desc?: string | null
  title?: string | null
}
export type InsightUpdateManyMutationInputInputObject =
  | Extract<keyof InsightUpdateManyMutationInput, string>
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'authorId', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface PolicyCreateInput {
  id?: string | null
  publishedAt?: string | null
  content?: string
  title?: string
}
export type PolicyCreateInputInputObject =
  | Extract<keyof PolicyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface PolicyUpdateInput {
  publishedAt?: string | null
  content?: string | null
  title?: string | null
}
export type PolicyUpdateInputInputObject =
  | Extract<keyof PolicyUpdateInput, string>
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface PolicyUpdateManyMutationInput {
  publishedAt?: string | null
  content?: string | null
  title?: string | null
}
export type PolicyUpdateManyMutationInputInputObject =
  | Extract<keyof PolicyUpdateManyMutationInput, string>
  | { name: 'publishedAt', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface NameSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NameWhereInput | null
  AND?: NameSubscriptionWhereInput[]
  OR?: NameSubscriptionWhereInput[]
  NOT?: NameSubscriptionWhereInput[]
}
export type NameSubscriptionWhereInputInputObject =
  | Extract<keyof NameSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BirthSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BirthWhereInput | null
  AND?: BirthSubscriptionWhereInput[]
  OR?: BirthSubscriptionWhereInput[]
  NOT?: BirthSubscriptionWhereInput[]
}
export type BirthSubscriptionWhereInputInputObject =
  | Extract<keyof BirthSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ContactWhereInput | null
  AND?: ContactSubscriptionWhereInput[]
  OR?: ContactSubscriptionWhereInput[]
  NOT?: ContactSubscriptionWhereInput[]
}
export type ContactSubscriptionWhereInputInputObject =
  | Extract<keyof ContactSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProfileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProfileWhereInput | null
  AND?: ProfileSubscriptionWhereInput[]
  OR?: ProfileSubscriptionWhereInput[]
  NOT?: ProfileSubscriptionWhereInput[]
}
export type ProfileSubscriptionWhereInputInputObject =
  | Extract<keyof ProfileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmployeeWhereInput | null
  AND?: EmployeeSubscriptionWhereInput[]
  OR?: EmployeeSubscriptionWhereInput[]
  NOT?: EmployeeSubscriptionWhereInput[]
}
export type EmployeeSubscriptionWhereInputInputObject =
  | Extract<keyof EmployeeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MediaSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MediaWhereInput | null
  AND?: MediaSubscriptionWhereInput[]
  OR?: MediaSubscriptionWhereInput[]
  NOT?: MediaSubscriptionWhereInput[]
}
export type MediaSubscriptionWhereInputInputObject =
  | Extract<keyof MediaSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SizeTypeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SizeTypeWhereInput | null
  AND?: SizeTypeSubscriptionWhereInput[]
  OR?: SizeTypeSubscriptionWhereInput[]
  NOT?: SizeTypeSubscriptionWhereInput[]
}
export type SizeTypeSubscriptionWhereInputInputObject =
  | Extract<keyof SizeTypeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MetaTypeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MetaTypeWhereInput | null
  AND?: MetaTypeSubscriptionWhereInput[]
  OR?: MetaTypeSubscriptionWhereInput[]
  NOT?: MetaTypeSubscriptionWhereInput[]
}
export type MetaTypeSubscriptionWhereInputInputObject =
  | Extract<keyof MetaTypeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InsightSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InsightWhereInput | null
  AND?: InsightSubscriptionWhereInput[]
  OR?: InsightSubscriptionWhereInput[]
  NOT?: InsightSubscriptionWhereInput[]
}
export type InsightSubscriptionWhereInputInputObject =
  | Extract<keyof InsightSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PolicySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PolicyWhereInput | null
  AND?: PolicySubscriptionWhereInput[]
  OR?: PolicySubscriptionWhereInput[]
  NOT?: PolicySubscriptionWhereInput[]
}
export type PolicySubscriptionWhereInputInputObject =
  | Extract<keyof PolicySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type NameOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'first_ASC'
  | 'first_DESC'
  | 'middle_ASC'
  | 'middle_DESC'
  | 'last_ASC'
  | 'last_DESC'
  | 'preferred_ASC'
  | 'preferred_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BirthOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ContactOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MediaTypeValues =
  | 'Image'
  | 'Video'
  
export type ProfileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'bio_ASC'
  | 'bio_DESC'
  | 'level_ASC'
  | 'level_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EmployeeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MediaOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'source_ASC'
  | 'source_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  
export type SizeTypeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'xs_ASC'
  | 'xs_DESC'
  | 'sm_ASC'
  | 'sm_DESC'
  | 'md_ASC'
  | 'md_DESC'
  | 'lg_ASC'
  | 'lg_DESC'
  | 'xl_ASC'
  | 'xl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MetaTypeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'featured_ASC'
  | 'featured_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InsightOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'authorId_ASC'
  | 'authorId_DESC'
  | 'category_ASC'
  | 'category_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'title_ASC'
  | 'title_DESC'
  
export type PolicyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'title_ASC'
  | 'title_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  