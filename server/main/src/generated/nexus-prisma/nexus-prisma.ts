/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Comment: CommentObject
      Person: PersonObject
      Billing: BillingObject
      Account: AccountObject
      Card: CardObject
      Contact: ContactObject
      Career: CareerObject
      Experience: ExperienceObject
      Name: NameObject
      Profile: ProfileObject
      Session: SessionObject
      CommentConnection: CommentConnectionObject
      PageInfo: PageInfoObject
      CommentEdge: CommentEdgeObject
      AggregateComment: AggregateCommentObject
      Document: DocumentObject
      DocumentConnection: DocumentConnectionObject
      DocumentEdge: DocumentEdgeObject
      AggregateDocument: AggregateDocumentObject
      Notification: NotificationObject
      ReceivedBy: ReceivedByObject
      Sender: SenderObject
      NotificationConnection: NotificationConnectionObject
      NotificationEdge: NotificationEdgeObject
      AggregateNotification: AggregateNotificationObject
      Order: OrderObject
      Product: ProductObject
      Manufacturer: ManufacturerObject
      Price: PriceObject
      Shipping: ShippingObject
      OrderConnection: OrderConnectionObject
      OrderEdge: OrderEdgeObject
      AggregateOrder: AggregateOrderObject
      PersonConnection: PersonConnectionObject
      PersonEdge: PersonEdgeObject
      AggregatePerson: AggregatePersonObject
      ProductConnection: ProductConnectionObject
      ProductEdge: ProductEdgeObject
      AggregateProduct: AggregateProductObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      CommentSubscriptionPayload: CommentSubscriptionPayloadObject
      CommentPreviousValues: CommentPreviousValuesObject
      DocumentSubscriptionPayload: DocumentSubscriptionPayloadObject
      DocumentPreviousValues: DocumentPreviousValuesObject
      NotificationSubscriptionPayload: NotificationSubscriptionPayloadObject
      NotificationPreviousValues: NotificationPreviousValuesObject
      OrderSubscriptionPayload: OrderSubscriptionPayloadObject
      OrderPreviousValues: OrderPreviousValuesObject
      PersonSubscriptionPayload: PersonSubscriptionPayloadObject
      PersonPreviousValues: PersonPreviousValuesObject
      ProductSubscriptionPayload: ProductSubscriptionPayloadObject
      ProductPreviousValues: ProductPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Comment: CommentFieldDetails
      Person: PersonFieldDetails
      Billing: BillingFieldDetails
      Account: AccountFieldDetails
      Card: CardFieldDetails
      Contact: ContactFieldDetails
      Career: CareerFieldDetails
      Experience: ExperienceFieldDetails
      Name: NameFieldDetails
      Profile: ProfileFieldDetails
      Session: SessionFieldDetails
      CommentConnection: CommentConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      CommentEdge: CommentEdgeFieldDetails
      AggregateComment: AggregateCommentFieldDetails
      Document: DocumentFieldDetails
      DocumentConnection: DocumentConnectionFieldDetails
      DocumentEdge: DocumentEdgeFieldDetails
      AggregateDocument: AggregateDocumentFieldDetails
      Notification: NotificationFieldDetails
      ReceivedBy: ReceivedByFieldDetails
      Sender: SenderFieldDetails
      NotificationConnection: NotificationConnectionFieldDetails
      NotificationEdge: NotificationEdgeFieldDetails
      AggregateNotification: AggregateNotificationFieldDetails
      Order: OrderFieldDetails
      Product: ProductFieldDetails
      Manufacturer: ManufacturerFieldDetails
      Price: PriceFieldDetails
      Shipping: ShippingFieldDetails
      OrderConnection: OrderConnectionFieldDetails
      OrderEdge: OrderEdgeFieldDetails
      AggregateOrder: AggregateOrderFieldDetails
      PersonConnection: PersonConnectionFieldDetails
      PersonEdge: PersonEdgeFieldDetails
      AggregatePerson: AggregatePersonFieldDetails
      ProductConnection: ProductConnectionFieldDetails
      ProductEdge: ProductEdgeFieldDetails
      AggregateProduct: AggregateProductFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      CommentSubscriptionPayload: CommentSubscriptionPayloadFieldDetails
      CommentPreviousValues: CommentPreviousValuesFieldDetails
      DocumentSubscriptionPayload: DocumentSubscriptionPayloadFieldDetails
      DocumentPreviousValues: DocumentPreviousValuesFieldDetails
      NotificationSubscriptionPayload: NotificationSubscriptionPayloadFieldDetails
      NotificationPreviousValues: NotificationPreviousValuesFieldDetails
      OrderSubscriptionPayload: OrderSubscriptionPayloadFieldDetails
      OrderPreviousValues: OrderPreviousValuesFieldDetails
      PersonSubscriptionPayload: PersonSubscriptionPayloadFieldDetails
      PersonPreviousValues: PersonPreviousValuesFieldDetails
      ProductSubscriptionPayload: ProductSubscriptionPayloadFieldDetails
      ProductPreviousValues: ProductPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      CommentWhereUniqueInput: CommentWhereUniqueInputInputObject
      PersonWhereInput: PersonWhereInputInputObject
      BillingWhereInput: BillingWhereInputInputObject
      AccountWhereInput: AccountWhereInputInputObject
      AccountRestrictedWhereInput: AccountRestrictedWhereInputInputObject
      CardWhereInput: CardWhereInputInputObject
      CardRestrictedWhereInput: CardRestrictedWhereInputInputObject
      ContactWhereInput: ContactWhereInputInputObject
      CareerWhereInput: CareerWhereInputInputObject
      ExperienceWhereInput: ExperienceWhereInputInputObject
      ExperienceRestrictedWhereInput: ExperienceRestrictedWhereInputInputObject
      NameWhereInput: NameWhereInputInputObject
      ProfileWhereInput: ProfileWhereInputInputObject
      SessionWhereInput: SessionWhereInputInputObject
      SessionRestrictedWhereInput: SessionRestrictedWhereInputInputObject
      CommentWhereInput: CommentWhereInputInputObject
      DocumentWhereUniqueInput: DocumentWhereUniqueInputInputObject
      DocumentWhereInput: DocumentWhereInputInputObject
      NotificationWhereUniqueInput: NotificationWhereUniqueInputInputObject
      NotificationWhereInput: NotificationWhereInputInputObject
      ReceivedByWhereInput: ReceivedByWhereInputInputObject
      ReceivedByRestrictedWhereInput: ReceivedByRestrictedWhereInputInputObject
      SenderWhereInput: SenderWhereInputInputObject
      OrderWhereUniqueInput: OrderWhereUniqueInputInputObject
      ProductWhereInput: ProductWhereInputInputObject
      ManufacturerWhereInput: ManufacturerWhereInputInputObject
      PriceWhereInput: PriceWhereInputInputObject
      ShippingWhereInput: ShippingWhereInputInputObject
      OrderWhereInput: OrderWhereInputInputObject
      PersonWhereUniqueInput: PersonWhereUniqueInputInputObject
      ProductWhereUniqueInput: ProductWhereUniqueInputInputObject
      CommentCreateInput: CommentCreateInputInputObject
      CommentCreateOneInput: CommentCreateOneInputInputObject
      PersonCreateOneInput: PersonCreateOneInputInputObject
      PersonCreateInput: PersonCreateInputInputObject
      BillingCreateOneInput: BillingCreateOneInputInputObject
      BillingCreateInput: BillingCreateInputInputObject
      AccountCreateManyInput: AccountCreateManyInputInputObject
      AccountCreateInput: AccountCreateInputInputObject
      CardCreateManyInput: CardCreateManyInputInputObject
      CardCreateInput: CardCreateInputInputObject
      PersonCreateManyInput: PersonCreateManyInputInputObject
      ContactCreateOneInput: ContactCreateOneInputInputObject
      ContactCreateInput: ContactCreateInputInputObject
      ContactCreateemailsInput: ContactCreateemailsInputInputObject
      ContactCreatephonesInput: ContactCreatephonesInputInputObject
      CareerCreateOneInput: CareerCreateOneInputInputObject
      CareerCreateInput: CareerCreateInputInputObject
      ExperienceCreateManyInput: ExperienceCreateManyInputInputObject
      ExperienceCreateInput: ExperienceCreateInputInputObject
      NameCreateOneInput: NameCreateOneInputInputObject
      NameCreateInput: NameCreateInputInputObject
      ProfileCreateOneInput: ProfileCreateOneInputInputObject
      ProfileCreateInput: ProfileCreateInputInputObject
      SessionCreateManyInput: SessionCreateManyInputInputObject
      SessionCreateInput: SessionCreateInputInputObject
      CommentUpdateInput: CommentUpdateInputInputObject
      CommentUpdateOneInput: CommentUpdateOneInputInputObject
      CommentUpdateDataInput: CommentUpdateDataInputInputObject
      PersonUpdateOneRequiredInput: PersonUpdateOneRequiredInputInputObject
      PersonUpdateDataInput: PersonUpdateDataInputInputObject
      BillingUpdateOneInput: BillingUpdateOneInputInputObject
      BillingUpdateDataInput: BillingUpdateDataInputInputObject
      AccountUpdateManyInput: AccountUpdateManyInputInputObject
      AccountScalarWhereInput: AccountScalarWhereInputInputObject
      AccountUpdateManyWithWhereNestedInput: AccountUpdateManyWithWhereNestedInputInputObject
      AccountUpdateManyDataInput: AccountUpdateManyDataInputInputObject
      CardUpdateManyInput: CardUpdateManyInputInputObject
      CardScalarWhereInput: CardScalarWhereInputInputObject
      CardUpdateManyWithWhereNestedInput: CardUpdateManyWithWhereNestedInputInputObject
      CardUpdateManyDataInput: CardUpdateManyDataInputInputObject
      BillingUpsertNestedInput: BillingUpsertNestedInputInputObject
      PersonUpdateManyInput: PersonUpdateManyInputInputObject
      PersonUpdateWithWhereUniqueNestedInput: PersonUpdateWithWhereUniqueNestedInputInputObject
      PersonUpsertWithWhereUniqueNestedInput: PersonUpsertWithWhereUniqueNestedInputInputObject
      PersonScalarWhereInput: PersonScalarWhereInputInputObject
      PersonUpdateManyWithWhereNestedInput: PersonUpdateManyWithWhereNestedInputInputObject
      PersonUpdateManyDataInput: PersonUpdateManyDataInputInputObject
      ContactUpdateOneInput: ContactUpdateOneInputInputObject
      ContactUpdateDataInput: ContactUpdateDataInputInputObject
      ContactUpdateemailsInput: ContactUpdateemailsInputInputObject
      ContactUpdatephonesInput: ContactUpdatephonesInputInputObject
      ContactUpsertNestedInput: ContactUpsertNestedInputInputObject
      CareerUpdateOneInput: CareerUpdateOneInputInputObject
      CareerUpdateDataInput: CareerUpdateDataInputInputObject
      ExperienceUpdateManyInput: ExperienceUpdateManyInputInputObject
      ExperienceScalarWhereInput: ExperienceScalarWhereInputInputObject
      ExperienceUpdateManyWithWhereNestedInput: ExperienceUpdateManyWithWhereNestedInputInputObject
      ExperienceUpdateManyDataInput: ExperienceUpdateManyDataInputInputObject
      CareerUpsertNestedInput: CareerUpsertNestedInputInputObject
      NameUpdateOneRequiredInput: NameUpdateOneRequiredInputInputObject
      NameUpdateDataInput: NameUpdateDataInputInputObject
      NameUpsertNestedInput: NameUpsertNestedInputInputObject
      ProfileUpdateOneInput: ProfileUpdateOneInputInputObject
      ProfileUpdateDataInput: ProfileUpdateDataInputInputObject
      ProfileUpsertNestedInput: ProfileUpsertNestedInputInputObject
      SessionUpdateManyInput: SessionUpdateManyInputInputObject
      SessionScalarWhereInput: SessionScalarWhereInputInputObject
      SessionUpdateManyWithWhereNestedInput: SessionUpdateManyWithWhereNestedInputInputObject
      SessionUpdateManyDataInput: SessionUpdateManyDataInputInputObject
      PersonUpsertNestedInput: PersonUpsertNestedInputInputObject
      CommentUpsertNestedInput: CommentUpsertNestedInputInputObject
      CommentUpdateManyMutationInput: CommentUpdateManyMutationInputInputObject
      DocumentCreateInput: DocumentCreateInputInputObject
      DocumentUpdateInput: DocumentUpdateInputInputObject
      DocumentUpdateManyMutationInput: DocumentUpdateManyMutationInputInputObject
      NotificationCreateInput: NotificationCreateInputInputObject
      NotificationCreatereceiverInput: NotificationCreatereceiverInputInputObject
      ReceivedByCreateManyInput: ReceivedByCreateManyInputInputObject
      ReceivedByCreateInput: ReceivedByCreateInputInputObject
      SenderCreateOneInput: SenderCreateOneInputInputObject
      SenderCreateInput: SenderCreateInputInputObject
      NotificationUpdateInput: NotificationUpdateInputInputObject
      NotificationUpdatereceiverInput: NotificationUpdatereceiverInputInputObject
      ReceivedByUpdateManyInput: ReceivedByUpdateManyInputInputObject
      ReceivedByScalarWhereInput: ReceivedByScalarWhereInputInputObject
      ReceivedByUpdateManyWithWhereNestedInput: ReceivedByUpdateManyWithWhereNestedInputInputObject
      ReceivedByUpdateManyDataInput: ReceivedByUpdateManyDataInputInputObject
      SenderUpdateOneRequiredInput: SenderUpdateOneRequiredInputInputObject
      SenderUpdateDataInput: SenderUpdateDataInputInputObject
      SenderUpsertNestedInput: SenderUpsertNestedInputInputObject
      NotificationUpdateManyMutationInput: NotificationUpdateManyMutationInputInputObject
      OrderCreateInput: OrderCreateInputInputObject
      ProductCreateManyInput: ProductCreateManyInputInputObject
      ProductCreateInput: ProductCreateInputInputObject
      ManufacturerCreateOneInput: ManufacturerCreateOneInputInputObject
      ManufacturerCreateInput: ManufacturerCreateInputInputObject
      PriceCreateOneInput: PriceCreateOneInputInputObject
      PriceCreateInput: PriceCreateInputInputObject
      ShippingCreateOneInput: ShippingCreateOneInputInputObject
      ShippingCreateInput: ShippingCreateInputInputObject
      OrderUpdateInput: OrderUpdateInputInputObject
      ProductUpdateManyInput: ProductUpdateManyInputInputObject
      ProductUpdateWithWhereUniqueNestedInput: ProductUpdateWithWhereUniqueNestedInputInputObject
      ProductUpdateDataInput: ProductUpdateDataInputInputObject
      ManufacturerUpdateOneInput: ManufacturerUpdateOneInputInputObject
      ManufacturerUpdateDataInput: ManufacturerUpdateDataInputInputObject
      ManufacturerUpsertNestedInput: ManufacturerUpsertNestedInputInputObject
      PriceUpdateOneRequiredInput: PriceUpdateOneRequiredInputInputObject
      PriceUpdateDataInput: PriceUpdateDataInputInputObject
      PriceUpsertNestedInput: PriceUpsertNestedInputInputObject
      ShippingUpdateOneInput: ShippingUpdateOneInputInputObject
      ShippingUpdateDataInput: ShippingUpdateDataInputInputObject
      ShippingUpsertNestedInput: ShippingUpsertNestedInputInputObject
      ProductUpsertWithWhereUniqueNestedInput: ProductUpsertWithWhereUniqueNestedInputInputObject
      ProductScalarWhereInput: ProductScalarWhereInputInputObject
      ProductUpdateManyWithWhereNestedInput: ProductUpdateManyWithWhereNestedInputInputObject
      ProductUpdateManyDataInput: ProductUpdateManyDataInputInputObject
      OrderUpdateManyMutationInput: OrderUpdateManyMutationInputInputObject
      PersonUpdateInput: PersonUpdateInputInputObject
      PersonUpdateManyMutationInput: PersonUpdateManyMutationInputInputObject
      ProductUpdateInput: ProductUpdateInputInputObject
      ProductUpdateManyMutationInput: ProductUpdateManyMutationInputInputObject
      CommentSubscriptionWhereInput: CommentSubscriptionWhereInputInputObject
      DocumentSubscriptionWhereInput: DocumentSubscriptionWhereInputInputObject
      NotificationSubscriptionWhereInput: NotificationSubscriptionWhereInputInputObject
      OrderSubscriptionWhereInput: OrderSubscriptionWhereInputInputObject
      PersonSubscriptionWhereInput: PersonSubscriptionWhereInputInputObject
      ProductSubscriptionWhereInput: ProductSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    AccountType: AccountTypeValues,
    CardType: CardTypeValues,
    Gender: GenderValues,
    PersonType: PersonTypeValues,
    PersonOrderByInput: PersonOrderByInputValues,
    CommentType: CommentTypeValues,
    CommentOrderByInput: CommentOrderByInputValues,
    DocumentCategory: DocumentCategoryValues,
    DocumentType: DocumentTypeValues,
    DocumentOrderByInput: DocumentOrderByInputValues,
    SenderType: SenderTypeValues,
    NotificationOrderByInput: NotificationOrderByInputValues,
    ProductCategory: ProductCategoryValues,
    DimensionScale: DimensionScaleValues,
    ProductOrderByInput: ProductOrderByInputValues,
    OrderStatus: OrderStatusValues,
    OrderOrderByInput: OrderOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'comment', args?: QueryCommentArgs[] | false, alias?: string  } 
  | { name: 'comments', args?: QueryCommentsArgs[] | false, alias?: string  } 
  | { name: 'commentsConnection', args?: QueryCommentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'document', args?: QueryDocumentArgs[] | false, alias?: string  } 
  | { name: 'documents', args?: QueryDocumentsArgs[] | false, alias?: string  } 
  | { name: 'documentsConnection', args?: QueryDocumentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'notification', args?: QueryNotificationArgs[] | false, alias?: string  } 
  | { name: 'notifications', args?: QueryNotificationsArgs[] | false, alias?: string  } 
  | { name: 'notificationsConnection', args?: QueryNotificationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'order', args?: QueryOrderArgs[] | false, alias?: string  } 
  | { name: 'orders', args?: QueryOrdersArgs[] | false, alias?: string  } 
  | { name: 'ordersConnection', args?: QueryOrdersConnectionArgs[] | false, alias?: string  } 
  | { name: 'person', args?: QueryPersonArgs[] | false, alias?: string  } 
  | { name: 'persons', args?: QueryPersonsArgs[] | false, alias?: string  } 
  | { name: 'personsConnection', args?: QueryPersonsConnectionArgs[] | false, alias?: string  } 
  | { name: 'product', args?: QueryProductArgs[] | false, alias?: string  } 
  | { name: 'products', args?: QueryProductsArgs[] | false, alias?: string  } 
  | { name: 'productsConnection', args?: QueryProductsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'comment'
  | 'comments'
  | 'commentsConnection'
  | 'document'
  | 'documents'
  | 'documentsConnection'
  | 'notification'
  | 'notifications'
  | 'notificationsConnection'
  | 'order'
  | 'orders'
  | 'ordersConnection'
  | 'person'
  | 'persons'
  | 'personsConnection'
  | 'product'
  | 'products'
  | 'productsConnection'


type QueryCommentArgs =
  | 'where'
type QueryCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCommentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDocumentArgs =
  | 'where'
type QueryDocumentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDocumentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNotificationArgs =
  | 'where'
type QueryNotificationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNotificationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderArgs =
  | 'where'
type QueryOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrdersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPersonArgs =
  | 'where'
type QueryPersonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPersonsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductArgs =
  | 'where'
type QueryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  comment: {
    type: 'Comment'
    args: Record<QueryCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  comments: {
    type: 'Comment'
    args: Record<QueryCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
  commentsConnection: {
    type: 'CommentConnection'
    args: Record<QueryCommentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentConnection> | prisma.CommentConnection
  }
  document: {
    type: 'Document'
    args: Record<QueryDocumentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DocumentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document | null> | prisma.Document | null
  }
  documents: {
    type: 'Document'
    args: Record<QueryDocumentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DocumentWhereInput | null, orderBy?: prisma.DocumentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document[]> | prisma.Document[]
  }
  documentsConnection: {
    type: 'DocumentConnection'
    args: Record<QueryDocumentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DocumentWhereInput | null, orderBy?: prisma.DocumentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentConnection> | prisma.DocumentConnection
  }
  notification: {
    type: 'Notification'
    args: Record<QueryNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NotificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  notifications: {
    type: 'Notification'
    args: Record<QueryNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NotificationWhereInput | null, orderBy?: prisma.NotificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification[]> | prisma.Notification[]
  }
  notificationsConnection: {
    type: 'NotificationConnection'
    args: Record<QueryNotificationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NotificationWhereInput | null, orderBy?: prisma.NotificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationConnection> | prisma.NotificationConnection
  }
  order: {
    type: 'Order'
    args: Record<QueryOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  orders: {
    type: 'Order'
    args: Record<QueryOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order[]> | prisma.Order[]
  }
  ordersConnection: {
    type: 'OrderConnection'
    args: Record<QueryOrdersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderConnection> | prisma.OrderConnection
  }
  person: {
    type: 'Person'
    args: Record<QueryPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  persons: {
    type: 'Person'
    args: Record<QueryPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person[]> | prisma.Person[]
  }
  personsConnection: {
    type: 'PersonConnection'
    args: Record<QueryPersonsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonConnection> | prisma.PersonConnection
  }
  product: {
    type: 'Product'
    args: Record<QueryProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  products: {
    type: 'Product'
    args: Record<QueryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  productsConnection: {
    type: 'ProductConnection'
    args: Record<QueryProductsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductConnection> | prisma.ProductConnection
  }
}
  

// Types for Comment

type CommentObject =
  | CommentFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_discussionId', args?: [] | false, alias?: string  } 
  | { name: '_parentId', args?: [] | false, alias?: string  } 
  | { name: '_updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'fullSlug', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type CommentFields =
  | '_id'
  | '_createdAt'
  | '_discussionId'
  | '_parentId'
  | '_updatedAt'
  | 'author'
  | 'content'
  | 'fullSlug'
  | 'slug'
  | 'type'



  

export interface CommentFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _discussionId: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _parentId: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  _updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fullSlug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'CommentType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentType | null> | prisma.CommentType | null
  }
}
  

// Types for Person

type PersonObject =
  | PersonFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'billing', args?: [] | false, alias?: string  } 
  | { name: 'connections', args?: PersonConnectionsArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: [] | false, alias?: string  } 
  | { name: 'career', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 
  | { name: 'sessions', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 

type PersonFields =
  | '_id'
  | '_createdAt'
  | '_updatedAt'
  | 'billing'
  | 'connections'
  | 'contact'
  | 'career'
  | 'name'
  | 'password'
  | 'profile'
  | 'sessions'
  | 'type'
  | 'username'


type PersonConnectionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PersonFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billing: {
    type: 'Billing'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Billing | null> | prisma.Billing | null
  }
  connections: {
    type: 'Person'
    args: Record<PersonConnectionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Person">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person[]> | prisma.Person[]
  }
  contact: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  career: {
    type: 'Career'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Career | null> | prisma.Career | null
  }
  name: {
    type: 'Name'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profile: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  sessions: {
    type: 'Session'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session[]> | prisma.Session[]
  }
  type: {
    type: 'PersonType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Person">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonType> | prisma.PersonType
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Billing

type BillingObject =
  | BillingFields
  | { name: 'accounts', args?: [] | false, alias?: string  } 
  | { name: 'cards', args?: [] | false, alias?: string  } 

type BillingFields =
  | 'accounts'
  | 'cards'



  

export interface BillingFieldDetails {
  accounts: {
    type: 'Account'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Billing">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Account[]> | prisma.Account[]
  }
  cards: {
    type: 'Card'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Billing">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Card[]> | prisma.Card[]
  }
}
  

// Types for Account

type AccountObject =
  | AccountFields
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'routing', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type AccountFields =
  | 'number'
  | 'routing'
  | 'type'



  

export interface AccountFieldDetails {
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  routing: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'AccountType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Account">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AccountType> | prisma.AccountType
  }
}
  

// Types for Card

type CardObject =
  | CardFields
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'cvv', args?: [] | false, alias?: string  } 
  | { name: 'expiration', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type CardFields =
  | 'name'
  | 'number'
  | 'cvv'
  | 'expiration'
  | 'type'



  

export interface CardFieldDetails {
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cvv: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expiration: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'CardType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Card">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CardType> | prisma.CardType
  }
}
  

// Types for Contact

type ContactObject =
  | ContactFields
  | { name: 'emails', args?: [] | false, alias?: string  } 
  | { name: 'address1', args?: [] | false, alias?: string  } 
  | { name: 'address2', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'postalCode', args?: [] | false, alias?: string  } 
  | { name: 'phones', args?: [] | false, alias?: string  } 

type ContactFields =
  | 'emails'
  | 'address1'
  | 'address2'
  | 'city'
  | 'state'
  | 'country'
  | 'postalCode'
  | 'phones'



  

export interface ContactFieldDetails {
  emails: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  address1: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  postalCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phones: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for Career

type CareerObject =
  | CareerFields
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'experience', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 

type CareerFields =
  | 'company'
  | 'experience'
  | 'position'



  

export interface CareerFieldDetails {
  company: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  experience: {
    type: 'Experience'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Career">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Experience[]> | prisma.Experience[]
  }
  position: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Experience

type ExperienceObject =
  | ExperienceFields
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'start', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 

type ExperienceFields =
  | 'company'
  | 'position'
  | 'description'
  | 'start'
  | 'end'



  

export interface ExperienceFieldDetails {
  company: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  position: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  start: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Name

type NameObject =
  | NameFields
  | { name: 'first', args?: [] | false, alias?: string  } 
  | { name: 'last', args?: [] | false, alias?: string  } 
  | { name: 'middle', args?: [] | false, alias?: string  } 
  | { name: 'preferred', args?: [] | false, alias?: string  } 

type NameFields =
  | 'first'
  | 'last'
  | 'middle'
  | 'preferred'



  

export interface NameFieldDetails {
  first: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  last: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  preferred: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Profile

type ProfileObject =
  | ProfileFields
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'headline', args?: [] | false, alias?: string  } 

type ProfileFields =
  | 'avatar'
  | 'gender'
  | 'headline'



  

export interface ProfileFieldDetails {
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Profile">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  headline: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Session

type SessionObject =
  | SessionFields
  | { name: 'device', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'token', args?: [] | false, alias?: string  } 

type SessionFields =
  | 'device'
  | 'location'
  | 'token'



  

export interface SessionFieldDetails {
  device: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  token: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CommentConnection

type CommentConnectionObject =
  | CommentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CommentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CommentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CommentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentEdge[]> | prisma.CommentEdge[]
  }
  aggregate: {
    type: 'AggregateComment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateComment> | prisma.AggregateComment
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CommentEdge

type CommentEdgeObject =
  | CommentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CommentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CommentEdgeFieldDetails {
  node: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateComment

type AggregateCommentObject =
  | AggregateCommentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCommentFields =
  | 'count'



  

export interface AggregateCommentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Document

type DocumentObject =
  | DocumentFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_publishedAt', args?: [] | false, alias?: string  } 
  | { name: '_updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'subtitle', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type DocumentFields =
  | '_id'
  | '_createdAt'
  | '_publishedAt'
  | '_updatedAt'
  | 'author'
  | 'category'
  | 'content'
  | 'subtitle'
  | 'title'
  | 'type'



  

export interface DocumentFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _publishedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  _updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Document">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  category: {
    type: 'DocumentCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Document">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentCategory> | prisma.DocumentCategory
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subtitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'DocumentType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Document">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentType> | prisma.DocumentType
  }
}
  

// Types for DocumentConnection

type DocumentConnectionObject =
  | DocumentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DocumentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DocumentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DocumentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentEdge[]> | prisma.DocumentEdge[]
  }
  aggregate: {
    type: 'AggregateDocument'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDocument> | prisma.AggregateDocument
  }
}
  

// Types for DocumentEdge

type DocumentEdgeObject =
  | DocumentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DocumentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DocumentEdgeFieldDetails {
  node: {
    type: 'Document'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document> | prisma.Document
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDocument

type AggregateDocumentObject =
  | AggregateDocumentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDocumentFields =
  | 'count'



  

export interface AggregateDocumentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Notification

type NotificationObject =
  | NotificationFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_sentAt', args?: [] | false, alias?: string  } 
  | { name: 'receiver', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 
  | { name: 'receivedBy', args?: [] | false, alias?: string  } 
  | { name: 'sender', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type NotificationFields =
  | '_id'
  | '_createdAt'
  | '_sentAt'
  | 'receiver'
  | 'message'
  | 'receivedBy'
  | 'sender'
  | 'title'



  

export interface NotificationFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _sentAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  receiver: {
    type: 'ID'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  receivedBy: {
    type: 'ReceivedBy'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Notification">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ReceivedBy[]> | prisma.ReceivedBy[]
  }
  sender: {
    type: 'Sender'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Notification">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sender> | prisma.Sender
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ReceivedBy

type ReceivedByObject =
  | ReceivedByFields
  | { name: '_personId', args?: [] | false, alias?: string  } 
  | { name: '_receivedAt', args?: [] | false, alias?: string  } 
  | { name: '_readAt', args?: [] | false, alias?: string  } 

type ReceivedByFields =
  | '_personId'
  | '_receivedAt'
  | '_readAt'



  

export interface ReceivedByFieldDetails {
  _personId: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ReceivedBy">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  _receivedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _readAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Sender

type SenderObject =
  | SenderFields
  | { name: '_personId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type SenderFields =
  | '_personId'
  | 'name'
  | 'type'



  

export interface SenderFieldDetails {
  _personId: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Sender">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'SenderType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Sender">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SenderType> | prisma.SenderType
  }
}
  

// Types for NotificationConnection

type NotificationConnectionObject =
  | NotificationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NotificationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NotificationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NotificationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationEdge[]> | prisma.NotificationEdge[]
  }
  aggregate: {
    type: 'AggregateNotification'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNotification> | prisma.AggregateNotification
  }
}
  

// Types for NotificationEdge

type NotificationEdgeObject =
  | NotificationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NotificationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NotificationEdgeFieldDetails {
  node: {
    type: 'Notification'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification> | prisma.Notification
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNotification

type AggregateNotificationObject =
  | AggregateNotificationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNotificationFields =
  | 'count'



  

export interface AggregateNotificationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Order

type OrderObject =
  | OrderFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'customer', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: OrderItemsArgs[] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type OrderFields =
  | '_id'
  | 'customer'
  | 'items'
  | 'total'
  | 'status'


type OrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface OrderFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  customer: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  items: {
    type: 'Product'
    args: Record<OrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  total: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'OrderStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderStatus> | prisma.OrderStatus
  }
}
  

// Types for Product

type ProductObject =
  | ProductFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_handlerId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'details', args?: [] | false, alias?: string  } 
  | { name: 'manufacturer', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'shipping', args?: [] | false, alias?: string  } 
  | { name: 'sku', args?: [] | false, alias?: string  } 

type ProductFields =
  | '_id'
  | '_handlerId'
  | 'name'
  | 'category'
  | 'description'
  | 'details'
  | 'manufacturer'
  | 'price'
  | 'quantity'
  | 'shipping'
  | 'sku'



  

export interface ProductFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _handlerId: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'ProductCategory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductCategory | null> | prisma.ProductCategory | null
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  details: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  manufacturer: {
    type: 'Manufacturer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Manufacturer | null> | prisma.Manufacturer | null
  }
  price: {
    type: 'Price'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Price> | prisma.Price
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shipping: {
    type: 'Shipping'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shipping | null> | prisma.Shipping | null
  }
  sku: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Manufacturer

type ManufacturerObject =
  | ManufacturerFields
  | { name: 'model', args?: [] | false, alias?: string  } 
  | { name: 'releaseDate', args?: [] | false, alias?: string  } 

type ManufacturerFields =
  | 'model'
  | 'releaseDate'



  

export interface ManufacturerFieldDetails {
  model: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  releaseDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Price

type PriceObject =
  | PriceFields
  | { name: 'list', args?: [] | false, alias?: string  } 
  | { name: 'retail', args?: [] | false, alias?: string  } 
  | { name: 'savings', args?: [] | false, alias?: string  } 
  | { name: 'savingsPct', args?: [] | false, alias?: string  } 

type PriceFields =
  | 'list'
  | 'retail'
  | 'savings'
  | 'savingsPct'



  

export interface PriceFieldDetails {
  list: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  retail: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  savings: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  savingsPct: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Shipping

type ShippingObject =
  | ShippingFields
  | { name: 'depth', args?: [] | false, alias?: string  } 
  | { name: 'height', args?: [] | false, alias?: string  } 
  | { name: 'scale', args?: [] | false, alias?: string  } 
  | { name: 'weight', args?: [] | false, alias?: string  } 
  | { name: 'width', args?: [] | false, alias?: string  } 

type ShippingFields =
  | 'depth'
  | 'height'
  | 'scale'
  | 'weight'
  | 'width'



  

export interface ShippingFieldDetails {
  depth: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  height: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  scale: {
    type: 'DimensionScale'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Shipping">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DimensionScale> | prisma.DimensionScale
  }
  weight: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  width: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderConnection

type OrderConnectionObject =
  | OrderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderEdge[]> | prisma.OrderEdge[]
  }
  aggregate: {
    type: 'AggregateOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrder> | prisma.AggregateOrder
  }
}
  

// Types for OrderEdge

type OrderEdgeObject =
  | OrderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderEdgeFieldDetails {
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrder

type AggregateOrderObject =
  | AggregateOrderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderFields =
  | 'count'



  

export interface AggregateOrderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PersonConnection

type PersonConnectionObject =
  | PersonConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PersonConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PersonConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PersonEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonEdge[]> | prisma.PersonEdge[]
  }
  aggregate: {
    type: 'AggregatePerson'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePerson> | prisma.AggregatePerson
  }
}
  

// Types for PersonEdge

type PersonEdgeObject =
  | PersonEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PersonEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PersonEdgeFieldDetails {
  node: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePerson

type AggregatePersonObject =
  | AggregatePersonFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePersonFields =
  | 'count'



  

export interface AggregatePersonFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductConnection

type ProductConnectionObject =
  | ProductConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductEdge[]> | prisma.ProductEdge[]
  }
  aggregate: {
    type: 'AggregateProduct'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProduct> | prisma.AggregateProduct
  }
}
  

// Types for ProductEdge

type ProductEdgeObject =
  | ProductEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductEdgeFieldDetails {
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProduct

type AggregateProductObject =
  | AggregateProductFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductFields =
  | 'count'



  

export interface AggregateProductFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createComment', args?: MutationCreateCommentArgs[] | false, alias?: string  } 
  | { name: 'updateComment', args?: MutationUpdateCommentArgs[] | false, alias?: string  } 
  | { name: 'updateManyComments', args?: MutationUpdateManyCommentsArgs[] | false, alias?: string  } 
  | { name: 'upsertComment', args?: MutationUpsertCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteComment', args?: MutationDeleteCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyComments', args?: MutationDeleteManyCommentsArgs[] | false, alias?: string  } 
  | { name: 'createDocument', args?: MutationCreateDocumentArgs[] | false, alias?: string  } 
  | { name: 'updateDocument', args?: MutationUpdateDocumentArgs[] | false, alias?: string  } 
  | { name: 'updateManyDocuments', args?: MutationUpdateManyDocumentsArgs[] | false, alias?: string  } 
  | { name: 'upsertDocument', args?: MutationUpsertDocumentArgs[] | false, alias?: string  } 
  | { name: 'deleteDocument', args?: MutationDeleteDocumentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDocuments', args?: MutationDeleteManyDocumentsArgs[] | false, alias?: string  } 
  | { name: 'createNotification', args?: MutationCreateNotificationArgs[] | false, alias?: string  } 
  | { name: 'updateNotification', args?: MutationUpdateNotificationArgs[] | false, alias?: string  } 
  | { name: 'updateManyNotifications', args?: MutationUpdateManyNotificationsArgs[] | false, alias?: string  } 
  | { name: 'upsertNotification', args?: MutationUpsertNotificationArgs[] | false, alias?: string  } 
  | { name: 'deleteNotification', args?: MutationDeleteNotificationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNotifications', args?: MutationDeleteManyNotificationsArgs[] | false, alias?: string  } 
  | { name: 'createOrder', args?: MutationCreateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateOrder', args?: MutationUpdateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrders', args?: MutationUpdateManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'upsertOrder', args?: MutationUpsertOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteOrder', args?: MutationDeleteOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrders', args?: MutationDeleteManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'createPerson', args?: MutationCreatePersonArgs[] | false, alias?: string  } 
  | { name: 'updatePerson', args?: MutationUpdatePersonArgs[] | false, alias?: string  } 
  | { name: 'updateManyPersons', args?: MutationUpdateManyPersonsArgs[] | false, alias?: string  } 
  | { name: 'upsertPerson', args?: MutationUpsertPersonArgs[] | false, alias?: string  } 
  | { name: 'deletePerson', args?: MutationDeletePersonArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPersons', args?: MutationDeleteManyPersonsArgs[] | false, alias?: string  } 
  | { name: 'createProduct', args?: MutationCreateProductArgs[] | false, alias?: string  } 
  | { name: 'updateProduct', args?: MutationUpdateProductArgs[] | false, alias?: string  } 
  | { name: 'updateManyProducts', args?: MutationUpdateManyProductsArgs[] | false, alias?: string  } 
  | { name: 'upsertProduct', args?: MutationUpsertProductArgs[] | false, alias?: string  } 
  | { name: 'deleteProduct', args?: MutationDeleteProductArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProducts', args?: MutationDeleteManyProductsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createComment'
  | 'updateComment'
  | 'updateManyComments'
  | 'upsertComment'
  | 'deleteComment'
  | 'deleteManyComments'
  | 'createDocument'
  | 'updateDocument'
  | 'updateManyDocuments'
  | 'upsertDocument'
  | 'deleteDocument'
  | 'deleteManyDocuments'
  | 'createNotification'
  | 'updateNotification'
  | 'updateManyNotifications'
  | 'upsertNotification'
  | 'deleteNotification'
  | 'deleteManyNotifications'
  | 'createOrder'
  | 'updateOrder'
  | 'updateManyOrders'
  | 'upsertOrder'
  | 'deleteOrder'
  | 'deleteManyOrders'
  | 'createPerson'
  | 'updatePerson'
  | 'updateManyPersons'
  | 'upsertPerson'
  | 'deletePerson'
  | 'deleteManyPersons'
  | 'createProduct'
  | 'updateProduct'
  | 'updateManyProducts'
  | 'upsertProduct'
  | 'deleteProduct'
  | 'deleteManyProducts'


type MutationCreateCommentArgs =
  | 'data'
type MutationUpdateCommentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCommentsArgs =
  | 'data'
  | 'where'
type MutationUpsertCommentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCommentArgs =
  | 'where'
type MutationDeleteManyCommentsArgs =
  | 'where'
type MutationCreateDocumentArgs =
  | 'data'
type MutationUpdateDocumentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDocumentsArgs =
  | 'data'
  | 'where'
type MutationUpsertDocumentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDocumentArgs =
  | 'where'
type MutationDeleteManyDocumentsArgs =
  | 'where'
type MutationCreateNotificationArgs =
  | 'data'
type MutationUpdateNotificationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNotificationsArgs =
  | 'data'
  | 'where'
type MutationUpsertNotificationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNotificationArgs =
  | 'where'
type MutationDeleteManyNotificationsArgs =
  | 'where'
type MutationCreateOrderArgs =
  | 'data'
type MutationUpdateOrderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrdersArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderArgs =
  | 'where'
type MutationDeleteManyOrdersArgs =
  | 'where'
type MutationCreatePersonArgs =
  | 'data'
type MutationUpdatePersonArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPersonsArgs =
  | 'data'
  | 'where'
type MutationUpsertPersonArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePersonArgs =
  | 'where'
type MutationDeleteManyPersonsArgs =
  | 'where'
type MutationCreateProductArgs =
  | 'data'
type MutationUpdateProductArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductsArgs =
  | 'data'
  | 'where'
type MutationUpsertProductArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductArgs =
  | 'where'
type MutationDeleteManyProductsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createComment: {
    type: 'Comment'
    args: Record<MutationCreateCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  updateComment: {
    type: 'Comment'
    args: Record<MutationUpdateCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentUpdateInput, where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  updateManyComments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentUpdateManyMutationInput, where?: CommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertComment: {
    type: 'Comment'
    args: Record<MutationUpsertCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CommentWhereUniqueInput, create: CommentCreateInput, update: CommentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  deleteComment: {
    type: 'Comment'
    args: Record<MutationDeleteCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  deleteManyComments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDocument: {
    type: 'Document'
    args: Record<MutationCreateDocumentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DocumentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document> | prisma.Document
  }
  updateDocument: {
    type: 'Document'
    args: Record<MutationUpdateDocumentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DocumentUpdateInput, where: DocumentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document | null> | prisma.Document | null
  }
  updateManyDocuments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDocumentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DocumentUpdateManyMutationInput, where?: DocumentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDocument: {
    type: 'Document'
    args: Record<MutationUpsertDocumentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DocumentWhereUniqueInput, create: DocumentCreateInput, update: DocumentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document> | prisma.Document
  }
  deleteDocument: {
    type: 'Document'
    args: Record<MutationDeleteDocumentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DocumentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document | null> | prisma.Document | null
  }
  deleteManyDocuments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDocumentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DocumentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNotification: {
    type: 'Notification'
    args: Record<MutationCreateNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification> | prisma.Notification
  }
  updateNotification: {
    type: 'Notification'
    args: Record<MutationUpdateNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationUpdateInput, where: NotificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  updateManyNotifications: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationUpdateManyMutationInput, where?: NotificationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNotification: {
    type: 'Notification'
    args: Record<MutationUpsertNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NotificationWhereUniqueInput, create: NotificationCreateInput, update: NotificationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification> | prisma.Notification
  }
  deleteNotification: {
    type: 'Notification'
    args: Record<MutationDeleteNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NotificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  deleteManyNotifications: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NotificationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrder: {
    type: 'Order'
    args: Record<MutationCreateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  updateOrder: {
    type: 'Order'
    args: Record<MutationUpdateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateInput, where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updateManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateManyMutationInput, where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrder: {
    type: 'Order'
    args: Record<MutationUpsertOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput, create: OrderCreateInput, update: OrderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  deleteOrder: {
    type: 'Order'
    args: Record<MutationDeleteOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  deleteManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPerson: {
    type: 'Person'
    args: Record<MutationCreatePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  updatePerson: {
    type: 'Person'
    args: Record<MutationUpdatePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonUpdateInput, where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  updateManyPersons: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonUpdateManyMutationInput, where?: PersonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPerson: {
    type: 'Person'
    args: Record<MutationUpsertPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PersonWhereUniqueInput, create: PersonCreateInput, update: PersonUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  deletePerson: {
    type: 'Person'
    args: Record<MutationDeletePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  deleteManyPersons: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PersonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProduct: {
    type: 'Product'
    args: Record<MutationCreateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  updateProduct: {
    type: 'Product'
    args: Record<MutationUpdateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateInput, where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updateManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateManyMutationInput, where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProduct: {
    type: 'Product'
    args: Record<MutationUpsertProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput, create: ProductCreateInput, update: ProductUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  deleteProduct: {
    type: 'Product'
    args: Record<MutationDeleteProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  deleteManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'comment', args?: SubscriptionCommentArgs[] | false, alias?: string  } 
  | { name: 'document', args?: SubscriptionDocumentArgs[] | false, alias?: string  } 
  | { name: 'notification', args?: SubscriptionNotificationArgs[] | false, alias?: string  } 
  | { name: 'order', args?: SubscriptionOrderArgs[] | false, alias?: string  } 
  | { name: 'person', args?: SubscriptionPersonArgs[] | false, alias?: string  } 
  | { name: 'product', args?: SubscriptionProductArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'comment'
  | 'document'
  | 'notification'
  | 'order'
  | 'person'
  | 'product'


type SubscriptionCommentArgs =
  | 'where'
type SubscriptionDocumentArgs =
  | 'where'
type SubscriptionNotificationArgs =
  | 'where'
type SubscriptionOrderArgs =
  | 'where'
type SubscriptionPersonArgs =
  | 'where'
type SubscriptionProductArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  comment: {
    type: 'CommentSubscriptionPayload'
    args: Record<SubscriptionCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CommentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentSubscriptionPayload | null> | prisma.CommentSubscriptionPayload | null
  }
  document: {
    type: 'DocumentSubscriptionPayload'
    args: Record<SubscriptionDocumentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DocumentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentSubscriptionPayload | null> | prisma.DocumentSubscriptionPayload | null
  }
  notification: {
    type: 'NotificationSubscriptionPayload'
    args: Record<SubscriptionNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NotificationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSubscriptionPayload | null> | prisma.NotificationSubscriptionPayload | null
  }
  order: {
    type: 'OrderSubscriptionPayload'
    args: Record<SubscriptionOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderSubscriptionPayload | null> | prisma.OrderSubscriptionPayload | null
  }
  person: {
    type: 'PersonSubscriptionPayload'
    args: Record<SubscriptionPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PersonSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonSubscriptionPayload | null> | prisma.PersonSubscriptionPayload | null
  }
  product: {
    type: 'ProductSubscriptionPayload'
    args: Record<SubscriptionProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductSubscriptionPayload | null> | prisma.ProductSubscriptionPayload | null
  }
}
  

// Types for CommentSubscriptionPayload

type CommentSubscriptionPayloadObject =
  | CommentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CommentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CommentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CommentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentPreviousValues | null> | prisma.CommentPreviousValues | null
  }
}
  

// Types for CommentPreviousValues

type CommentPreviousValuesObject =
  | CommentPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_discussionId', args?: [] | false, alias?: string  } 
  | { name: '_updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'fullSlug', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type CommentPreviousValuesFields =
  | '_id'
  | '_createdAt'
  | '_discussionId'
  | '_updatedAt'
  | 'content'
  | 'fullSlug'
  | 'slug'
  | 'type'



  

export interface CommentPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _discussionId: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fullSlug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'CommentType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentType | null> | prisma.CommentType | null
  }
}
  

// Types for DocumentSubscriptionPayload

type DocumentSubscriptionPayloadObject =
  | DocumentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DocumentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DocumentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Document'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DocumentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Document | null> | prisma.Document | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DocumentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DocumentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentPreviousValues | null> | prisma.DocumentPreviousValues | null
  }
}
  

// Types for DocumentPreviousValues

type DocumentPreviousValuesObject =
  | DocumentPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_publishedAt', args?: [] | false, alias?: string  } 
  | { name: '_updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'subtitle', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type DocumentPreviousValuesFields =
  | '_id'
  | '_createdAt'
  | '_publishedAt'
  | '_updatedAt'
  | 'category'
  | 'content'
  | 'subtitle'
  | 'title'
  | 'type'



  

export interface DocumentPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _publishedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  _updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'DocumentCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentCategory> | prisma.DocumentCategory
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subtitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'DocumentType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DocumentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DocumentType> | prisma.DocumentType
  }
}
  

// Types for NotificationSubscriptionPayload

type NotificationSubscriptionPayloadObject =
  | NotificationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NotificationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NotificationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Notification'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NotificationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationPreviousValues | null> | prisma.NotificationPreviousValues | null
  }
}
  

// Types for NotificationPreviousValues

type NotificationPreviousValuesObject =
  | NotificationPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_sentAt', args?: [] | false, alias?: string  } 
  | { name: 'receiver', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type NotificationPreviousValuesFields =
  | '_id'
  | '_createdAt'
  | '_sentAt'
  | 'receiver'
  | 'message'
  | 'title'



  

export interface NotificationPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _sentAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  receiver: {
    type: 'ID'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderSubscriptionPayload

type OrderSubscriptionPayloadObject =
  | OrderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderPreviousValues | null> | prisma.OrderPreviousValues | null
  }
}
  

// Types for OrderPreviousValues

type OrderPreviousValuesObject =
  | OrderPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type OrderPreviousValuesFields =
  | '_id'
  | 'total'
  | 'status'



  

export interface OrderPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  total: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'OrderStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderStatus> | prisma.OrderStatus
  }
}
  

// Types for PersonSubscriptionPayload

type PersonSubscriptionPayloadObject =
  | PersonSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PersonSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PersonSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PersonPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonPreviousValues | null> | prisma.PersonPreviousValues | null
  }
}
  

// Types for PersonPreviousValues

type PersonPreviousValuesObject =
  | PersonPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_createdAt', args?: [] | false, alias?: string  } 
  | { name: '_updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 

type PersonPreviousValuesFields =
  | '_id'
  | '_createdAt'
  | '_updatedAt'
  | 'password'
  | 'type'
  | 'username'



  

export interface PersonPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'PersonType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonType> | prisma.PersonType
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductSubscriptionPayload

type ProductSubscriptionPayloadObject =
  | ProductSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductPreviousValues | null> | prisma.ProductPreviousValues | null
  }
}
  

// Types for ProductPreviousValues

type ProductPreviousValuesObject =
  | ProductPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: '_handlerId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'details', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'sku', args?: [] | false, alias?: string  } 

type ProductPreviousValuesFields =
  | '_id'
  | '_handlerId'
  | 'name'
  | 'category'
  | 'description'
  | 'details'
  | 'quantity'
  | 'sku'



  

export interface ProductPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _handlerId: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'ProductCategory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductCategory | null> | prisma.ProductCategory | null
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  details: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sku: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface CommentWhereUniqueInput {
  _id?: string | null
  fullSlug?: string | null
}
export type CommentWhereUniqueInputInputObject =
  | Extract<keyof CommentWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'fullSlug', alias?: string  } 
  
export interface PersonWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _createdAt?: string | null
  _createdAt_not?: string | null
  _createdAt_in?: string[]
  _createdAt_not_in?: string[]
  _createdAt_lt?: string | null
  _createdAt_lte?: string | null
  _createdAt_gt?: string | null
  _createdAt_gte?: string | null
  _updatedAt?: string | null
  _updatedAt_not?: string | null
  _updatedAt_in?: string[]
  _updatedAt_not_in?: string[]
  _updatedAt_lt?: string | null
  _updatedAt_lte?: string | null
  _updatedAt_gt?: string | null
  _updatedAt_gte?: string | null
  billing?: BillingWhereInput | null
  connections_some?: PersonWhereInput | null
  contact?: ContactWhereInput | null
  career?: CareerWhereInput | null
  name?: NameWhereInput | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  profile?: ProfileWhereInput | null
  sessions_some?: SessionWhereInput | null
  sessions_every?: SessionRestrictedWhereInput | null
  sessions_none?: SessionRestrictedWhereInput | null
  type?: prisma.PersonType | null
  type_not?: prisma.PersonType | null
  type_in?: prisma.PersonType[]
  type_not_in?: prisma.PersonType[]
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  AND?: PersonWhereInput[]
}
export type PersonWhereInputInputObject =
  | Extract<keyof PersonWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_createdAt', alias?: string  } 
  | { name: '_createdAt_not', alias?: string  } 
  | { name: '_createdAt_in', alias?: string  } 
  | { name: '_createdAt_not_in', alias?: string  } 
  | { name: '_createdAt_lt', alias?: string  } 
  | { name: '_createdAt_lte', alias?: string  } 
  | { name: '_createdAt_gt', alias?: string  } 
  | { name: '_createdAt_gte', alias?: string  } 
  | { name: '_updatedAt', alias?: string  } 
  | { name: '_updatedAt_not', alias?: string  } 
  | { name: '_updatedAt_in', alias?: string  } 
  | { name: '_updatedAt_not_in', alias?: string  } 
  | { name: '_updatedAt_lt', alias?: string  } 
  | { name: '_updatedAt_lte', alias?: string  } 
  | { name: '_updatedAt_gt', alias?: string  } 
  | { name: '_updatedAt_gte', alias?: string  } 
  | { name: 'billing', alias?: string  } 
  | { name: 'connections_some', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'career', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'sessions_some', alias?: string  } 
  | { name: 'sessions_every', alias?: string  } 
  | { name: 'sessions_none', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface BillingWhereInput {
  accounts_some?: AccountWhereInput | null
  accounts_every?: AccountRestrictedWhereInput | null
  accounts_none?: AccountRestrictedWhereInput | null
  cards_some?: CardWhereInput | null
  cards_every?: CardRestrictedWhereInput | null
  cards_none?: CardRestrictedWhereInput | null
  AND?: BillingWhereInput[]
}
export type BillingWhereInputInputObject =
  | Extract<keyof BillingWhereInput, string>
  | { name: 'accounts_some', alias?: string  } 
  | { name: 'accounts_every', alias?: string  } 
  | { name: 'accounts_none', alias?: string  } 
  | { name: 'cards_some', alias?: string  } 
  | { name: 'cards_every', alias?: string  } 
  | { name: 'cards_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AccountWhereInput {
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  routing?: number | null
  routing_not?: number | null
  routing_in?: number[]
  routing_not_in?: number[]
  routing_lt?: number | null
  routing_lte?: number | null
  routing_gt?: number | null
  routing_gte?: number | null
  type?: prisma.AccountType | null
  type_not?: prisma.AccountType | null
  type_in?: prisma.AccountType[]
  type_not_in?: prisma.AccountType[]
  AND?: AccountWhereInput[]
}
export type AccountWhereInputInputObject =
  | Extract<keyof AccountWhereInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'routing', alias?: string  } 
  | { name: 'routing_not', alias?: string  } 
  | { name: 'routing_in', alias?: string  } 
  | { name: 'routing_not_in', alias?: string  } 
  | { name: 'routing_lt', alias?: string  } 
  | { name: 'routing_lte', alias?: string  } 
  | { name: 'routing_gt', alias?: string  } 
  | { name: 'routing_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AccountRestrictedWhereInput {
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  routing?: number | null
  routing_not?: number | null
  routing_in?: number[]
  routing_not_in?: number[]
  routing_lt?: number | null
  routing_lte?: number | null
  routing_gt?: number | null
  routing_gte?: number | null
  type?: prisma.AccountType | null
  type_not?: prisma.AccountType | null
  type_in?: prisma.AccountType[]
  type_not_in?: prisma.AccountType[]
  AND?: AccountRestrictedWhereInput[]
}
export type AccountRestrictedWhereInputInputObject =
  | Extract<keyof AccountRestrictedWhereInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'routing', alias?: string  } 
  | { name: 'routing_not', alias?: string  } 
  | { name: 'routing_in', alias?: string  } 
  | { name: 'routing_not_in', alias?: string  } 
  | { name: 'routing_lt', alias?: string  } 
  | { name: 'routing_lte', alias?: string  } 
  | { name: 'routing_gt', alias?: string  } 
  | { name: 'routing_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CardWhereInput {
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  cvv?: number | null
  cvv_not?: number | null
  cvv_in?: number[]
  cvv_not_in?: number[]
  cvv_lt?: number | null
  cvv_lte?: number | null
  cvv_gt?: number | null
  cvv_gte?: number | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  type?: prisma.CardType | null
  type_not?: prisma.CardType | null
  type_in?: prisma.CardType[]
  type_not_in?: prisma.CardType[]
  AND?: CardWhereInput[]
}
export type CardWhereInputInputObject =
  | Extract<keyof CardWhereInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'cvv', alias?: string  } 
  | { name: 'cvv_not', alias?: string  } 
  | { name: 'cvv_in', alias?: string  } 
  | { name: 'cvv_not_in', alias?: string  } 
  | { name: 'cvv_lt', alias?: string  } 
  | { name: 'cvv_lte', alias?: string  } 
  | { name: 'cvv_gt', alias?: string  } 
  | { name: 'cvv_gte', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CardRestrictedWhereInput {
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  cvv?: number | null
  cvv_not?: number | null
  cvv_in?: number[]
  cvv_not_in?: number[]
  cvv_lt?: number | null
  cvv_lte?: number | null
  cvv_gt?: number | null
  cvv_gte?: number | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  type?: prisma.CardType | null
  type_not?: prisma.CardType | null
  type_in?: prisma.CardType[]
  type_not_in?: prisma.CardType[]
  AND?: CardRestrictedWhereInput[]
}
export type CardRestrictedWhereInputInputObject =
  | Extract<keyof CardRestrictedWhereInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'cvv', alias?: string  } 
  | { name: 'cvv_not', alias?: string  } 
  | { name: 'cvv_in', alias?: string  } 
  | { name: 'cvv_not_in', alias?: string  } 
  | { name: 'cvv_lt', alias?: string  } 
  | { name: 'cvv_lte', alias?: string  } 
  | { name: 'cvv_gt', alias?: string  } 
  | { name: 'cvv_gte', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ContactWhereInput {
  address1?: string | null
  address1_not?: string | null
  address1_in?: string[]
  address1_not_in?: string[]
  address1_lt?: string | null
  address1_lte?: string | null
  address1_gt?: string | null
  address1_gte?: string | null
  address1_contains?: string | null
  address1_not_contains?: string | null
  address1_starts_with?: string | null
  address1_not_starts_with?: string | null
  address1_ends_with?: string | null
  address1_not_ends_with?: string | null
  address2?: string | null
  address2_not?: string | null
  address2_in?: string[]
  address2_not_in?: string[]
  address2_lt?: string | null
  address2_lte?: string | null
  address2_gt?: string | null
  address2_gte?: string | null
  address2_contains?: string | null
  address2_not_contains?: string | null
  address2_starts_with?: string | null
  address2_not_starts_with?: string | null
  address2_ends_with?: string | null
  address2_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  postalCode?: string | null
  postalCode_not?: string | null
  postalCode_in?: string[]
  postalCode_not_in?: string[]
  postalCode_lt?: string | null
  postalCode_lte?: string | null
  postalCode_gt?: string | null
  postalCode_gte?: string | null
  postalCode_contains?: string | null
  postalCode_not_contains?: string | null
  postalCode_starts_with?: string | null
  postalCode_not_starts_with?: string | null
  postalCode_ends_with?: string | null
  postalCode_not_ends_with?: string | null
  AND?: ContactWhereInput[]
}
export type ContactWhereInputInputObject =
  | Extract<keyof ContactWhereInput, string>
  | { name: 'address1', alias?: string  } 
  | { name: 'address1_not', alias?: string  } 
  | { name: 'address1_in', alias?: string  } 
  | { name: 'address1_not_in', alias?: string  } 
  | { name: 'address1_lt', alias?: string  } 
  | { name: 'address1_lte', alias?: string  } 
  | { name: 'address1_gt', alias?: string  } 
  | { name: 'address1_gte', alias?: string  } 
  | { name: 'address1_contains', alias?: string  } 
  | { name: 'address1_not_contains', alias?: string  } 
  | { name: 'address1_starts_with', alias?: string  } 
  | { name: 'address1_not_starts_with', alias?: string  } 
  | { name: 'address1_ends_with', alias?: string  } 
  | { name: 'address1_not_ends_with', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'address2_not', alias?: string  } 
  | { name: 'address2_in', alias?: string  } 
  | { name: 'address2_not_in', alias?: string  } 
  | { name: 'address2_lt', alias?: string  } 
  | { name: 'address2_lte', alias?: string  } 
  | { name: 'address2_gt', alias?: string  } 
  | { name: 'address2_gte', alias?: string  } 
  | { name: 'address2_contains', alias?: string  } 
  | { name: 'address2_not_contains', alias?: string  } 
  | { name: 'address2_starts_with', alias?: string  } 
  | { name: 'address2_not_starts_with', alias?: string  } 
  | { name: 'address2_ends_with', alias?: string  } 
  | { name: 'address2_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'postalCode', alias?: string  } 
  | { name: 'postalCode_not', alias?: string  } 
  | { name: 'postalCode_in', alias?: string  } 
  | { name: 'postalCode_not_in', alias?: string  } 
  | { name: 'postalCode_lt', alias?: string  } 
  | { name: 'postalCode_lte', alias?: string  } 
  | { name: 'postalCode_gt', alias?: string  } 
  | { name: 'postalCode_gte', alias?: string  } 
  | { name: 'postalCode_contains', alias?: string  } 
  | { name: 'postalCode_not_contains', alias?: string  } 
  | { name: 'postalCode_starts_with', alias?: string  } 
  | { name: 'postalCode_not_starts_with', alias?: string  } 
  | { name: 'postalCode_ends_with', alias?: string  } 
  | { name: 'postalCode_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CareerWhereInput {
  company?: string | null
  company_not?: string | null
  company_in?: string[]
  company_not_in?: string[]
  company_lt?: string | null
  company_lte?: string | null
  company_gt?: string | null
  company_gte?: string | null
  company_contains?: string | null
  company_not_contains?: string | null
  company_starts_with?: string | null
  company_not_starts_with?: string | null
  company_ends_with?: string | null
  company_not_ends_with?: string | null
  experience_some?: ExperienceWhereInput | null
  experience_every?: ExperienceRestrictedWhereInput | null
  experience_none?: ExperienceRestrictedWhereInput | null
  position?: string | null
  position_not?: string | null
  position_in?: string[]
  position_not_in?: string[]
  position_lt?: string | null
  position_lte?: string | null
  position_gt?: string | null
  position_gte?: string | null
  position_contains?: string | null
  position_not_contains?: string | null
  position_starts_with?: string | null
  position_not_starts_with?: string | null
  position_ends_with?: string | null
  position_not_ends_with?: string | null
  AND?: CareerWhereInput[]
}
export type CareerWhereInputInputObject =
  | Extract<keyof CareerWhereInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'company_not', alias?: string  } 
  | { name: 'company_in', alias?: string  } 
  | { name: 'company_not_in', alias?: string  } 
  | { name: 'company_lt', alias?: string  } 
  | { name: 'company_lte', alias?: string  } 
  | { name: 'company_gt', alias?: string  } 
  | { name: 'company_gte', alias?: string  } 
  | { name: 'company_contains', alias?: string  } 
  | { name: 'company_not_contains', alias?: string  } 
  | { name: 'company_starts_with', alias?: string  } 
  | { name: 'company_not_starts_with', alias?: string  } 
  | { name: 'company_ends_with', alias?: string  } 
  | { name: 'company_not_ends_with', alias?: string  } 
  | { name: 'experience_some', alias?: string  } 
  | { name: 'experience_every', alias?: string  } 
  | { name: 'experience_none', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'position_lt', alias?: string  } 
  | { name: 'position_lte', alias?: string  } 
  | { name: 'position_gt', alias?: string  } 
  | { name: 'position_gte', alias?: string  } 
  | { name: 'position_contains', alias?: string  } 
  | { name: 'position_not_contains', alias?: string  } 
  | { name: 'position_starts_with', alias?: string  } 
  | { name: 'position_not_starts_with', alias?: string  } 
  | { name: 'position_ends_with', alias?: string  } 
  | { name: 'position_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ExperienceWhereInput {
  company?: string | null
  company_not?: string | null
  company_in?: string[]
  company_not_in?: string[]
  company_lt?: string | null
  company_lte?: string | null
  company_gt?: string | null
  company_gte?: string | null
  company_contains?: string | null
  company_not_contains?: string | null
  company_starts_with?: string | null
  company_not_starts_with?: string | null
  company_ends_with?: string | null
  company_not_ends_with?: string | null
  position?: string | null
  position_not?: string | null
  position_in?: string[]
  position_not_in?: string[]
  position_lt?: string | null
  position_lte?: string | null
  position_gt?: string | null
  position_gte?: string | null
  position_contains?: string | null
  position_not_contains?: string | null
  position_starts_with?: string | null
  position_not_starts_with?: string | null
  position_ends_with?: string | null
  position_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  start?: string | null
  start_not?: string | null
  start_in?: string[]
  start_not_in?: string[]
  start_lt?: string | null
  start_lte?: string | null
  start_gt?: string | null
  start_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  AND?: ExperienceWhereInput[]
}
export type ExperienceWhereInputInputObject =
  | Extract<keyof ExperienceWhereInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'company_not', alias?: string  } 
  | { name: 'company_in', alias?: string  } 
  | { name: 'company_not_in', alias?: string  } 
  | { name: 'company_lt', alias?: string  } 
  | { name: 'company_lte', alias?: string  } 
  | { name: 'company_gt', alias?: string  } 
  | { name: 'company_gte', alias?: string  } 
  | { name: 'company_contains', alias?: string  } 
  | { name: 'company_not_contains', alias?: string  } 
  | { name: 'company_starts_with', alias?: string  } 
  | { name: 'company_not_starts_with', alias?: string  } 
  | { name: 'company_ends_with', alias?: string  } 
  | { name: 'company_not_ends_with', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'position_lt', alias?: string  } 
  | { name: 'position_lte', alias?: string  } 
  | { name: 'position_gt', alias?: string  } 
  | { name: 'position_gte', alias?: string  } 
  | { name: 'position_contains', alias?: string  } 
  | { name: 'position_not_contains', alias?: string  } 
  | { name: 'position_starts_with', alias?: string  } 
  | { name: 'position_not_starts_with', alias?: string  } 
  | { name: 'position_ends_with', alias?: string  } 
  | { name: 'position_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'start_not', alias?: string  } 
  | { name: 'start_in', alias?: string  } 
  | { name: 'start_not_in', alias?: string  } 
  | { name: 'start_lt', alias?: string  } 
  | { name: 'start_lte', alias?: string  } 
  | { name: 'start_gt', alias?: string  } 
  | { name: 'start_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ExperienceRestrictedWhereInput {
  company?: string | null
  company_not?: string | null
  company_in?: string[]
  company_not_in?: string[]
  company_lt?: string | null
  company_lte?: string | null
  company_gt?: string | null
  company_gte?: string | null
  company_contains?: string | null
  company_not_contains?: string | null
  company_starts_with?: string | null
  company_not_starts_with?: string | null
  company_ends_with?: string | null
  company_not_ends_with?: string | null
  position?: string | null
  position_not?: string | null
  position_in?: string[]
  position_not_in?: string[]
  position_lt?: string | null
  position_lte?: string | null
  position_gt?: string | null
  position_gte?: string | null
  position_contains?: string | null
  position_not_contains?: string | null
  position_starts_with?: string | null
  position_not_starts_with?: string | null
  position_ends_with?: string | null
  position_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  start?: string | null
  start_not?: string | null
  start_in?: string[]
  start_not_in?: string[]
  start_lt?: string | null
  start_lte?: string | null
  start_gt?: string | null
  start_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  AND?: ExperienceRestrictedWhereInput[]
}
export type ExperienceRestrictedWhereInputInputObject =
  | Extract<keyof ExperienceRestrictedWhereInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'company_not', alias?: string  } 
  | { name: 'company_in', alias?: string  } 
  | { name: 'company_not_in', alias?: string  } 
  | { name: 'company_lt', alias?: string  } 
  | { name: 'company_lte', alias?: string  } 
  | { name: 'company_gt', alias?: string  } 
  | { name: 'company_gte', alias?: string  } 
  | { name: 'company_contains', alias?: string  } 
  | { name: 'company_not_contains', alias?: string  } 
  | { name: 'company_starts_with', alias?: string  } 
  | { name: 'company_not_starts_with', alias?: string  } 
  | { name: 'company_ends_with', alias?: string  } 
  | { name: 'company_not_ends_with', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'position_lt', alias?: string  } 
  | { name: 'position_lte', alias?: string  } 
  | { name: 'position_gt', alias?: string  } 
  | { name: 'position_gte', alias?: string  } 
  | { name: 'position_contains', alias?: string  } 
  | { name: 'position_not_contains', alias?: string  } 
  | { name: 'position_starts_with', alias?: string  } 
  | { name: 'position_not_starts_with', alias?: string  } 
  | { name: 'position_ends_with', alias?: string  } 
  | { name: 'position_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'start_not', alias?: string  } 
  | { name: 'start_in', alias?: string  } 
  | { name: 'start_not_in', alias?: string  } 
  | { name: 'start_lt', alias?: string  } 
  | { name: 'start_lte', alias?: string  } 
  | { name: 'start_gt', alias?: string  } 
  | { name: 'start_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface NameWhereInput {
  first?: string | null
  first_not?: string | null
  first_in?: string[]
  first_not_in?: string[]
  first_lt?: string | null
  first_lte?: string | null
  first_gt?: string | null
  first_gte?: string | null
  first_contains?: string | null
  first_not_contains?: string | null
  first_starts_with?: string | null
  first_not_starts_with?: string | null
  first_ends_with?: string | null
  first_not_ends_with?: string | null
  last?: string | null
  last_not?: string | null
  last_in?: string[]
  last_not_in?: string[]
  last_lt?: string | null
  last_lte?: string | null
  last_gt?: string | null
  last_gte?: string | null
  last_contains?: string | null
  last_not_contains?: string | null
  last_starts_with?: string | null
  last_not_starts_with?: string | null
  last_ends_with?: string | null
  last_not_ends_with?: string | null
  middle?: string | null
  middle_not?: string | null
  middle_in?: string[]
  middle_not_in?: string[]
  middle_lt?: string | null
  middle_lte?: string | null
  middle_gt?: string | null
  middle_gte?: string | null
  middle_contains?: string | null
  middle_not_contains?: string | null
  middle_starts_with?: string | null
  middle_not_starts_with?: string | null
  middle_ends_with?: string | null
  middle_not_ends_with?: string | null
  preferred?: string | null
  preferred_not?: string | null
  preferred_in?: string[]
  preferred_not_in?: string[]
  preferred_lt?: string | null
  preferred_lte?: string | null
  preferred_gt?: string | null
  preferred_gte?: string | null
  preferred_contains?: string | null
  preferred_not_contains?: string | null
  preferred_starts_with?: string | null
  preferred_not_starts_with?: string | null
  preferred_ends_with?: string | null
  preferred_not_ends_with?: string | null
  AND?: NameWhereInput[]
}
export type NameWhereInputInputObject =
  | Extract<keyof NameWhereInput, string>
  | { name: 'first', alias?: string  } 
  | { name: 'first_not', alias?: string  } 
  | { name: 'first_in', alias?: string  } 
  | { name: 'first_not_in', alias?: string  } 
  | { name: 'first_lt', alias?: string  } 
  | { name: 'first_lte', alias?: string  } 
  | { name: 'first_gt', alias?: string  } 
  | { name: 'first_gte', alias?: string  } 
  | { name: 'first_contains', alias?: string  } 
  | { name: 'first_not_contains', alias?: string  } 
  | { name: 'first_starts_with', alias?: string  } 
  | { name: 'first_not_starts_with', alias?: string  } 
  | { name: 'first_ends_with', alias?: string  } 
  | { name: 'first_not_ends_with', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'last_not', alias?: string  } 
  | { name: 'last_in', alias?: string  } 
  | { name: 'last_not_in', alias?: string  } 
  | { name: 'last_lt', alias?: string  } 
  | { name: 'last_lte', alias?: string  } 
  | { name: 'last_gt', alias?: string  } 
  | { name: 'last_gte', alias?: string  } 
  | { name: 'last_contains', alias?: string  } 
  | { name: 'last_not_contains', alias?: string  } 
  | { name: 'last_starts_with', alias?: string  } 
  | { name: 'last_not_starts_with', alias?: string  } 
  | { name: 'last_ends_with', alias?: string  } 
  | { name: 'last_not_ends_with', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'middle_not', alias?: string  } 
  | { name: 'middle_in', alias?: string  } 
  | { name: 'middle_not_in', alias?: string  } 
  | { name: 'middle_lt', alias?: string  } 
  | { name: 'middle_lte', alias?: string  } 
  | { name: 'middle_gt', alias?: string  } 
  | { name: 'middle_gte', alias?: string  } 
  | { name: 'middle_contains', alias?: string  } 
  | { name: 'middle_not_contains', alias?: string  } 
  | { name: 'middle_starts_with', alias?: string  } 
  | { name: 'middle_not_starts_with', alias?: string  } 
  | { name: 'middle_ends_with', alias?: string  } 
  | { name: 'middle_not_ends_with', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  | { name: 'preferred_not', alias?: string  } 
  | { name: 'preferred_in', alias?: string  } 
  | { name: 'preferred_not_in', alias?: string  } 
  | { name: 'preferred_lt', alias?: string  } 
  | { name: 'preferred_lte', alias?: string  } 
  | { name: 'preferred_gt', alias?: string  } 
  | { name: 'preferred_gte', alias?: string  } 
  | { name: 'preferred_contains', alias?: string  } 
  | { name: 'preferred_not_contains', alias?: string  } 
  | { name: 'preferred_starts_with', alias?: string  } 
  | { name: 'preferred_not_starts_with', alias?: string  } 
  | { name: 'preferred_ends_with', alias?: string  } 
  | { name: 'preferred_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ProfileWhereInput {
  avatar?: string | null
  avatar_not?: string | null
  avatar_in?: string[]
  avatar_not_in?: string[]
  avatar_lt?: string | null
  avatar_lte?: string | null
  avatar_gt?: string | null
  avatar_gte?: string | null
  avatar_contains?: string | null
  avatar_not_contains?: string | null
  avatar_starts_with?: string | null
  avatar_not_starts_with?: string | null
  avatar_ends_with?: string | null
  avatar_not_ends_with?: string | null
  gender?: prisma.Gender | null
  gender_not?: prisma.Gender | null
  gender_in?: prisma.Gender[]
  gender_not_in?: prisma.Gender[]
  headline?: string | null
  headline_not?: string | null
  headline_in?: string[]
  headline_not_in?: string[]
  headline_lt?: string | null
  headline_lte?: string | null
  headline_gt?: string | null
  headline_gte?: string | null
  headline_contains?: string | null
  headline_not_contains?: string | null
  headline_starts_with?: string | null
  headline_not_starts_with?: string | null
  headline_ends_with?: string | null
  headline_not_ends_with?: string | null
  AND?: ProfileWhereInput[]
}
export type ProfileWhereInputInputObject =
  | Extract<keyof ProfileWhereInput, string>
  | { name: 'avatar', alias?: string  } 
  | { name: 'avatar_not', alias?: string  } 
  | { name: 'avatar_in', alias?: string  } 
  | { name: 'avatar_not_in', alias?: string  } 
  | { name: 'avatar_lt', alias?: string  } 
  | { name: 'avatar_lte', alias?: string  } 
  | { name: 'avatar_gt', alias?: string  } 
  | { name: 'avatar_gte', alias?: string  } 
  | { name: 'avatar_contains', alias?: string  } 
  | { name: 'avatar_not_contains', alias?: string  } 
  | { name: 'avatar_starts_with', alias?: string  } 
  | { name: 'avatar_not_starts_with', alias?: string  } 
  | { name: 'avatar_ends_with', alias?: string  } 
  | { name: 'avatar_not_ends_with', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'headline', alias?: string  } 
  | { name: 'headline_not', alias?: string  } 
  | { name: 'headline_in', alias?: string  } 
  | { name: 'headline_not_in', alias?: string  } 
  | { name: 'headline_lt', alias?: string  } 
  | { name: 'headline_lte', alias?: string  } 
  | { name: 'headline_gt', alias?: string  } 
  | { name: 'headline_gte', alias?: string  } 
  | { name: 'headline_contains', alias?: string  } 
  | { name: 'headline_not_contains', alias?: string  } 
  | { name: 'headline_starts_with', alias?: string  } 
  | { name: 'headline_not_starts_with', alias?: string  } 
  | { name: 'headline_ends_with', alias?: string  } 
  | { name: 'headline_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SessionWhereInput {
  device?: string | null
  device_not?: string | null
  device_in?: string[]
  device_not_in?: string[]
  device_lt?: string | null
  device_lte?: string | null
  device_gt?: string | null
  device_gte?: string | null
  device_contains?: string | null
  device_not_contains?: string | null
  device_starts_with?: string | null
  device_not_starts_with?: string | null
  device_ends_with?: string | null
  device_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  token?: string | null
  token_not?: string | null
  token_in?: string[]
  token_not_in?: string[]
  token_lt?: string | null
  token_lte?: string | null
  token_gt?: string | null
  token_gte?: string | null
  token_contains?: string | null
  token_not_contains?: string | null
  token_starts_with?: string | null
  token_not_starts_with?: string | null
  token_ends_with?: string | null
  token_not_ends_with?: string | null
  AND?: SessionWhereInput[]
}
export type SessionWhereInputInputObject =
  | Extract<keyof SessionWhereInput, string>
  | { name: 'device', alias?: string  } 
  | { name: 'device_not', alias?: string  } 
  | { name: 'device_in', alias?: string  } 
  | { name: 'device_not_in', alias?: string  } 
  | { name: 'device_lt', alias?: string  } 
  | { name: 'device_lte', alias?: string  } 
  | { name: 'device_gt', alias?: string  } 
  | { name: 'device_gte', alias?: string  } 
  | { name: 'device_contains', alias?: string  } 
  | { name: 'device_not_contains', alias?: string  } 
  | { name: 'device_starts_with', alias?: string  } 
  | { name: 'device_not_starts_with', alias?: string  } 
  | { name: 'device_ends_with', alias?: string  } 
  | { name: 'device_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'token_not', alias?: string  } 
  | { name: 'token_in', alias?: string  } 
  | { name: 'token_not_in', alias?: string  } 
  | { name: 'token_lt', alias?: string  } 
  | { name: 'token_lte', alias?: string  } 
  | { name: 'token_gt', alias?: string  } 
  | { name: 'token_gte', alias?: string  } 
  | { name: 'token_contains', alias?: string  } 
  | { name: 'token_not_contains', alias?: string  } 
  | { name: 'token_starts_with', alias?: string  } 
  | { name: 'token_not_starts_with', alias?: string  } 
  | { name: 'token_ends_with', alias?: string  } 
  | { name: 'token_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SessionRestrictedWhereInput {
  device?: string | null
  device_not?: string | null
  device_in?: string[]
  device_not_in?: string[]
  device_lt?: string | null
  device_lte?: string | null
  device_gt?: string | null
  device_gte?: string | null
  device_contains?: string | null
  device_not_contains?: string | null
  device_starts_with?: string | null
  device_not_starts_with?: string | null
  device_ends_with?: string | null
  device_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  token?: string | null
  token_not?: string | null
  token_in?: string[]
  token_not_in?: string[]
  token_lt?: string | null
  token_lte?: string | null
  token_gt?: string | null
  token_gte?: string | null
  token_contains?: string | null
  token_not_contains?: string | null
  token_starts_with?: string | null
  token_not_starts_with?: string | null
  token_ends_with?: string | null
  token_not_ends_with?: string | null
  AND?: SessionRestrictedWhereInput[]
}
export type SessionRestrictedWhereInputInputObject =
  | Extract<keyof SessionRestrictedWhereInput, string>
  | { name: 'device', alias?: string  } 
  | { name: 'device_not', alias?: string  } 
  | { name: 'device_in', alias?: string  } 
  | { name: 'device_not_in', alias?: string  } 
  | { name: 'device_lt', alias?: string  } 
  | { name: 'device_lte', alias?: string  } 
  | { name: 'device_gt', alias?: string  } 
  | { name: 'device_gte', alias?: string  } 
  | { name: 'device_contains', alias?: string  } 
  | { name: 'device_not_contains', alias?: string  } 
  | { name: 'device_starts_with', alias?: string  } 
  | { name: 'device_not_starts_with', alias?: string  } 
  | { name: 'device_ends_with', alias?: string  } 
  | { name: 'device_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'token_not', alias?: string  } 
  | { name: 'token_in', alias?: string  } 
  | { name: 'token_not_in', alias?: string  } 
  | { name: 'token_lt', alias?: string  } 
  | { name: 'token_lte', alias?: string  } 
  | { name: 'token_gt', alias?: string  } 
  | { name: 'token_gte', alias?: string  } 
  | { name: 'token_contains', alias?: string  } 
  | { name: 'token_not_contains', alias?: string  } 
  | { name: 'token_starts_with', alias?: string  } 
  | { name: 'token_not_starts_with', alias?: string  } 
  | { name: 'token_ends_with', alias?: string  } 
  | { name: 'token_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CommentWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _createdAt?: string | null
  _createdAt_not?: string | null
  _createdAt_in?: string[]
  _createdAt_not_in?: string[]
  _createdAt_lt?: string | null
  _createdAt_lte?: string | null
  _createdAt_gt?: string | null
  _createdAt_gte?: string | null
  _discussionId?: string | null
  _discussionId_not?: string | null
  _discussionId_in?: string[]
  _discussionId_not_in?: string[]
  _discussionId_lt?: string | null
  _discussionId_lte?: string | null
  _discussionId_gt?: string | null
  _discussionId_gte?: string | null
  _discussionId_contains?: string | null
  _discussionId_not_contains?: string | null
  _discussionId_starts_with?: string | null
  _discussionId_not_starts_with?: string | null
  _discussionId_ends_with?: string | null
  _discussionId_not_ends_with?: string | null
  _parentId?: CommentWhereInput | null
  _updatedAt?: string | null
  _updatedAt_not?: string | null
  _updatedAt_in?: string[]
  _updatedAt_not_in?: string[]
  _updatedAt_lt?: string | null
  _updatedAt_lte?: string | null
  _updatedAt_gt?: string | null
  _updatedAt_gte?: string | null
  author?: PersonWhereInput | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  fullSlug?: string | null
  fullSlug_not?: string | null
  fullSlug_in?: string[]
  fullSlug_not_in?: string[]
  fullSlug_lt?: string | null
  fullSlug_lte?: string | null
  fullSlug_gt?: string | null
  fullSlug_gte?: string | null
  fullSlug_contains?: string | null
  fullSlug_not_contains?: string | null
  fullSlug_starts_with?: string | null
  fullSlug_not_starts_with?: string | null
  fullSlug_ends_with?: string | null
  fullSlug_not_ends_with?: string | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  type?: prisma.CommentType | null
  type_not?: prisma.CommentType | null
  type_in?: prisma.CommentType[]
  type_not_in?: prisma.CommentType[]
  AND?: CommentWhereInput[]
}
export type CommentWhereInputInputObject =
  | Extract<keyof CommentWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_createdAt', alias?: string  } 
  | { name: '_createdAt_not', alias?: string  } 
  | { name: '_createdAt_in', alias?: string  } 
  | { name: '_createdAt_not_in', alias?: string  } 
  | { name: '_createdAt_lt', alias?: string  } 
  | { name: '_createdAt_lte', alias?: string  } 
  | { name: '_createdAt_gt', alias?: string  } 
  | { name: '_createdAt_gte', alias?: string  } 
  | { name: '_discussionId', alias?: string  } 
  | { name: '_discussionId_not', alias?: string  } 
  | { name: '_discussionId_in', alias?: string  } 
  | { name: '_discussionId_not_in', alias?: string  } 
  | { name: '_discussionId_lt', alias?: string  } 
  | { name: '_discussionId_lte', alias?: string  } 
  | { name: '_discussionId_gt', alias?: string  } 
  | { name: '_discussionId_gte', alias?: string  } 
  | { name: '_discussionId_contains', alias?: string  } 
  | { name: '_discussionId_not_contains', alias?: string  } 
  | { name: '_discussionId_starts_with', alias?: string  } 
  | { name: '_discussionId_not_starts_with', alias?: string  } 
  | { name: '_discussionId_ends_with', alias?: string  } 
  | { name: '_discussionId_not_ends_with', alias?: string  } 
  | { name: '_parentId', alias?: string  } 
  | { name: '_updatedAt', alias?: string  } 
  | { name: '_updatedAt_not', alias?: string  } 
  | { name: '_updatedAt_in', alias?: string  } 
  | { name: '_updatedAt_not_in', alias?: string  } 
  | { name: '_updatedAt_lt', alias?: string  } 
  | { name: '_updatedAt_lte', alias?: string  } 
  | { name: '_updatedAt_gt', alias?: string  } 
  | { name: '_updatedAt_gte', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'fullSlug', alias?: string  } 
  | { name: 'fullSlug_not', alias?: string  } 
  | { name: 'fullSlug_in', alias?: string  } 
  | { name: 'fullSlug_not_in', alias?: string  } 
  | { name: 'fullSlug_lt', alias?: string  } 
  | { name: 'fullSlug_lte', alias?: string  } 
  | { name: 'fullSlug_gt', alias?: string  } 
  | { name: 'fullSlug_gte', alias?: string  } 
  | { name: 'fullSlug_contains', alias?: string  } 
  | { name: 'fullSlug_not_contains', alias?: string  } 
  | { name: 'fullSlug_starts_with', alias?: string  } 
  | { name: 'fullSlug_not_starts_with', alias?: string  } 
  | { name: 'fullSlug_ends_with', alias?: string  } 
  | { name: 'fullSlug_not_ends_with', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DocumentWhereUniqueInput {
  _id?: string | null
  title?: string | null
}
export type DocumentWhereUniqueInputInputObject =
  | Extract<keyof DocumentWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface DocumentWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _createdAt?: string | null
  _createdAt_not?: string | null
  _createdAt_in?: string[]
  _createdAt_not_in?: string[]
  _createdAt_lt?: string | null
  _createdAt_lte?: string | null
  _createdAt_gt?: string | null
  _createdAt_gte?: string | null
  _publishedAt?: string | null
  _publishedAt_not?: string | null
  _publishedAt_in?: string[]
  _publishedAt_not_in?: string[]
  _publishedAt_lt?: string | null
  _publishedAt_lte?: string | null
  _publishedAt_gt?: string | null
  _publishedAt_gte?: string | null
  _updatedAt?: string | null
  _updatedAt_not?: string | null
  _updatedAt_in?: string[]
  _updatedAt_not_in?: string[]
  _updatedAt_lt?: string | null
  _updatedAt_lte?: string | null
  _updatedAt_gt?: string | null
  _updatedAt_gte?: string | null
  author?: PersonWhereInput | null
  category?: prisma.DocumentCategory | null
  category_not?: prisma.DocumentCategory | null
  category_in?: prisma.DocumentCategory[]
  category_not_in?: prisma.DocumentCategory[]
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  subtitle?: string | null
  subtitle_not?: string | null
  subtitle_in?: string[]
  subtitle_not_in?: string[]
  subtitle_lt?: string | null
  subtitle_lte?: string | null
  subtitle_gt?: string | null
  subtitle_gte?: string | null
  subtitle_contains?: string | null
  subtitle_not_contains?: string | null
  subtitle_starts_with?: string | null
  subtitle_not_starts_with?: string | null
  subtitle_ends_with?: string | null
  subtitle_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  type?: prisma.DocumentType | null
  type_not?: prisma.DocumentType | null
  type_in?: prisma.DocumentType[]
  type_not_in?: prisma.DocumentType[]
  AND?: DocumentWhereInput[]
}
export type DocumentWhereInputInputObject =
  | Extract<keyof DocumentWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_createdAt', alias?: string  } 
  | { name: '_createdAt_not', alias?: string  } 
  | { name: '_createdAt_in', alias?: string  } 
  | { name: '_createdAt_not_in', alias?: string  } 
  | { name: '_createdAt_lt', alias?: string  } 
  | { name: '_createdAt_lte', alias?: string  } 
  | { name: '_createdAt_gt', alias?: string  } 
  | { name: '_createdAt_gte', alias?: string  } 
  | { name: '_publishedAt', alias?: string  } 
  | { name: '_publishedAt_not', alias?: string  } 
  | { name: '_publishedAt_in', alias?: string  } 
  | { name: '_publishedAt_not_in', alias?: string  } 
  | { name: '_publishedAt_lt', alias?: string  } 
  | { name: '_publishedAt_lte', alias?: string  } 
  | { name: '_publishedAt_gt', alias?: string  } 
  | { name: '_publishedAt_gte', alias?: string  } 
  | { name: '_updatedAt', alias?: string  } 
  | { name: '_updatedAt_not', alias?: string  } 
  | { name: '_updatedAt_in', alias?: string  } 
  | { name: '_updatedAt_not_in', alias?: string  } 
  | { name: '_updatedAt_lt', alias?: string  } 
  | { name: '_updatedAt_lte', alias?: string  } 
  | { name: '_updatedAt_gt', alias?: string  } 
  | { name: '_updatedAt_gte', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'subtitle', alias?: string  } 
  | { name: 'subtitle_not', alias?: string  } 
  | { name: 'subtitle_in', alias?: string  } 
  | { name: 'subtitle_not_in', alias?: string  } 
  | { name: 'subtitle_lt', alias?: string  } 
  | { name: 'subtitle_lte', alias?: string  } 
  | { name: 'subtitle_gt', alias?: string  } 
  | { name: 'subtitle_gte', alias?: string  } 
  | { name: 'subtitle_contains', alias?: string  } 
  | { name: 'subtitle_not_contains', alias?: string  } 
  | { name: 'subtitle_starts_with', alias?: string  } 
  | { name: 'subtitle_not_starts_with', alias?: string  } 
  | { name: 'subtitle_ends_with', alias?: string  } 
  | { name: 'subtitle_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface NotificationWhereUniqueInput {
  _id?: string | null
}
export type NotificationWhereUniqueInputInputObject =
  | Extract<keyof NotificationWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  
export interface NotificationWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _createdAt?: string | null
  _createdAt_not?: string | null
  _createdAt_in?: string[]
  _createdAt_not_in?: string[]
  _createdAt_lt?: string | null
  _createdAt_lte?: string | null
  _createdAt_gt?: string | null
  _createdAt_gte?: string | null
  _sentAt?: string | null
  _sentAt_not?: string | null
  _sentAt_in?: string[]
  _sentAt_not_in?: string[]
  _sentAt_lt?: string | null
  _sentAt_lte?: string | null
  _sentAt_gt?: string | null
  _sentAt_gte?: string | null
  message?: string | null
  message_not?: string | null
  message_in?: string[]
  message_not_in?: string[]
  message_lt?: string | null
  message_lte?: string | null
  message_gt?: string | null
  message_gte?: string | null
  message_contains?: string | null
  message_not_contains?: string | null
  message_starts_with?: string | null
  message_not_starts_with?: string | null
  message_ends_with?: string | null
  message_not_ends_with?: string | null
  receivedBy_some?: ReceivedByWhereInput | null
  receivedBy_every?: ReceivedByRestrictedWhereInput | null
  receivedBy_none?: ReceivedByRestrictedWhereInput | null
  sender?: SenderWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: NotificationWhereInput[]
}
export type NotificationWhereInputInputObject =
  | Extract<keyof NotificationWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_createdAt', alias?: string  } 
  | { name: '_createdAt_not', alias?: string  } 
  | { name: '_createdAt_in', alias?: string  } 
  | { name: '_createdAt_not_in', alias?: string  } 
  | { name: '_createdAt_lt', alias?: string  } 
  | { name: '_createdAt_lte', alias?: string  } 
  | { name: '_createdAt_gt', alias?: string  } 
  | { name: '_createdAt_gte', alias?: string  } 
  | { name: '_sentAt', alias?: string  } 
  | { name: '_sentAt_not', alias?: string  } 
  | { name: '_sentAt_in', alias?: string  } 
  | { name: '_sentAt_not_in', alias?: string  } 
  | { name: '_sentAt_lt', alias?: string  } 
  | { name: '_sentAt_lte', alias?: string  } 
  | { name: '_sentAt_gt', alias?: string  } 
  | { name: '_sentAt_gte', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'message_not', alias?: string  } 
  | { name: 'message_in', alias?: string  } 
  | { name: 'message_not_in', alias?: string  } 
  | { name: 'message_lt', alias?: string  } 
  | { name: 'message_lte', alias?: string  } 
  | { name: 'message_gt', alias?: string  } 
  | { name: 'message_gte', alias?: string  } 
  | { name: 'message_contains', alias?: string  } 
  | { name: 'message_not_contains', alias?: string  } 
  | { name: 'message_starts_with', alias?: string  } 
  | { name: 'message_not_starts_with', alias?: string  } 
  | { name: 'message_ends_with', alias?: string  } 
  | { name: 'message_not_ends_with', alias?: string  } 
  | { name: 'receivedBy_some', alias?: string  } 
  | { name: 'receivedBy_every', alias?: string  } 
  | { name: 'receivedBy_none', alias?: string  } 
  | { name: 'sender', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ReceivedByWhereInput {
  _personId?: PersonWhereInput | null
  _receivedAt?: string | null
  _receivedAt_not?: string | null
  _receivedAt_in?: string[]
  _receivedAt_not_in?: string[]
  _receivedAt_lt?: string | null
  _receivedAt_lte?: string | null
  _receivedAt_gt?: string | null
  _receivedAt_gte?: string | null
  _readAt?: string | null
  _readAt_not?: string | null
  _readAt_in?: string[]
  _readAt_not_in?: string[]
  _readAt_lt?: string | null
  _readAt_lte?: string | null
  _readAt_gt?: string | null
  _readAt_gte?: string | null
  AND?: ReceivedByWhereInput[]
}
export type ReceivedByWhereInputInputObject =
  | Extract<keyof ReceivedByWhereInput, string>
  | { name: '_personId', alias?: string  } 
  | { name: '_receivedAt', alias?: string  } 
  | { name: '_receivedAt_not', alias?: string  } 
  | { name: '_receivedAt_in', alias?: string  } 
  | { name: '_receivedAt_not_in', alias?: string  } 
  | { name: '_receivedAt_lt', alias?: string  } 
  | { name: '_receivedAt_lte', alias?: string  } 
  | { name: '_receivedAt_gt', alias?: string  } 
  | { name: '_receivedAt_gte', alias?: string  } 
  | { name: '_readAt', alias?: string  } 
  | { name: '_readAt_not', alias?: string  } 
  | { name: '_readAt_in', alias?: string  } 
  | { name: '_readAt_not_in', alias?: string  } 
  | { name: '_readAt_lt', alias?: string  } 
  | { name: '_readAt_lte', alias?: string  } 
  | { name: '_readAt_gt', alias?: string  } 
  | { name: '_readAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ReceivedByRestrictedWhereInput {
  _receivedAt?: string | null
  _receivedAt_not?: string | null
  _receivedAt_in?: string[]
  _receivedAt_not_in?: string[]
  _receivedAt_lt?: string | null
  _receivedAt_lte?: string | null
  _receivedAt_gt?: string | null
  _receivedAt_gte?: string | null
  _readAt?: string | null
  _readAt_not?: string | null
  _readAt_in?: string[]
  _readAt_not_in?: string[]
  _readAt_lt?: string | null
  _readAt_lte?: string | null
  _readAt_gt?: string | null
  _readAt_gte?: string | null
  AND?: ReceivedByRestrictedWhereInput[]
}
export type ReceivedByRestrictedWhereInputInputObject =
  | Extract<keyof ReceivedByRestrictedWhereInput, string>
  | { name: '_receivedAt', alias?: string  } 
  | { name: '_receivedAt_not', alias?: string  } 
  | { name: '_receivedAt_in', alias?: string  } 
  | { name: '_receivedAt_not_in', alias?: string  } 
  | { name: '_receivedAt_lt', alias?: string  } 
  | { name: '_receivedAt_lte', alias?: string  } 
  | { name: '_receivedAt_gt', alias?: string  } 
  | { name: '_receivedAt_gte', alias?: string  } 
  | { name: '_readAt', alias?: string  } 
  | { name: '_readAt_not', alias?: string  } 
  | { name: '_readAt_in', alias?: string  } 
  | { name: '_readAt_not_in', alias?: string  } 
  | { name: '_readAt_lt', alias?: string  } 
  | { name: '_readAt_lte', alias?: string  } 
  | { name: '_readAt_gt', alias?: string  } 
  | { name: '_readAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SenderWhereInput {
  _personId?: PersonWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  type?: prisma.SenderType | null
  type_not?: prisma.SenderType | null
  type_in?: prisma.SenderType[]
  type_not_in?: prisma.SenderType[]
  AND?: SenderWhereInput[]
}
export type SenderWhereInputInputObject =
  | Extract<keyof SenderWhereInput, string>
  | { name: '_personId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface OrderWhereUniqueInput {
  _id?: string | null
}
export type OrderWhereUniqueInputInputObject =
  | Extract<keyof OrderWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  
export interface ProductWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _handlerId?: string | null
  _handlerId_not?: string | null
  _handlerId_in?: string[]
  _handlerId_not_in?: string[]
  _handlerId_lt?: string | null
  _handlerId_lte?: string | null
  _handlerId_gt?: string | null
  _handlerId_gte?: string | null
  _handlerId_contains?: string | null
  _handlerId_not_contains?: string | null
  _handlerId_starts_with?: string | null
  _handlerId_not_starts_with?: string | null
  _handlerId_ends_with?: string | null
  _handlerId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  category?: prisma.ProductCategory | null
  category_not?: prisma.ProductCategory | null
  category_in?: prisma.ProductCategory[]
  category_not_in?: prisma.ProductCategory[]
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  manufacturer?: ManufacturerWhereInput | null
  price?: PriceWhereInput | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  shipping?: ShippingWhereInput | null
  sku?: string | null
  sku_not?: string | null
  sku_in?: string[]
  sku_not_in?: string[]
  sku_lt?: string | null
  sku_lte?: string | null
  sku_gt?: string | null
  sku_gte?: string | null
  sku_contains?: string | null
  sku_not_contains?: string | null
  sku_starts_with?: string | null
  sku_not_starts_with?: string | null
  sku_ends_with?: string | null
  sku_not_ends_with?: string | null
  AND?: ProductWhereInput[]
}
export type ProductWhereInputInputObject =
  | Extract<keyof ProductWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_handlerId', alias?: string  } 
  | { name: '_handlerId_not', alias?: string  } 
  | { name: '_handlerId_in', alias?: string  } 
  | { name: '_handlerId_not_in', alias?: string  } 
  | { name: '_handlerId_lt', alias?: string  } 
  | { name: '_handlerId_lte', alias?: string  } 
  | { name: '_handlerId_gt', alias?: string  } 
  | { name: '_handlerId_gte', alias?: string  } 
  | { name: '_handlerId_contains', alias?: string  } 
  | { name: '_handlerId_not_contains', alias?: string  } 
  | { name: '_handlerId_starts_with', alias?: string  } 
  | { name: '_handlerId_not_starts_with', alias?: string  } 
  | { name: '_handlerId_ends_with', alias?: string  } 
  | { name: '_handlerId_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'manufacturer', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'shipping', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'sku_not', alias?: string  } 
  | { name: 'sku_in', alias?: string  } 
  | { name: 'sku_not_in', alias?: string  } 
  | { name: 'sku_lt', alias?: string  } 
  | { name: 'sku_lte', alias?: string  } 
  | { name: 'sku_gt', alias?: string  } 
  | { name: 'sku_gte', alias?: string  } 
  | { name: 'sku_contains', alias?: string  } 
  | { name: 'sku_not_contains', alias?: string  } 
  | { name: 'sku_starts_with', alias?: string  } 
  | { name: 'sku_not_starts_with', alias?: string  } 
  | { name: 'sku_ends_with', alias?: string  } 
  | { name: 'sku_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ManufacturerWhereInput {
  model?: string | null
  model_not?: string | null
  model_in?: string[]
  model_not_in?: string[]
  model_lt?: string | null
  model_lte?: string | null
  model_gt?: string | null
  model_gte?: string | null
  model_contains?: string | null
  model_not_contains?: string | null
  model_starts_with?: string | null
  model_not_starts_with?: string | null
  model_ends_with?: string | null
  model_not_ends_with?: string | null
  releaseDate?: string | null
  releaseDate_not?: string | null
  releaseDate_in?: string[]
  releaseDate_not_in?: string[]
  releaseDate_lt?: string | null
  releaseDate_lte?: string | null
  releaseDate_gt?: string | null
  releaseDate_gte?: string | null
  AND?: ManufacturerWhereInput[]
}
export type ManufacturerWhereInputInputObject =
  | Extract<keyof ManufacturerWhereInput, string>
  | { name: 'model', alias?: string  } 
  | { name: 'model_not', alias?: string  } 
  | { name: 'model_in', alias?: string  } 
  | { name: 'model_not_in', alias?: string  } 
  | { name: 'model_lt', alias?: string  } 
  | { name: 'model_lte', alias?: string  } 
  | { name: 'model_gt', alias?: string  } 
  | { name: 'model_gte', alias?: string  } 
  | { name: 'model_contains', alias?: string  } 
  | { name: 'model_not_contains', alias?: string  } 
  | { name: 'model_starts_with', alias?: string  } 
  | { name: 'model_not_starts_with', alias?: string  } 
  | { name: 'model_ends_with', alias?: string  } 
  | { name: 'model_not_ends_with', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'releaseDate_not', alias?: string  } 
  | { name: 'releaseDate_in', alias?: string  } 
  | { name: 'releaseDate_not_in', alias?: string  } 
  | { name: 'releaseDate_lt', alias?: string  } 
  | { name: 'releaseDate_lte', alias?: string  } 
  | { name: 'releaseDate_gt', alias?: string  } 
  | { name: 'releaseDate_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface PriceWhereInput {
  list?: number | null
  list_not?: number | null
  list_in?: number[]
  list_not_in?: number[]
  list_lt?: number | null
  list_lte?: number | null
  list_gt?: number | null
  list_gte?: number | null
  retail?: number | null
  retail_not?: number | null
  retail_in?: number[]
  retail_not_in?: number[]
  retail_lt?: number | null
  retail_lte?: number | null
  retail_gt?: number | null
  retail_gte?: number | null
  savings?: number | null
  savings_not?: number | null
  savings_in?: number[]
  savings_not_in?: number[]
  savings_lt?: number | null
  savings_lte?: number | null
  savings_gt?: number | null
  savings_gte?: number | null
  savingsPct?: number | null
  savingsPct_not?: number | null
  savingsPct_in?: number[]
  savingsPct_not_in?: number[]
  savingsPct_lt?: number | null
  savingsPct_lte?: number | null
  savingsPct_gt?: number | null
  savingsPct_gte?: number | null
  AND?: PriceWhereInput[]
}
export type PriceWhereInputInputObject =
  | Extract<keyof PriceWhereInput, string>
  | { name: 'list', alias?: string  } 
  | { name: 'list_not', alias?: string  } 
  | { name: 'list_in', alias?: string  } 
  | { name: 'list_not_in', alias?: string  } 
  | { name: 'list_lt', alias?: string  } 
  | { name: 'list_lte', alias?: string  } 
  | { name: 'list_gt', alias?: string  } 
  | { name: 'list_gte', alias?: string  } 
  | { name: 'retail', alias?: string  } 
  | { name: 'retail_not', alias?: string  } 
  | { name: 'retail_in', alias?: string  } 
  | { name: 'retail_not_in', alias?: string  } 
  | { name: 'retail_lt', alias?: string  } 
  | { name: 'retail_lte', alias?: string  } 
  | { name: 'retail_gt', alias?: string  } 
  | { name: 'retail_gte', alias?: string  } 
  | { name: 'savings', alias?: string  } 
  | { name: 'savings_not', alias?: string  } 
  | { name: 'savings_in', alias?: string  } 
  | { name: 'savings_not_in', alias?: string  } 
  | { name: 'savings_lt', alias?: string  } 
  | { name: 'savings_lte', alias?: string  } 
  | { name: 'savings_gt', alias?: string  } 
  | { name: 'savings_gte', alias?: string  } 
  | { name: 'savingsPct', alias?: string  } 
  | { name: 'savingsPct_not', alias?: string  } 
  | { name: 'savingsPct_in', alias?: string  } 
  | { name: 'savingsPct_not_in', alias?: string  } 
  | { name: 'savingsPct_lt', alias?: string  } 
  | { name: 'savingsPct_lte', alias?: string  } 
  | { name: 'savingsPct_gt', alias?: string  } 
  | { name: 'savingsPct_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ShippingWhereInput {
  depth?: number | null
  depth_not?: number | null
  depth_in?: number[]
  depth_not_in?: number[]
  depth_lt?: number | null
  depth_lte?: number | null
  depth_gt?: number | null
  depth_gte?: number | null
  height?: number | null
  height_not?: number | null
  height_in?: number[]
  height_not_in?: number[]
  height_lt?: number | null
  height_lte?: number | null
  height_gt?: number | null
  height_gte?: number | null
  scale?: prisma.DimensionScale | null
  scale_not?: prisma.DimensionScale | null
  scale_in?: prisma.DimensionScale[]
  scale_not_in?: prisma.DimensionScale[]
  weight?: number | null
  weight_not?: number | null
  weight_in?: number[]
  weight_not_in?: number[]
  weight_lt?: number | null
  weight_lte?: number | null
  weight_gt?: number | null
  weight_gte?: number | null
  width?: number | null
  width_not?: number | null
  width_in?: number[]
  width_not_in?: number[]
  width_lt?: number | null
  width_lte?: number | null
  width_gt?: number | null
  width_gte?: number | null
  AND?: ShippingWhereInput[]
}
export type ShippingWhereInputInputObject =
  | Extract<keyof ShippingWhereInput, string>
  | { name: 'depth', alias?: string  } 
  | { name: 'depth_not', alias?: string  } 
  | { name: 'depth_in', alias?: string  } 
  | { name: 'depth_not_in', alias?: string  } 
  | { name: 'depth_lt', alias?: string  } 
  | { name: 'depth_lte', alias?: string  } 
  | { name: 'depth_gt', alias?: string  } 
  | { name: 'depth_gte', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'height_not', alias?: string  } 
  | { name: 'height_in', alias?: string  } 
  | { name: 'height_not_in', alias?: string  } 
  | { name: 'height_lt', alias?: string  } 
  | { name: 'height_lte', alias?: string  } 
  | { name: 'height_gt', alias?: string  } 
  | { name: 'height_gte', alias?: string  } 
  | { name: 'scale', alias?: string  } 
  | { name: 'scale_not', alias?: string  } 
  | { name: 'scale_in', alias?: string  } 
  | { name: 'scale_not_in', alias?: string  } 
  | { name: 'weight', alias?: string  } 
  | { name: 'weight_not', alias?: string  } 
  | { name: 'weight_in', alias?: string  } 
  | { name: 'weight_not_in', alias?: string  } 
  | { name: 'weight_lt', alias?: string  } 
  | { name: 'weight_lte', alias?: string  } 
  | { name: 'weight_gt', alias?: string  } 
  | { name: 'weight_gte', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'width_not', alias?: string  } 
  | { name: 'width_in', alias?: string  } 
  | { name: 'width_not_in', alias?: string  } 
  | { name: 'width_lt', alias?: string  } 
  | { name: 'width_lte', alias?: string  } 
  | { name: 'width_gt', alias?: string  } 
  | { name: 'width_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface OrderWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  customer?: PersonWhereInput | null
  items_some?: ProductWhereInput | null
  total?: number | null
  total_not?: number | null
  total_in?: number[]
  total_not_in?: number[]
  total_lt?: number | null
  total_lte?: number | null
  total_gt?: number | null
  total_gte?: number | null
  status?: prisma.OrderStatus | null
  status_not?: prisma.OrderStatus | null
  status_in?: prisma.OrderStatus[]
  status_not_in?: prisma.OrderStatus[]
  AND?: OrderWhereInput[]
}
export type OrderWhereInputInputObject =
  | Extract<keyof OrderWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'total_not', alias?: string  } 
  | { name: 'total_in', alias?: string  } 
  | { name: 'total_not_in', alias?: string  } 
  | { name: 'total_lt', alias?: string  } 
  | { name: 'total_lte', alias?: string  } 
  | { name: 'total_gt', alias?: string  } 
  | { name: 'total_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface PersonWhereUniqueInput {
  _id?: string | null
  username?: string | null
}
export type PersonWhereUniqueInputInputObject =
  | Extract<keyof PersonWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface ProductWhereUniqueInput {
  _id?: string | null
  _handlerId?: string | null
  name?: string | null
}
export type ProductWhereUniqueInputInputObject =
  | Extract<keyof ProductWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_handlerId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CommentCreateInput {
  _id?: string | null
  _discussionId?: string
  _parentId?: CommentCreateOneInput | null
  author?: PersonCreateOneInput
  content?: string
  fullSlug?: string | null
  slug?: string | null
  type?: prisma.CommentType | null
}
export type CommentCreateInputInputObject =
  | Extract<keyof CommentCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_discussionId', alias?: string  } 
  | { name: '_parentId', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'fullSlug', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface CommentCreateOneInput {
  create?: CommentCreateInput | null
  connect?: CommentWhereUniqueInput | null
}
export type CommentCreateOneInputInputObject =
  | Extract<keyof CommentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PersonCreateOneInput {
  create?: PersonCreateInput | null
  connect?: PersonWhereUniqueInput | null
}
export type PersonCreateOneInputInputObject =
  | Extract<keyof PersonCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PersonCreateInput {
  _id?: string | null
  billing?: BillingCreateOneInput | null
  connections?: PersonCreateManyInput | null
  contact?: ContactCreateOneInput | null
  career?: CareerCreateOneInput | null
  name?: NameCreateOneInput
  password?: string
  profile?: ProfileCreateOneInput | null
  sessions?: SessionCreateManyInput | null
  type?: prisma.PersonType | null
  username?: string
}
export type PersonCreateInputInputObject =
  | Extract<keyof PersonCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'billing', alias?: string  } 
  | { name: 'connections', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'career', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'sessions', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface BillingCreateOneInput {
  create?: BillingCreateInput | null
}
export type BillingCreateOneInputInputObject =
  | Extract<keyof BillingCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface BillingCreateInput {
  accounts?: AccountCreateManyInput | null
  cards?: CardCreateManyInput | null
}
export type BillingCreateInputInputObject =
  | Extract<keyof BillingCreateInput, string>
  | { name: 'accounts', alias?: string  } 
  | { name: 'cards', alias?: string  } 
  
export interface AccountCreateManyInput {
  create?: AccountCreateInput[]
}
export type AccountCreateManyInputInputObject =
  | Extract<keyof AccountCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  
export interface AccountCreateInput {
  number?: number
  routing?: number
  type?: prisma.AccountType
}
export type AccountCreateInputInputObject =
  | Extract<keyof AccountCreateInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'routing', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface CardCreateManyInput {
  create?: CardCreateInput[]
}
export type CardCreateManyInputInputObject =
  | Extract<keyof CardCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  
export interface CardCreateInput {
  name?: string
  number?: number
  cvv?: number
  expiration?: string
  type?: prisma.CardType
}
export type CardCreateInputInputObject =
  | Extract<keyof CardCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'cvv', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface PersonCreateManyInput {
  create?: PersonCreateInput[]
  connect?: PersonWhereUniqueInput[]
}
export type PersonCreateManyInputInputObject =
  | Extract<keyof PersonCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactCreateOneInput {
  create?: ContactCreateInput | null
}
export type ContactCreateOneInputInputObject =
  | Extract<keyof ContactCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ContactCreateInput {
  emails?: ContactCreateemailsInput | null
  address1?: string
  address2?: string
  city?: string
  state?: string
  country?: string
  postalCode?: string
  phones?: ContactCreatephonesInput | null
}
export type ContactCreateInputInputObject =
  | Extract<keyof ContactCreateInput, string>
  | { name: 'emails', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postalCode', alias?: string  } 
  | { name: 'phones', alias?: string  } 
  
export interface ContactCreateemailsInput {
  set?: string[]
}
export type ContactCreateemailsInputInputObject =
  | Extract<keyof ContactCreateemailsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ContactCreatephonesInput {
  set?: string[]
}
export type ContactCreatephonesInputInputObject =
  | Extract<keyof ContactCreatephonesInput, string>
  | { name: 'set', alias?: string  } 
  
export interface CareerCreateOneInput {
  create?: CareerCreateInput | null
}
export type CareerCreateOneInputInputObject =
  | Extract<keyof CareerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface CareerCreateInput {
  company?: string
  experience?: ExperienceCreateManyInput | null
  position?: string
}
export type CareerCreateInputInputObject =
  | Extract<keyof CareerCreateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'experience', alias?: string  } 
  | { name: 'position', alias?: string  } 
  
export interface ExperienceCreateManyInput {
  create?: ExperienceCreateInput[]
}
export type ExperienceCreateManyInputInputObject =
  | Extract<keyof ExperienceCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ExperienceCreateInput {
  company?: string
  position?: string
  description?: string | null
  start?: string
  end?: string
}
export type ExperienceCreateInputInputObject =
  | Extract<keyof ExperienceCreateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface NameCreateOneInput {
  create?: NameCreateInput | null
}
export type NameCreateOneInputInputObject =
  | Extract<keyof NameCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface NameCreateInput {
  first?: string
  last?: string
  middle?: string | null
  preferred?: string | null
}
export type NameCreateInputInputObject =
  | Extract<keyof NameCreateInput, string>
  | { name: 'first', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  
export interface ProfileCreateOneInput {
  create?: ProfileCreateInput | null
}
export type ProfileCreateOneInputInputObject =
  | Extract<keyof ProfileCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ProfileCreateInput {
  avatar?: string | null
  gender?: prisma.Gender | null
  headline?: string | null
}
export type ProfileCreateInputInputObject =
  | Extract<keyof ProfileCreateInput, string>
  | { name: 'avatar', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'headline', alias?: string  } 
  
export interface SessionCreateManyInput {
  create?: SessionCreateInput[]
}
export type SessionCreateManyInputInputObject =
  | Extract<keyof SessionCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  
export interface SessionCreateInput {
  device?: string | null
  location?: string | null
  token?: string | null
}
export type SessionCreateInputInputObject =
  | Extract<keyof SessionCreateInput, string>
  | { name: 'device', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'token', alias?: string  } 
  
export interface CommentUpdateInput {
  _discussionId?: string | null
  _parentId?: CommentUpdateOneInput | null
  author?: PersonUpdateOneRequiredInput | null
  content?: string | null
  fullSlug?: string | null
  slug?: string | null
  type?: prisma.CommentType | null
}
export type CommentUpdateInputInputObject =
  | Extract<keyof CommentUpdateInput, string>
  | { name: '_discussionId', alias?: string  } 
  | { name: '_parentId', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'fullSlug', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface CommentUpdateOneInput {
  create?: CommentCreateInput | null
  update?: CommentUpdateDataInput | null
  upsert?: CommentUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CommentWhereUniqueInput | null
}
export type CommentUpdateOneInputInputObject =
  | Extract<keyof CommentUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CommentUpdateDataInput {
  _discussionId?: string | null
  _parentId?: CommentUpdateOneInput | null
  author?: PersonUpdateOneRequiredInput | null
  content?: string | null
  fullSlug?: string | null
  slug?: string | null
  type?: prisma.CommentType | null
}
export type CommentUpdateDataInputInputObject =
  | Extract<keyof CommentUpdateDataInput, string>
  | { name: '_discussionId', alias?: string  } 
  | { name: '_parentId', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'fullSlug', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface PersonUpdateOneRequiredInput {
  create?: PersonCreateInput | null
  update?: PersonUpdateDataInput | null
  upsert?: PersonUpsertNestedInput | null
  connect?: PersonWhereUniqueInput | null
}
export type PersonUpdateOneRequiredInputInputObject =
  | Extract<keyof PersonUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PersonUpdateDataInput {
  billing?: BillingUpdateOneInput | null
  connections?: PersonUpdateManyInput | null
  contact?: ContactUpdateOneInput | null
  career?: CareerUpdateOneInput | null
  name?: NameUpdateOneRequiredInput | null
  password?: string | null
  profile?: ProfileUpdateOneInput | null
  sessions?: SessionUpdateManyInput | null
  type?: prisma.PersonType | null
  username?: string | null
}
export type PersonUpdateDataInputInputObject =
  | Extract<keyof PersonUpdateDataInput, string>
  | { name: 'billing', alias?: string  } 
  | { name: 'connections', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'career', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'sessions', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface BillingUpdateOneInput {
  create?: BillingCreateInput | null
  update?: BillingUpdateDataInput | null
  upsert?: BillingUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type BillingUpdateOneInputInputObject =
  | Extract<keyof BillingUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface BillingUpdateDataInput {
  accounts?: AccountUpdateManyInput | null
  cards?: CardUpdateManyInput | null
}
export type BillingUpdateDataInputInputObject =
  | Extract<keyof BillingUpdateDataInput, string>
  | { name: 'accounts', alias?: string  } 
  | { name: 'cards', alias?: string  } 
  
export interface AccountUpdateManyInput {
  create?: AccountCreateInput[]
  deleteMany?: AccountScalarWhereInput[]
  updateMany?: AccountUpdateManyWithWhereNestedInput[]
}
export type AccountUpdateManyInputInputObject =
  | Extract<keyof AccountUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AccountScalarWhereInput {
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  routing?: number | null
  routing_not?: number | null
  routing_in?: number[]
  routing_not_in?: number[]
  routing_lt?: number | null
  routing_lte?: number | null
  routing_gt?: number | null
  routing_gte?: number | null
  type?: prisma.AccountType | null
  type_not?: prisma.AccountType | null
  type_in?: prisma.AccountType[]
  type_not_in?: prisma.AccountType[]
  AND?: AccountScalarWhereInput[]
  OR?: AccountScalarWhereInput[]
  NOT?: AccountScalarWhereInput[]
}
export type AccountScalarWhereInputInputObject =
  | Extract<keyof AccountScalarWhereInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'routing', alias?: string  } 
  | { name: 'routing_not', alias?: string  } 
  | { name: 'routing_in', alias?: string  } 
  | { name: 'routing_not_in', alias?: string  } 
  | { name: 'routing_lt', alias?: string  } 
  | { name: 'routing_lte', alias?: string  } 
  | { name: 'routing_gt', alias?: string  } 
  | { name: 'routing_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AccountUpdateManyWithWhereNestedInput {
  where?: AccountScalarWhereInput
  data?: AccountUpdateManyDataInput
}
export type AccountUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AccountUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AccountUpdateManyDataInput {
  number?: number | null
  routing?: number | null
  type?: prisma.AccountType | null
}
export type AccountUpdateManyDataInputInputObject =
  | Extract<keyof AccountUpdateManyDataInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'routing', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface CardUpdateManyInput {
  create?: CardCreateInput[]
  deleteMany?: CardScalarWhereInput[]
  updateMany?: CardUpdateManyWithWhereNestedInput[]
}
export type CardUpdateManyInputInputObject =
  | Extract<keyof CardUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CardScalarWhereInput {
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  cvv?: number | null
  cvv_not?: number | null
  cvv_in?: number[]
  cvv_not_in?: number[]
  cvv_lt?: number | null
  cvv_lte?: number | null
  cvv_gt?: number | null
  cvv_gte?: number | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  type?: prisma.CardType | null
  type_not?: prisma.CardType | null
  type_in?: prisma.CardType[]
  type_not_in?: prisma.CardType[]
  AND?: CardScalarWhereInput[]
  OR?: CardScalarWhereInput[]
  NOT?: CardScalarWhereInput[]
}
export type CardScalarWhereInputInputObject =
  | Extract<keyof CardScalarWhereInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'cvv', alias?: string  } 
  | { name: 'cvv_not', alias?: string  } 
  | { name: 'cvv_in', alias?: string  } 
  | { name: 'cvv_not_in', alias?: string  } 
  | { name: 'cvv_lt', alias?: string  } 
  | { name: 'cvv_lte', alias?: string  } 
  | { name: 'cvv_gt', alias?: string  } 
  | { name: 'cvv_gte', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CardUpdateManyWithWhereNestedInput {
  where?: CardScalarWhereInput
  data?: CardUpdateManyDataInput
}
export type CardUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CardUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CardUpdateManyDataInput {
  name?: string | null
  number?: number | null
  cvv?: number | null
  expiration?: string | null
  type?: prisma.CardType | null
}
export type CardUpdateManyDataInputInputObject =
  | Extract<keyof CardUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'cvv', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface BillingUpsertNestedInput {
  update?: BillingUpdateDataInput
  create?: BillingCreateInput
}
export type BillingUpsertNestedInputInputObject =
  | Extract<keyof BillingUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PersonUpdateManyInput {
  create?: PersonCreateInput[]
  update?: PersonUpdateWithWhereUniqueNestedInput[]
  upsert?: PersonUpsertWithWhereUniqueNestedInput[]
  delete?: PersonWhereUniqueInput[]
  connect?: PersonWhereUniqueInput[]
  set?: PersonWhereUniqueInput[]
  disconnect?: PersonWhereUniqueInput[]
  deleteMany?: PersonScalarWhereInput[]
  updateMany?: PersonUpdateManyWithWhereNestedInput[]
}
export type PersonUpdateManyInputInputObject =
  | Extract<keyof PersonUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PersonUpdateWithWhereUniqueNestedInput {
  where?: PersonWhereUniqueInput
  data?: PersonUpdateDataInput
}
export type PersonUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof PersonUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PersonUpsertWithWhereUniqueNestedInput {
  where?: PersonWhereUniqueInput
  update?: PersonUpdateDataInput
  create?: PersonCreateInput
}
export type PersonUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof PersonUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PersonScalarWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _createdAt?: string | null
  _createdAt_not?: string | null
  _createdAt_in?: string[]
  _createdAt_not_in?: string[]
  _createdAt_lt?: string | null
  _createdAt_lte?: string | null
  _createdAt_gt?: string | null
  _createdAt_gte?: string | null
  _updatedAt?: string | null
  _updatedAt_not?: string | null
  _updatedAt_in?: string[]
  _updatedAt_not_in?: string[]
  _updatedAt_lt?: string | null
  _updatedAt_lte?: string | null
  _updatedAt_gt?: string | null
  _updatedAt_gte?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  type?: prisma.PersonType | null
  type_not?: prisma.PersonType | null
  type_in?: prisma.PersonType[]
  type_not_in?: prisma.PersonType[]
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  AND?: PersonScalarWhereInput[]
  OR?: PersonScalarWhereInput[]
  NOT?: PersonScalarWhereInput[]
}
export type PersonScalarWhereInputInputObject =
  | Extract<keyof PersonScalarWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_createdAt', alias?: string  } 
  | { name: '_createdAt_not', alias?: string  } 
  | { name: '_createdAt_in', alias?: string  } 
  | { name: '_createdAt_not_in', alias?: string  } 
  | { name: '_createdAt_lt', alias?: string  } 
  | { name: '_createdAt_lte', alias?: string  } 
  | { name: '_createdAt_gt', alias?: string  } 
  | { name: '_createdAt_gte', alias?: string  } 
  | { name: '_updatedAt', alias?: string  } 
  | { name: '_updatedAt_not', alias?: string  } 
  | { name: '_updatedAt_in', alias?: string  } 
  | { name: '_updatedAt_not_in', alias?: string  } 
  | { name: '_updatedAt_lt', alias?: string  } 
  | { name: '_updatedAt_lte', alias?: string  } 
  | { name: '_updatedAt_gt', alias?: string  } 
  | { name: '_updatedAt_gte', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PersonUpdateManyWithWhereNestedInput {
  where?: PersonScalarWhereInput
  data?: PersonUpdateManyDataInput
}
export type PersonUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PersonUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PersonUpdateManyDataInput {
  password?: string | null
  type?: prisma.PersonType | null
  username?: string | null
}
export type PersonUpdateManyDataInputInputObject =
  | Extract<keyof PersonUpdateManyDataInput, string>
  | { name: 'password', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface ContactUpdateOneInput {
  create?: ContactCreateInput | null
  update?: ContactUpdateDataInput | null
  upsert?: ContactUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type ContactUpdateOneInputInputObject =
  | Extract<keyof ContactUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ContactUpdateDataInput {
  emails?: ContactUpdateemailsInput | null
  address1?: string | null
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  postalCode?: string | null
  phones?: ContactUpdatephonesInput | null
}
export type ContactUpdateDataInputInputObject =
  | Extract<keyof ContactUpdateDataInput, string>
  | { name: 'emails', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postalCode', alias?: string  } 
  | { name: 'phones', alias?: string  } 
  
export interface ContactUpdateemailsInput {
  set?: string[]
}
export type ContactUpdateemailsInputInputObject =
  | Extract<keyof ContactUpdateemailsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ContactUpdatephonesInput {
  set?: string[]
}
export type ContactUpdatephonesInputInputObject =
  | Extract<keyof ContactUpdatephonesInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ContactUpsertNestedInput {
  update?: ContactUpdateDataInput
  create?: ContactCreateInput
}
export type ContactUpsertNestedInputInputObject =
  | Extract<keyof ContactUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CareerUpdateOneInput {
  create?: CareerCreateInput | null
  update?: CareerUpdateDataInput | null
  upsert?: CareerUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type CareerUpdateOneInputInputObject =
  | Extract<keyof CareerUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface CareerUpdateDataInput {
  company?: string | null
  experience?: ExperienceUpdateManyInput | null
  position?: string | null
}
export type CareerUpdateDataInputInputObject =
  | Extract<keyof CareerUpdateDataInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'experience', alias?: string  } 
  | { name: 'position', alias?: string  } 
  
export interface ExperienceUpdateManyInput {
  create?: ExperienceCreateInput[]
  deleteMany?: ExperienceScalarWhereInput[]
  updateMany?: ExperienceUpdateManyWithWhereNestedInput[]
}
export type ExperienceUpdateManyInputInputObject =
  | Extract<keyof ExperienceUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ExperienceScalarWhereInput {
  company?: string | null
  company_not?: string | null
  company_in?: string[]
  company_not_in?: string[]
  company_lt?: string | null
  company_lte?: string | null
  company_gt?: string | null
  company_gte?: string | null
  company_contains?: string | null
  company_not_contains?: string | null
  company_starts_with?: string | null
  company_not_starts_with?: string | null
  company_ends_with?: string | null
  company_not_ends_with?: string | null
  position?: string | null
  position_not?: string | null
  position_in?: string[]
  position_not_in?: string[]
  position_lt?: string | null
  position_lte?: string | null
  position_gt?: string | null
  position_gte?: string | null
  position_contains?: string | null
  position_not_contains?: string | null
  position_starts_with?: string | null
  position_not_starts_with?: string | null
  position_ends_with?: string | null
  position_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  start?: string | null
  start_not?: string | null
  start_in?: string[]
  start_not_in?: string[]
  start_lt?: string | null
  start_lte?: string | null
  start_gt?: string | null
  start_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  AND?: ExperienceScalarWhereInput[]
  OR?: ExperienceScalarWhereInput[]
  NOT?: ExperienceScalarWhereInput[]
}
export type ExperienceScalarWhereInputInputObject =
  | Extract<keyof ExperienceScalarWhereInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'company_not', alias?: string  } 
  | { name: 'company_in', alias?: string  } 
  | { name: 'company_not_in', alias?: string  } 
  | { name: 'company_lt', alias?: string  } 
  | { name: 'company_lte', alias?: string  } 
  | { name: 'company_gt', alias?: string  } 
  | { name: 'company_gte', alias?: string  } 
  | { name: 'company_contains', alias?: string  } 
  | { name: 'company_not_contains', alias?: string  } 
  | { name: 'company_starts_with', alias?: string  } 
  | { name: 'company_not_starts_with', alias?: string  } 
  | { name: 'company_ends_with', alias?: string  } 
  | { name: 'company_not_ends_with', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'position_lt', alias?: string  } 
  | { name: 'position_lte', alias?: string  } 
  | { name: 'position_gt', alias?: string  } 
  | { name: 'position_gte', alias?: string  } 
  | { name: 'position_contains', alias?: string  } 
  | { name: 'position_not_contains', alias?: string  } 
  | { name: 'position_starts_with', alias?: string  } 
  | { name: 'position_not_starts_with', alias?: string  } 
  | { name: 'position_ends_with', alias?: string  } 
  | { name: 'position_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'start_not', alias?: string  } 
  | { name: 'start_in', alias?: string  } 
  | { name: 'start_not_in', alias?: string  } 
  | { name: 'start_lt', alias?: string  } 
  | { name: 'start_lte', alias?: string  } 
  | { name: 'start_gt', alias?: string  } 
  | { name: 'start_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ExperienceUpdateManyWithWhereNestedInput {
  where?: ExperienceScalarWhereInput
  data?: ExperienceUpdateManyDataInput
}
export type ExperienceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ExperienceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ExperienceUpdateManyDataInput {
  company?: string | null
  position?: string | null
  description?: string | null
  start?: string | null
  end?: string | null
}
export type ExperienceUpdateManyDataInputInputObject =
  | Extract<keyof ExperienceUpdateManyDataInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface CareerUpsertNestedInput {
  update?: CareerUpdateDataInput
  create?: CareerCreateInput
}
export type CareerUpsertNestedInputInputObject =
  | Extract<keyof CareerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NameUpdateOneRequiredInput {
  create?: NameCreateInput | null
  update?: NameUpdateDataInput | null
  upsert?: NameUpsertNestedInput | null
}
export type NameUpdateOneRequiredInputInputObject =
  | Extract<keyof NameUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  
export interface NameUpdateDataInput {
  first?: string | null
  last?: string | null
  middle?: string | null
  preferred?: string | null
}
export type NameUpdateDataInputInputObject =
  | Extract<keyof NameUpdateDataInput, string>
  | { name: 'first', alias?: string  } 
  | { name: 'last', alias?: string  } 
  | { name: 'middle', alias?: string  } 
  | { name: 'preferred', alias?: string  } 
  
export interface NameUpsertNestedInput {
  update?: NameUpdateDataInput
  create?: NameCreateInput
}
export type NameUpsertNestedInputInputObject =
  | Extract<keyof NameUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProfileUpdateOneInput {
  create?: ProfileCreateInput | null
  update?: ProfileUpdateDataInput | null
  upsert?: ProfileUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type ProfileUpdateOneInputInputObject =
  | Extract<keyof ProfileUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ProfileUpdateDataInput {
  avatar?: string | null
  gender?: prisma.Gender | null
  headline?: string | null
}
export type ProfileUpdateDataInputInputObject =
  | Extract<keyof ProfileUpdateDataInput, string>
  | { name: 'avatar', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'headline', alias?: string  } 
  
export interface ProfileUpsertNestedInput {
  update?: ProfileUpdateDataInput
  create?: ProfileCreateInput
}
export type ProfileUpsertNestedInputInputObject =
  | Extract<keyof ProfileUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SessionUpdateManyInput {
  create?: SessionCreateInput[]
  deleteMany?: SessionScalarWhereInput[]
  updateMany?: SessionUpdateManyWithWhereNestedInput[]
}
export type SessionUpdateManyInputInputObject =
  | Extract<keyof SessionUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SessionScalarWhereInput {
  device?: string | null
  device_not?: string | null
  device_in?: string[]
  device_not_in?: string[]
  device_lt?: string | null
  device_lte?: string | null
  device_gt?: string | null
  device_gte?: string | null
  device_contains?: string | null
  device_not_contains?: string | null
  device_starts_with?: string | null
  device_not_starts_with?: string | null
  device_ends_with?: string | null
  device_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  token?: string | null
  token_not?: string | null
  token_in?: string[]
  token_not_in?: string[]
  token_lt?: string | null
  token_lte?: string | null
  token_gt?: string | null
  token_gte?: string | null
  token_contains?: string | null
  token_not_contains?: string | null
  token_starts_with?: string | null
  token_not_starts_with?: string | null
  token_ends_with?: string | null
  token_not_ends_with?: string | null
  AND?: SessionScalarWhereInput[]
  OR?: SessionScalarWhereInput[]
  NOT?: SessionScalarWhereInput[]
}
export type SessionScalarWhereInputInputObject =
  | Extract<keyof SessionScalarWhereInput, string>
  | { name: 'device', alias?: string  } 
  | { name: 'device_not', alias?: string  } 
  | { name: 'device_in', alias?: string  } 
  | { name: 'device_not_in', alias?: string  } 
  | { name: 'device_lt', alias?: string  } 
  | { name: 'device_lte', alias?: string  } 
  | { name: 'device_gt', alias?: string  } 
  | { name: 'device_gte', alias?: string  } 
  | { name: 'device_contains', alias?: string  } 
  | { name: 'device_not_contains', alias?: string  } 
  | { name: 'device_starts_with', alias?: string  } 
  | { name: 'device_not_starts_with', alias?: string  } 
  | { name: 'device_ends_with', alias?: string  } 
  | { name: 'device_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'token_not', alias?: string  } 
  | { name: 'token_in', alias?: string  } 
  | { name: 'token_not_in', alias?: string  } 
  | { name: 'token_lt', alias?: string  } 
  | { name: 'token_lte', alias?: string  } 
  | { name: 'token_gt', alias?: string  } 
  | { name: 'token_gte', alias?: string  } 
  | { name: 'token_contains', alias?: string  } 
  | { name: 'token_not_contains', alias?: string  } 
  | { name: 'token_starts_with', alias?: string  } 
  | { name: 'token_not_starts_with', alias?: string  } 
  | { name: 'token_ends_with', alias?: string  } 
  | { name: 'token_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SessionUpdateManyWithWhereNestedInput {
  where?: SessionScalarWhereInput
  data?: SessionUpdateManyDataInput
}
export type SessionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof SessionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SessionUpdateManyDataInput {
  device?: string | null
  location?: string | null
  token?: string | null
}
export type SessionUpdateManyDataInputInputObject =
  | Extract<keyof SessionUpdateManyDataInput, string>
  | { name: 'device', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'token', alias?: string  } 
  
export interface PersonUpsertNestedInput {
  update?: PersonUpdateDataInput
  create?: PersonCreateInput
}
export type PersonUpsertNestedInputInputObject =
  | Extract<keyof PersonUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentUpsertNestedInput {
  update?: CommentUpdateDataInput
  create?: CommentCreateInput
}
export type CommentUpsertNestedInputInputObject =
  | Extract<keyof CommentUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentUpdateManyMutationInput {
  _discussionId?: string | null
  content?: string | null
  fullSlug?: string | null
  slug?: string | null
  type?: prisma.CommentType | null
}
export type CommentUpdateManyMutationInputInputObject =
  | Extract<keyof CommentUpdateManyMutationInput, string>
  | { name: '_discussionId', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'fullSlug', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface DocumentCreateInput {
  _id?: string | null
  _publishedAt?: string | null
  author?: PersonCreateOneInput
  category?: prisma.DocumentCategory | null
  content?: string
  subtitle?: string | null
  title?: string
  type?: prisma.DocumentType | null
}
export type DocumentCreateInputInputObject =
  | Extract<keyof DocumentCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_publishedAt', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'subtitle', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface DocumentUpdateInput {
  _publishedAt?: string | null
  author?: PersonUpdateOneRequiredInput | null
  category?: prisma.DocumentCategory | null
  content?: string | null
  subtitle?: string | null
  title?: string | null
  type?: prisma.DocumentType | null
}
export type DocumentUpdateInputInputObject =
  | Extract<keyof DocumentUpdateInput, string>
  | { name: '_publishedAt', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'subtitle', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface DocumentUpdateManyMutationInput {
  _publishedAt?: string | null
  category?: prisma.DocumentCategory | null
  content?: string | null
  subtitle?: string | null
  title?: string | null
  type?: prisma.DocumentType | null
}
export type DocumentUpdateManyMutationInputInputObject =
  | Extract<keyof DocumentUpdateManyMutationInput, string>
  | { name: '_publishedAt', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'subtitle', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface NotificationCreateInput {
  _id?: string | null
  _sentAt?: string
  receiver?: NotificationCreatereceiverInput | null
  message?: string
  receivedBy?: ReceivedByCreateManyInput | null
  sender?: SenderCreateOneInput
  title?: string
}
export type NotificationCreateInputInputObject =
  | Extract<keyof NotificationCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_sentAt', alias?: string  } 
  | { name: 'receiver', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'receivedBy', alias?: string  } 
  | { name: 'sender', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface NotificationCreatereceiverInput {
  set?: string[]
}
export type NotificationCreatereceiverInputInputObject =
  | Extract<keyof NotificationCreatereceiverInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ReceivedByCreateManyInput {
  create?: ReceivedByCreateInput[]
}
export type ReceivedByCreateManyInputInputObject =
  | Extract<keyof ReceivedByCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ReceivedByCreateInput {
  _personId?: PersonCreateOneInput
  _receivedAt?: string
  _readAt?: string
}
export type ReceivedByCreateInputInputObject =
  | Extract<keyof ReceivedByCreateInput, string>
  | { name: '_personId', alias?: string  } 
  | { name: '_receivedAt', alias?: string  } 
  | { name: '_readAt', alias?: string  } 
  
export interface SenderCreateOneInput {
  create?: SenderCreateInput | null
}
export type SenderCreateOneInputInputObject =
  | Extract<keyof SenderCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface SenderCreateInput {
  _personId?: PersonCreateOneInput
  name?: string
  type?: prisma.SenderType
}
export type SenderCreateInputInputObject =
  | Extract<keyof SenderCreateInput, string>
  | { name: '_personId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface NotificationUpdateInput {
  _sentAt?: string | null
  receiver?: NotificationUpdatereceiverInput | null
  message?: string | null
  receivedBy?: ReceivedByUpdateManyInput | null
  sender?: SenderUpdateOneRequiredInput | null
  title?: string | null
}
export type NotificationUpdateInputInputObject =
  | Extract<keyof NotificationUpdateInput, string>
  | { name: '_sentAt', alias?: string  } 
  | { name: 'receiver', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'receivedBy', alias?: string  } 
  | { name: 'sender', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface NotificationUpdatereceiverInput {
  set?: string[]
}
export type NotificationUpdatereceiverInputInputObject =
  | Extract<keyof NotificationUpdatereceiverInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ReceivedByUpdateManyInput {
  create?: ReceivedByCreateInput[]
  deleteMany?: ReceivedByScalarWhereInput[]
  updateMany?: ReceivedByUpdateManyWithWhereNestedInput[]
}
export type ReceivedByUpdateManyInputInputObject =
  | Extract<keyof ReceivedByUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ReceivedByScalarWhereInput {
  _receivedAt?: string | null
  _receivedAt_not?: string | null
  _receivedAt_in?: string[]
  _receivedAt_not_in?: string[]
  _receivedAt_lt?: string | null
  _receivedAt_lte?: string | null
  _receivedAt_gt?: string | null
  _receivedAt_gte?: string | null
  _readAt?: string | null
  _readAt_not?: string | null
  _readAt_in?: string[]
  _readAt_not_in?: string[]
  _readAt_lt?: string | null
  _readAt_lte?: string | null
  _readAt_gt?: string | null
  _readAt_gte?: string | null
  AND?: ReceivedByScalarWhereInput[]
  OR?: ReceivedByScalarWhereInput[]
  NOT?: ReceivedByScalarWhereInput[]
}
export type ReceivedByScalarWhereInputInputObject =
  | Extract<keyof ReceivedByScalarWhereInput, string>
  | { name: '_receivedAt', alias?: string  } 
  | { name: '_receivedAt_not', alias?: string  } 
  | { name: '_receivedAt_in', alias?: string  } 
  | { name: '_receivedAt_not_in', alias?: string  } 
  | { name: '_receivedAt_lt', alias?: string  } 
  | { name: '_receivedAt_lte', alias?: string  } 
  | { name: '_receivedAt_gt', alias?: string  } 
  | { name: '_receivedAt_gte', alias?: string  } 
  | { name: '_readAt', alias?: string  } 
  | { name: '_readAt_not', alias?: string  } 
  | { name: '_readAt_in', alias?: string  } 
  | { name: '_readAt_not_in', alias?: string  } 
  | { name: '_readAt_lt', alias?: string  } 
  | { name: '_readAt_lte', alias?: string  } 
  | { name: '_readAt_gt', alias?: string  } 
  | { name: '_readAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ReceivedByUpdateManyWithWhereNestedInput {
  where?: ReceivedByScalarWhereInput
  data?: ReceivedByUpdateManyDataInput
}
export type ReceivedByUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ReceivedByUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ReceivedByUpdateManyDataInput {
  _receivedAt?: string | null
  _readAt?: string | null
}
export type ReceivedByUpdateManyDataInputInputObject =
  | Extract<keyof ReceivedByUpdateManyDataInput, string>
  | { name: '_receivedAt', alias?: string  } 
  | { name: '_readAt', alias?: string  } 
  
export interface SenderUpdateOneRequiredInput {
  create?: SenderCreateInput | null
  update?: SenderUpdateDataInput | null
  upsert?: SenderUpsertNestedInput | null
}
export type SenderUpdateOneRequiredInputInputObject =
  | Extract<keyof SenderUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  
export interface SenderUpdateDataInput {
  _personId?: PersonUpdateOneRequiredInput | null
  name?: string | null
  type?: prisma.SenderType | null
}
export type SenderUpdateDataInputInputObject =
  | Extract<keyof SenderUpdateDataInput, string>
  | { name: '_personId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface SenderUpsertNestedInput {
  update?: SenderUpdateDataInput
  create?: SenderCreateInput
}
export type SenderUpsertNestedInputInputObject =
  | Extract<keyof SenderUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NotificationUpdateManyMutationInput {
  _sentAt?: string | null
  receiver?: NotificationUpdatereceiverInput | null
  message?: string | null
  title?: string | null
}
export type NotificationUpdateManyMutationInputInputObject =
  | Extract<keyof NotificationUpdateManyMutationInput, string>
  | { name: '_sentAt', alias?: string  } 
  | { name: 'receiver', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface OrderCreateInput {
  _id?: string | null
  customer?: PersonCreateOneInput
  items?: ProductCreateManyInput | null
  total?: number
  status?: prisma.OrderStatus | null
}
export type OrderCreateInputInputObject =
  | Extract<keyof OrderCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProductCreateManyInput {
  create?: ProductCreateInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyInputInputObject =
  | Extract<keyof ProductCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateInput {
  _id?: string | null
  _handlerId?: string | null
  name?: string
  category?: prisma.ProductCategory | null
  description?: string
  details?: undefined | null
  manufacturer?: ManufacturerCreateOneInput | null
  price?: PriceCreateOneInput
  quantity?: number | null
  shipping?: ShippingCreateOneInput | null
  sku?: string | null
}
export type ProductCreateInputInputObject =
  | Extract<keyof ProductCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_handlerId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'manufacturer', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'shipping', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface ManufacturerCreateOneInput {
  create?: ManufacturerCreateInput | null
}
export type ManufacturerCreateOneInputInputObject =
  | Extract<keyof ManufacturerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ManufacturerCreateInput {
  model?: string
  releaseDate?: string
}
export type ManufacturerCreateInputInputObject =
  | Extract<keyof ManufacturerCreateInput, string>
  | { name: 'model', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  
export interface PriceCreateOneInput {
  create?: PriceCreateInput | null
}
export type PriceCreateOneInputInputObject =
  | Extract<keyof PriceCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface PriceCreateInput {
  list?: number
  retail?: number
  savings?: number | null
  savingsPct?: number | null
}
export type PriceCreateInputInputObject =
  | Extract<keyof PriceCreateInput, string>
  | { name: 'list', alias?: string  } 
  | { name: 'retail', alias?: string  } 
  | { name: 'savings', alias?: string  } 
  | { name: 'savingsPct', alias?: string  } 
  
export interface ShippingCreateOneInput {
  create?: ShippingCreateInput | null
}
export type ShippingCreateOneInputInputObject =
  | Extract<keyof ShippingCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ShippingCreateInput {
  depth?: number
  height?: number
  scale?: prisma.DimensionScale | null
  weight?: number
  width?: number
}
export type ShippingCreateInputInputObject =
  | Extract<keyof ShippingCreateInput, string>
  | { name: 'depth', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'scale', alias?: string  } 
  | { name: 'weight', alias?: string  } 
  | { name: 'width', alias?: string  } 
  
export interface OrderUpdateInput {
  customer?: PersonUpdateOneRequiredInput | null
  items?: ProductUpdateManyInput | null
  total?: number | null
  status?: prisma.OrderStatus | null
}
export type OrderUpdateInputInputObject =
  | Extract<keyof OrderUpdateInput, string>
  | { name: 'customer', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProductUpdateManyInput {
  create?: ProductCreateInput[]
  update?: ProductUpdateWithWhereUniqueNestedInput[]
  upsert?: ProductUpsertWithWhereUniqueNestedInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyInputInputObject =
  | Extract<keyof ProductUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueNestedInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateDataInput
}
export type ProductUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateDataInput {
  name?: string | null
  category?: prisma.ProductCategory | null
  description?: string | null
  details?: undefined | null
  manufacturer?: ManufacturerUpdateOneInput | null
  price?: PriceUpdateOneRequiredInput | null
  quantity?: number | null
  shipping?: ShippingUpdateOneInput | null
  sku?: string | null
}
export type ProductUpdateDataInputInputObject =
  | Extract<keyof ProductUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'manufacturer', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'shipping', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface ManufacturerUpdateOneInput {
  create?: ManufacturerCreateInput | null
  update?: ManufacturerUpdateDataInput | null
  upsert?: ManufacturerUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type ManufacturerUpdateOneInputInputObject =
  | Extract<keyof ManufacturerUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ManufacturerUpdateDataInput {
  model?: string | null
  releaseDate?: string | null
}
export type ManufacturerUpdateDataInputInputObject =
  | Extract<keyof ManufacturerUpdateDataInput, string>
  | { name: 'model', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  
export interface ManufacturerUpsertNestedInput {
  update?: ManufacturerUpdateDataInput
  create?: ManufacturerCreateInput
}
export type ManufacturerUpsertNestedInputInputObject =
  | Extract<keyof ManufacturerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PriceUpdateOneRequiredInput {
  create?: PriceCreateInput | null
  update?: PriceUpdateDataInput | null
  upsert?: PriceUpsertNestedInput | null
}
export type PriceUpdateOneRequiredInputInputObject =
  | Extract<keyof PriceUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  
export interface PriceUpdateDataInput {
  list?: number | null
  retail?: number | null
  savings?: number | null
  savingsPct?: number | null
}
export type PriceUpdateDataInputInputObject =
  | Extract<keyof PriceUpdateDataInput, string>
  | { name: 'list', alias?: string  } 
  | { name: 'retail', alias?: string  } 
  | { name: 'savings', alias?: string  } 
  | { name: 'savingsPct', alias?: string  } 
  
export interface PriceUpsertNestedInput {
  update?: PriceUpdateDataInput
  create?: PriceCreateInput
}
export type PriceUpsertNestedInputInputObject =
  | Extract<keyof PriceUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ShippingUpdateOneInput {
  create?: ShippingCreateInput | null
  update?: ShippingUpdateDataInput | null
  upsert?: ShippingUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type ShippingUpdateOneInputInputObject =
  | Extract<keyof ShippingUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ShippingUpdateDataInput {
  depth?: number | null
  height?: number | null
  scale?: prisma.DimensionScale | null
  weight?: number | null
  width?: number | null
}
export type ShippingUpdateDataInputInputObject =
  | Extract<keyof ShippingUpdateDataInput, string>
  | { name: 'depth', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'scale', alias?: string  } 
  | { name: 'weight', alias?: string  } 
  | { name: 'width', alias?: string  } 
  
export interface ShippingUpsertNestedInput {
  update?: ShippingUpdateDataInput
  create?: ShippingCreateInput
}
export type ShippingUpsertNestedInputInputObject =
  | Extract<keyof ShippingUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueNestedInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateDataInput
  create?: ProductCreateInput
}
export type ProductUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductScalarWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  _handlerId?: string | null
  _handlerId_not?: string | null
  _handlerId_in?: string[]
  _handlerId_not_in?: string[]
  _handlerId_lt?: string | null
  _handlerId_lte?: string | null
  _handlerId_gt?: string | null
  _handlerId_gte?: string | null
  _handlerId_contains?: string | null
  _handlerId_not_contains?: string | null
  _handlerId_starts_with?: string | null
  _handlerId_not_starts_with?: string | null
  _handlerId_ends_with?: string | null
  _handlerId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  category?: prisma.ProductCategory | null
  category_not?: prisma.ProductCategory | null
  category_in?: prisma.ProductCategory[]
  category_not_in?: prisma.ProductCategory[]
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  sku?: string | null
  sku_not?: string | null
  sku_in?: string[]
  sku_not_in?: string[]
  sku_lt?: string | null
  sku_lte?: string | null
  sku_gt?: string | null
  sku_gte?: string | null
  sku_contains?: string | null
  sku_not_contains?: string | null
  sku_starts_with?: string | null
  sku_not_starts_with?: string | null
  sku_ends_with?: string | null
  sku_not_ends_with?: string | null
  AND?: ProductScalarWhereInput[]
  OR?: ProductScalarWhereInput[]
  NOT?: ProductScalarWhereInput[]
}
export type ProductScalarWhereInputInputObject =
  | Extract<keyof ProductScalarWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: '_handlerId', alias?: string  } 
  | { name: '_handlerId_not', alias?: string  } 
  | { name: '_handlerId_in', alias?: string  } 
  | { name: '_handlerId_not_in', alias?: string  } 
  | { name: '_handlerId_lt', alias?: string  } 
  | { name: '_handlerId_lte', alias?: string  } 
  | { name: '_handlerId_gt', alias?: string  } 
  | { name: '_handlerId_gte', alias?: string  } 
  | { name: '_handlerId_contains', alias?: string  } 
  | { name: '_handlerId_not_contains', alias?: string  } 
  | { name: '_handlerId_starts_with', alias?: string  } 
  | { name: '_handlerId_not_starts_with', alias?: string  } 
  | { name: '_handlerId_ends_with', alias?: string  } 
  | { name: '_handlerId_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'sku_not', alias?: string  } 
  | { name: 'sku_in', alias?: string  } 
  | { name: 'sku_not_in', alias?: string  } 
  | { name: 'sku_lt', alias?: string  } 
  | { name: 'sku_lte', alias?: string  } 
  | { name: 'sku_gt', alias?: string  } 
  | { name: 'sku_gte', alias?: string  } 
  | { name: 'sku_contains', alias?: string  } 
  | { name: 'sku_not_contains', alias?: string  } 
  | { name: 'sku_starts_with', alias?: string  } 
  | { name: 'sku_not_starts_with', alias?: string  } 
  | { name: 'sku_ends_with', alias?: string  } 
  | { name: 'sku_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductUpdateManyWithWhereNestedInput {
  where?: ProductScalarWhereInput
  data?: ProductUpdateManyDataInput
}
export type ProductUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProductUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateManyDataInput {
  name?: string | null
  category?: prisma.ProductCategory | null
  description?: string | null
  details?: undefined | null
  quantity?: number | null
  sku?: string | null
}
export type ProductUpdateManyDataInputInputObject =
  | Extract<keyof ProductUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface OrderUpdateManyMutationInput {
  total?: number | null
  status?: prisma.OrderStatus | null
}
export type OrderUpdateManyMutationInputInputObject =
  | Extract<keyof OrderUpdateManyMutationInput, string>
  | { name: 'total', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface PersonUpdateInput {
  billing?: BillingUpdateOneInput | null
  connections?: PersonUpdateManyInput | null
  contact?: ContactUpdateOneInput | null
  career?: CareerUpdateOneInput | null
  name?: NameUpdateOneRequiredInput | null
  password?: string | null
  profile?: ProfileUpdateOneInput | null
  sessions?: SessionUpdateManyInput | null
  type?: prisma.PersonType | null
  username?: string | null
}
export type PersonUpdateInputInputObject =
  | Extract<keyof PersonUpdateInput, string>
  | { name: 'billing', alias?: string  } 
  | { name: 'connections', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'career', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'sessions', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface PersonUpdateManyMutationInput {
  password?: string | null
  type?: prisma.PersonType | null
  username?: string | null
}
export type PersonUpdateManyMutationInputInputObject =
  | Extract<keyof PersonUpdateManyMutationInput, string>
  | { name: 'password', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface ProductUpdateInput {
  name?: string | null
  category?: prisma.ProductCategory | null
  description?: string | null
  details?: undefined | null
  manufacturer?: ManufacturerUpdateOneInput | null
  price?: PriceUpdateOneRequiredInput | null
  quantity?: number | null
  shipping?: ShippingUpdateOneInput | null
  sku?: string | null
}
export type ProductUpdateInputInputObject =
  | Extract<keyof ProductUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'manufacturer', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'shipping', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface ProductUpdateManyMutationInput {
  name?: string | null
  category?: prisma.ProductCategory | null
  description?: string | null
  details?: undefined | null
  quantity?: number | null
  sku?: string | null
}
export type ProductUpdateManyMutationInputInputObject =
  | Extract<keyof ProductUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface CommentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CommentWhereInput | null
  AND?: CommentSubscriptionWhereInput[]
}
export type CommentSubscriptionWhereInputInputObject =
  | Extract<keyof CommentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DocumentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DocumentWhereInput | null
  AND?: DocumentSubscriptionWhereInput[]
}
export type DocumentSubscriptionWhereInputInputObject =
  | Extract<keyof DocumentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface NotificationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NotificationWhereInput | null
  AND?: NotificationSubscriptionWhereInput[]
}
export type NotificationSubscriptionWhereInputInputObject =
  | Extract<keyof NotificationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface OrderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderWhereInput | null
  AND?: OrderSubscriptionWhereInput[]
}
export type OrderSubscriptionWhereInputInputObject =
  | Extract<keyof OrderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface PersonSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PersonWhereInput | null
  AND?: PersonSubscriptionWhereInput[]
}
export type PersonSubscriptionWhereInputInputObject =
  | Extract<keyof PersonSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ProductSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductWhereInput | null
  AND?: ProductSubscriptionWhereInput[]
}
export type ProductSubscriptionWhereInputInputObject =
  | Extract<keyof ProductSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type AccountTypeValues =
  | 'CHECKING'
  | 'SAVINGS'
  
export type CardTypeValues =
  | 'CREDIT'
  | 'DEBIT'
  
export type GenderValues =
  | 'MALE'
  | 'FEMALE'
  | 'OTHER'
  
export type PersonTypeValues =
  | 'ADMINISTRATOR'
  | 'EMPLOYEE'
  | 'PARTNER'
  | 'USER'
  | 'VENDOR'
  
export type PersonOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | '_createdAt_ASC'
  | '_createdAt_DESC'
  | '_updatedAt_ASC'
  | '_updatedAt_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'username_ASC'
  | 'username_DESC'
  
export type CommentTypeValues =
  | 'CONVERSATION'
  | 'REVIEW'
  
export type CommentOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | '_createdAt_ASC'
  | '_createdAt_DESC'
  | '_discussionId_ASC'
  | '_discussionId_DESC'
  | '_updatedAt_ASC'
  | '_updatedAt_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'fullSlug_ASC'
  | 'fullSlug_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'type_ASC'
  | 'type_DESC'
  
export type DocumentCategoryValues =
  | 'UNCATEGORIZED'
  | 'CORPORATE'
  
export type DocumentTypeValues =
  | 'DEFAULT'
  | 'INSIGHT'
  | 'POLICY'
  
export type DocumentOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | '_createdAt_ASC'
  | '_createdAt_DESC'
  | '_publishedAt_ASC'
  | '_publishedAt_DESC'
  | '_updatedAt_ASC'
  | '_updatedAt_DESC'
  | 'category_ASC'
  | 'category_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'subtitle_ASC'
  | 'subtitle_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'type_ASC'
  | 'type_DESC'
  
export type SenderTypeValues =
  | 'SYSTEM'
  | 'PERSON'
  
export type NotificationOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | '_createdAt_ASC'
  | '_createdAt_DESC'
  | '_sentAt_ASC'
  | '_sentAt_DESC'
  | 'message_ASC'
  | 'message_DESC'
  | 'title_ASC'
  | 'title_DESC'
  
export type ProductCategoryValues =
  | 'UNCATEGORIZED'
  
export type DimensionScaleValues =
  | 'FOOT'
  | 'METER'
  
export type ProductOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | '_handlerId_ASC'
  | '_handlerId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'category_ASC'
  | 'category_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'details_ASC'
  | 'details_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'sku_ASC'
  | 'sku_DESC'
  
export type OrderStatusValues =
  | 'CART'
  | 'PAID'
  | 'WISH'
  
export type OrderOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | 'total_ASC'
  | 'total_DESC'
  | 'status_ASC'
  | 'status_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  